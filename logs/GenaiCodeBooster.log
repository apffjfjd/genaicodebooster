[WARN ] 2025-04-18 04:40:03.986 [HikariPool housekeeper] HikariPool - HikariPool - Thread starvation or clock leap detected (housekeeper delta=7h11m49s434ms901µs900ns).
[INFO ] 2025-04-18 09:03:36.843 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:03:36.868 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:03:36.899 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:03:36.912 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:03:36.953 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:03:36.999 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:03:37.059 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:03:37.094 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[WARN ] 2025-04-18 09:03:52.023 [HikariPool housekeeper] HikariPool - HikariPool - Thread starvation or clock leap detected (housekeeper delta=1h4m17s966ms229µs800ns).
[INFO ] 2025-04-18 09:05:23.210 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:23.213 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:23.230 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:23.242 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:23.256 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:23.259 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:23.273 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:23.280 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:31.116 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /admin/members/list
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 09:05:31.117 [http-nio-48080-exec-6] MemberController - 회원 목록 조회 요청
[INFO ] 2025-04-18 09:05:31.133 [http-nio-48080-exec-6] MemberController - 총 2명의 회원 조회됨
[INFO ] 2025-04-18 09:05:31.136 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /admin/members/list
  ◀ Body     : [ {
  "id" : "testuser",
  "name" : "김규동",
  "email" : "kdkim@iteyes.co.kr"
}, {
  "id" : "admin1",
  "name" : "어드민",
  "email" : "admin1@1234"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:35.840 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=37
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 09:05:35.847 [http-nio-48080-exec-3] MemberController - 로그인 시도 - ID: admin1
[INFO ] 2025-04-18 09:05:35.850 [http-nio-48080-exec-3] MemberController - 로그인 성공 - ID: admin1, 이메일: admin1@1234
[INFO ] 2025-04-18 09:05:35.851 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 어드민
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:35.881 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:35.882 [http-nio-48080-exec-7] MemberController - 받은 id: admin1
[INFO ] 2025-04-18 09:05:35.885 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin1
  ◀ Body     : {
  "id" : "admin1",
  "passwordHash" : "1234",
  "email" : "admin1@1234",
  "name" : "어드민",
  "createdAt" : "2025-04-17T16:08:04.342751",
  "updatedAt" : "2025-04-17T16:08:04.342751"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:36.051 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 09:05:36.052 [http-nio-48080-exec-4] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 09:05:36.058 [http-nio-48080-exec-4] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 09:05:36.062 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:38.118 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:38.134 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 32,
  "message" : "토큰 저장소",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:38:02.60844"
}, {
  "id" : 31,
  "message" : "인증에 성공하면 토큰이 생성되면 어디에 저장해?\n이 질문 제목만 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:38:02.606935"
}, {
  "id" : 30,
  "message" : "**토큰 저장 위치**\n\n인증에 성공하면 토큰은 다음 위치에 저장됩니다.\n\n* **크립토 월렛:** 토큰은 블록체인 네트워크에 기록되어 보안하고 관리합니다.\n* **지갑:** 사용자가 토큰을 보유하고 관리할 수 있는 소프트웨어 또는 하드웨어 프로그램입니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:37:26.795765"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:39.273 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:39.280 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 28,
  "message" : "시작합니다! 무엇에 도와드릴까요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:33:11.38904"
}, {
  "id" : 27,
  "message" : "ㅇㅇ\n한글로",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:33:11.387532"
}, {
  "id" : 26,
  "message" : "아, 이해했습니다. 시작 전을 합니다. 알려주세요, 어떤 작업을 하고 싶나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:32:04.334068"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:40.032 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:40.038 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:42.084 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:42.089 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:42.502 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:42.510 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:43.315 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:43.321 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:44.064 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:44.072 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 28,
  "message" : "시작합니다! 무엇에 도와드릴까요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:33:11.38904"
}, {
  "id" : 27,
  "message" : "ㅇㅇ\n한글로",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:33:11.387532"
}, {
  "id" : 26,
  "message" : "아, 이해했습니다. 시작 전을 합니다. 알려주세요, 어떤 작업을 하고 싶나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:32:04.334068"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:45.949 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:45.955 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:55.146 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:05:55.152 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:06:02.965 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:06:02.972 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:06:15.393 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:06:15.399 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:06:22.425 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:06:22.432 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 28,
  "message" : "시작합니다! 무엇에 도와드릴까요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:33:11.38904"
}, {
  "id" : 27,
  "message" : "ㅇㅇ\n한글로",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:33:11.387532"
}, {
  "id" : 26,
  "message" : "아, 이해했습니다. 시작 전을 합니다. 알려주세요, 어떤 작업을 하고 싶나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:32:04.334068"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:06:45.836 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:06:45.842 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 32,
  "message" : "토큰 저장소",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:38:02.60844"
}, {
  "id" : 31,
  "message" : "인증에 성공하면 토큰이 생성되면 어디에 저장해?\n이 질문 제목만 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:38:02.606935"
}, {
  "id" : 30,
  "message" : "**토큰 저장 위치**\n\n인증에 성공하면 토큰은 다음 위치에 저장됩니다.\n\n* **크립토 월렛:** 토큰은 블록체인 네트워크에 기록되어 보안하고 관리합니다.\n* **지갑:** 사용자가 토큰을 보유하고 관리할 수 있는 소프트웨어 또는 하드웨어 프로그램입니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:37:26.795765"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:16:45.405 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 09:16:45.406 [http-nio-48080-exec-3] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 09:16:45.410 [http-nio-48080-exec-3] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 09:16:45.412 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:16:49.039 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:16:49.048 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 32,
  "message" : "토큰 저장소",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:38:02.60844"
}, {
  "id" : 31,
  "message" : "인증에 성공하면 토큰이 생성되면 어디에 저장해?\n이 질문 제목만 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:38:02.606935"
}, {
  "id" : 30,
  "message" : "**토큰 저장 위치**\n\n인증에 성공하면 토큰은 다음 위치에 저장됩니다.\n\n* **크립토 월렛:** 토큰은 블록체인 네트워크에 기록되어 보안하고 관리합니다.\n* **지갑:** 사용자가 토큰을 보유하고 관리할 수 있는 소프트웨어 또는 하드웨어 프로그램입니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:37:26.795765"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:22:58.884 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 09:22:58.885 [http-nio-48080-exec-2] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 09:22:58.888 [http-nio-48080-exec-2] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 09:22:58.890 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:23:00.506 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:23:00.514 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 32,
  "message" : "토큰 저장소",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:38:02.60844"
}, {
  "id" : 31,
  "message" : "인증에 성공하면 토큰이 생성되면 어디에 저장해?\n이 질문 제목만 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:38:02.606935"
}, {
  "id" : 30,
  "message" : "**토큰 저장 위치**\n\n인증에 성공하면 토큰은 다음 위치에 저장됩니다.\n\n* **크립토 월렛:** 토큰은 블록체인 네트워크에 기록되어 보안하고 관리합니다.\n* **지갑:** 사용자가 토큰을 보유하고 관리할 수 있는 소프트웨어 또는 하드웨어 프로그램입니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:37:26.795765"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:23:03.789 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:23:03.796 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 28,
  "message" : "시작합니다! 무엇에 도와드릴까요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:33:11.38904"
}, {
  "id" : 27,
  "message" : "ㅇㅇ\n한글로",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:33:11.387532"
}, {
  "id" : 26,
  "message" : "아, 이해했습니다. 시작 전을 합니다. 알려주세요, 어떤 작업을 하고 싶나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:32:04.334068"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:23:04.958 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:23:04.965 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 32,
  "message" : "토큰 저장소",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:38:02.60844"
}, {
  "id" : 31,
  "message" : "인증에 성공하면 토큰이 생성되면 어디에 저장해?\n이 질문 제목만 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:38:02.606935"
}, {
  "id" : 30,
  "message" : "**토큰 저장 위치**\n\n인증에 성공하면 토큰은 다음 위치에 저장됩니다.\n\n* **크립토 월렛:** 토큰은 블록체인 네트워크에 기록되어 보안하고 관리합니다.\n* **지갑:** 사용자가 토큰을 보유하고 관리할 수 있는 소프트웨어 또는 하드웨어 프로그램입니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:37:26.795765"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 09:23:22.039 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=104
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 09:23:22.044 [http-nio-48080-exec-10] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=2, msgQuestion=토큰 저장하는 코드 예시로 줘, msgList=)
[INFO ] 2025-04-18 09:24:47.527 [http-nio-48080-exec-10] ChatController - AI 응답 수신: ```python
def store_tokens(tokens):
    # 토큰 저장소 생성
    token_store = {}

    # 토큰 목록 순회
    for token in tokens:
        # 토큰 이름과 가격 저장
        token_store[token['name']] = token['price']

    # 토큰 저장소 반환
    return token_store
```

**사용법:**

```python
# 토큰 목록
tokens = [
    {'name': 'BTC', 'price': 10000},
    {'name': 'ETH', 'price': 2000},
    {'name': 'BNB', 'price': 3000},
]

# 토큰 저장
token_store = store_tokens(tokens)
```

**저장된 토큰:**

```python
{'BTC': 10000, 'ETH': 2000, 'BNB': 3000}
```

**설명:**

* `store_tokens()` 함수는 토큰 목록을 인수로 받습니다.
* 함수는 토큰 저장소를 생성하고, 토큰 목록을 순회하며 토큰 이름과 가격을 저장합니다.
* 결과적으로 토큰 저장소가 반환됩니다.

**주의:**

* 토큰 저장소는 데이터 구조에 맞게 설계되어야 합니다.
* 토큰 가격은 실시간으로 변동하므로, 저장된 가격은 시간이 지남에 따라 변경될 수 있습니다.
[INFO ] 2025-04-18 09:24:47.550 [http-nio-48080-exec-10] ChatController - 사용자 메시지 저장 완료: 33
[INFO ] 2025-04-18 09:24:47.551 [http-nio-48080-exec-10] ChatController - AI 메시지 저장 완료: 34
[INFO ] 2025-04-18 09:24:47.557 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "```python\ndef store_tokens(tokens):\n    # 토큰 저장소 생성\n    token_store = {}\n\n    # 토큰 목록 순회\n    for token in tokens:\n        # 토큰 이름과 가격 저장\n        token_store[token['name']] = token['price']\n\n    # 토큰 저장소 반환\n    return token_store\n```\n\n**사용법:**\n\n```python\n# 토큰 목록\ntokens = [\n    {'name': 'BTC', 'price': 10000},\n    {'name': 'ETH', 'price': 2000},\n    {'name': 'BNB', 'price': 3000},\n]\n\n# 토큰 저장\ntoken_store = store_tokens(tokens)\n```\n\n**저장된 토큰:**\n\n```python\n{'BTC': 10000, 'ETH': 2000, 'BNB': 3000}\n```\n\n**설명:**\n\n* `store_tokens()` 함수는 토큰 목록을 인수로 받습니다.\n* 함수는 토큰 저장소를 생성하고, 토큰 목록을 순회하며 토큰 이름과 가격을 저장합니다.\n* 결과적으로 토큰 저장소가 반환됩니다.\n\n**주의:**\n\n* 토큰 저장소는 데이터 구조에 맞게 설계되어야 합니다.\n* 토큰 가격은 실시간으로 변동하므로, 저장된 가격은 시간이 지남에 따라 변경될 수 있습니다."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:09:16.303 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=277
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:09:16.321 [http-nio-48080-exec-6] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=2, msgQuestion=ㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇ, msgList=)
[INFO ] 2025-04-18 10:09:48.341 [http-nio-48080-exec-6] ChatController - AI 응답 수신: I am ready to receive your commands for this turn! Please provide me with any actions you want me to take, such as moving, attacking, or casting spells. I will process your instructions and respond with the outcomes of your actions.
[INFO ] 2025-04-18 10:09:48.402 [http-nio-48080-exec-6] ChatController - 사용자 메시지 저장 완료: 35
[INFO ] 2025-04-18 10:09:48.431 [http-nio-48080-exec-6] ChatController - AI 메시지 저장 완료: 36
[INFO ] 2025-04-18 10:09:48.445 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "I am ready to receive your commands for this turn! Please provide me with any actions you want me to take, such as moving, attacking, or casting spells. I will process your instructions and respond with the outcomes of your actions."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:13:00.226 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:13:00.243 [http-nio-48080-exec-7] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:13:00.266 [http-nio-48080-exec-7] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:13:00.269 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:13:01.717 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:13:01.749 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 36,
  "message" : "I am ready to receive your commands for this turn! Please provide me with any actions you want me to take, such as moving, attacking, or casting spells. I will process your instructions and respond with the outcomes of your actions.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:09:48.428922"
}, {
  "id" : 35,
  "message" : "ㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:09:48.355746"
}, {
  "id" : 34,
  "message" : "```python\ndef store_tokens(tokens):\n    # 토큰 저장소 생성\n    token_store = {}\n\n    # 토큰 목록 순회\n    for token in tokens:\n        # 토큰 이름과 가격 저장\n        token_store[token['name']] = token['price']\n\n    # 토큰 저장소 반환\n    return token_store\n```\n\n**사용법:**\n\n```python\n# 토큰 목록\ntokens = [\n    {'name': 'BTC', 'price': 10000},\n    {'name': 'ETH', 'price': 2000},\n    {'name': 'BNB', 'price': 3000},\n]\n\n# 토큰 저장\ntoken_store = store_tokens(tokens)\n```\n\n**저장된 토큰:**\n\n```python\n{'BTC': 10000, 'ETH': 2000, 'BNB': 3000}\n```\n\n**설명:**\n\n* `store_tokens()` 함수는 토큰 목록을 인수로 받습니다.\n* 함수는 토큰 저장소를 생성하고, 토큰 목록을 순회하며 토큰 이름과 가격을 저장합니다.\n* 결과적으로 토큰 저장소가 반환됩니다.\n\n**주의:**\n\n* 토큰 저장소는 데이터 구조에 맞게 설계되어야 합니다.\n* 토큰 가격은 실시간으로 변동하므로, 저장된 가격은 시간이 지남에 따라 변경될 수 있습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T09:24:47.55067"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:13:54.083 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=118
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:13:54.085 [http-nio-48080-exec-2] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=2, msgQuestion=store_tokens() 사용하는 예시 코드 만들어줘, msgList=)
[INFO ] 2025-04-18 10:15:14.303 [http-nio-48080-exec-2] ChatController - AI 응답 수신: ```lua
function store_tokens()
    local token_count = game.players[me.id].tokens

    -- Store the token count in a local variable
    local stored_tokens = token_count

    -- Store the token count in a data store
    data.tokens[me.id] = stored_tokens
end
```

**Code Explanation:**

* `store_tokens()` function is defined to store the current token count for the player in a data store.
* `token_count` variable retrieves the token count of the current player from `game.players[me.id].tokens`.
* `stored_tokens` variable is declared to store the token count.
* `data.tokens[me.id]` is a data store key that stores the token count for the current player.
* `=` operator assigns the `stored_tokens` value to the data store key.

**How it works:**

1. The `store_tokens()` function is called at the beginning of each turn.
2. It retrieves the current token count of the player from `game.players[me.id].tokens`.
3. The token count is stored in the `stored_tokens` variable.
4. The `stored_tokens` value is then stored in the data store at `data.tokens[me.id]`.

**Purpose:**

The purpose of storing the token count is to:

* Track the number of tokens the player has during gameplay.
* Allow players to access their token count later, for example, to calculate their score or determine their eligibility for certain actions.

**Note:**

* The data store `data` is a global data structure that can be used to store temporary data during gameplay.
* The key `data.tokens[me.id]` is specific to the current player.
* The data stored in the data store can be used in other parts of the game code.
[INFO ] 2025-04-18 10:15:14.306 [http-nio-48080-exec-2] ChatController - 사용자 메시지 저장 완료: 37
[INFO ] 2025-04-18 10:15:14.307 [http-nio-48080-exec-2] ChatController - AI 메시지 저장 완료: 38
[INFO ] 2025-04-18 10:15:14.310 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "```lua\nfunction store_tokens()\n    local token_count = game.players[me.id].tokens\n\n    -- Store the token count in a local variable\n    local stored_tokens = token_count\n\n    -- Store the token count in a data store\n    data.tokens[me.id] = stored_tokens\nend\n```\n\n**Code Explanation:**\n\n* `store_tokens()` function is defined to store the current token count for the player in a data store.\n* `token_count` variable retrieves the token count of the current player from `game.players[me.id].tokens`.\n* `stored_tokens` variable is declared to store the token count.\n* `data.tokens[me.id]` is a data store key that stores the token count for the current player.\n* `=` operator assigns the `stored_tokens` value to the data store key.\n\n**How it works:**\n\n1. The `store_tokens()` function is called at the beginning of each turn.\n2. It retrieves the current token count of the player from `game.players[me.id].tokens`.\n3. The token count is stored in the `stored_tokens` variable.\n4. The `stored_tokens` value is then stored in the data store at `data.tokens[me.id]`.\n\n**Purpose:**\n\nThe purpose of storing the token count is to:\n\n* Track the number of tokens the player has during gameplay.\n* Allow players to access their token count later, for example, to calculate their score or determine their eligibility for certain actions.\n\n**Note:**\n\n* The data store `data` is a global data structure that can be used to store temporary data during gameplay.\n* The key `data.tokens[me.id]` is specific to the current player.\n* The data stored in the data store can be used in other parts of the game code."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:16:32.145 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=70
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:16:32.146 [http-nio-48080-exec-5] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=2, msgQuestion=안녕, msgList=)
[INFO ] 2025-04-18 10:16:37.962 [http-nio-48080-exec-5] ChatController - AI 응답 수신: 안녕하세요! 저도 좋은 상태입니다. 도와드릴까요?
[INFO ] 2025-04-18 10:16:37.965 [http-nio-48080-exec-5] ChatController - 사용자 메시지 저장 완료: 39
[INFO ] 2025-04-18 10:16:37.966 [http-nio-48080-exec-5] ChatController - AI 메시지 저장 완료: 40
[INFO ] 2025-04-18 10:16:37.967 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "안녕하세요! 저도 좋은 상태입니다. 도와드릴까요?"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:20:51.305 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:20:51.306 [http-nio-48080-exec-10] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:20:51.310 [http-nio-48080-exec-10] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:20:51.312 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:20:53.722 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:20:53.722 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:20:53.726 [http-nio-48080-exec-9] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:20:53.728 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:20:54.446 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:20:54.459 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 40,
  "message" : "안녕하세요! 저도 좋은 상태입니다. 도와드릴까요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:16:37.9659"
}, {
  "id" : 39,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:16:37.963902"
}, {
  "id" : 38,
  "message" : "```lua\nfunction store_tokens()\n    local token_count = game.players[me.id].tokens\n\n    -- Store the token count in a local variable\n    local stored_tokens = token_count\n\n    -- Store the token count in a data store\n    data.tokens[me.id] = stored_tokens\nend\n```\n\n**Code Explanation:**\n\n* `store_tokens()` function is defined to store the current token count for the player in a data store.\n* `token_count` variable retrieves the token count of the current player from `game.players[me.id].tokens`.\n* `stored_tokens` variable is declared to store the token count.\n* `data.tokens[me.id]` is a data store key that stores the token count for the current player.\n* `=` operator assigns the `stored_tokens` value to the data store key.\n\n**How it works:**\n\n1. The `store_tokens()` function is called at the beginning of each turn.\n2. It retrieves the current token count of the player from `game.players[me.id].tokens`.\n3. The token count is stored in the `stored_tokens` variable.\n4. The `stored_tokens` value is then stored in the data store at `data.tokens[me.id]`.\n\n**Purpose:**\n\nThe purpose of storing the token count is to:\n\n* Track the number of tokens the player has during gameplay.\n* Allow players to access their token count later, for example, to calculate their score or determine their eligibility for certain actions.\n\n**Note:**\n\n* The data store `data` is a global data structure that can be used to store temporary data during gameplay.\n* The key `data.tokens[me.id]` is specific to the current player.\n* The data stored in the data store can be used in other parts of the game code.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:15:14.306238"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:21:20.390 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:21:20.390 [http-nio-48080-exec-3] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:21:20.398 [http-nio-48080-exec-3] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:21:20.400 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:22:46.285 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:22:46.285 [http-nio-48080-exec-4] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:22:46.294 [http-nio-48080-exec-4] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:22:46.295 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:22:56.002 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:22:56.003 [http-nio-48080-exec-2] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:22:56.006 [http-nio-48080-exec-2] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:22:56.010 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:22:56.622 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:22:56.630 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 40,
  "message" : "안녕하세요! 저도 좋은 상태입니다. 도와드릴까요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:16:37.9659"
}, {
  "id" : 39,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:16:37.963902"
}, {
  "id" : 38,
  "message" : "```lua\nfunction store_tokens()\n    local token_count = game.players[me.id].tokens\n\n    -- Store the token count in a local variable\n    local stored_tokens = token_count\n\n    -- Store the token count in a data store\n    data.tokens[me.id] = stored_tokens\nend\n```\n\n**Code Explanation:**\n\n* `store_tokens()` function is defined to store the current token count for the player in a data store.\n* `token_count` variable retrieves the token count of the current player from `game.players[me.id].tokens`.\n* `stored_tokens` variable is declared to store the token count.\n* `data.tokens[me.id]` is a data store key that stores the token count for the current player.\n* `=` operator assigns the `stored_tokens` value to the data store key.\n\n**How it works:**\n\n1. The `store_tokens()` function is called at the beginning of each turn.\n2. It retrieves the current token count of the player from `game.players[me.id].tokens`.\n3. The token count is stored in the `stored_tokens` variable.\n4. The `stored_tokens` value is then stored in the data store at `data.tokens[me.id]`.\n\n**Purpose:**\n\nThe purpose of storing the token count is to:\n\n* Track the number of tokens the player has during gameplay.\n* Allow players to access their token count later, for example, to calculate their score or determine their eligibility for certain actions.\n\n**Note:**\n\n* The data store `data` is a global data structure that can be used to store temporary data during gameplay.\n* The key `data.tokens[me.id]` is specific to the current player.\n* The data stored in the data store can be used in other parts of the game code.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:15:14.306238"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:23:19.990 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=121
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:23:19.991 [http-nio-48080-exec-5] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=2, msgQuestion=next.js 사용하려고 하는데 설정 방법 알려줘, msgList=)
[INFO ] 2025-04-18 10:24:47.082 [http-nio-48080-exec-5] ChatController - AI 응답 수신: **next.js에서 사용하기 위해 `next/router` 모듈을 사용합니다.** 

**1. `next/router` 모듈을 사용하기 위해 다음 코드를 `pages/index.js` 파일의 상단에 추가합니다.**

```javascript
import { useRouter } from 'next/router';
```

**2. `useRouter` 함수를 사용하여 현재 라우터 객체를 얻습니다.**

```javascript
const router = useRouter();
```

**3. 라우터 객체를 사용하여 `startOfTurn` 이벤트를 설정합니다.**

```javascript
router.on('startOfTurn', () => {
  // 이벤트 처리 코드
});
```

**4. `startOfTurn` 이벤트에서 필요한 작업을 수행합니다.** 예를 들어, 게임 상태를 업데이트하거나 로그인 정보를 업데이트할 수 있습니다.

**다음은 `startOfTurn` 이벤트 처리 코드 예시입니다.**

```javascript
router.on('startOfTurn', () => {
  // GameState에 현재 라운드 정보 저장
  gameState.currentRound++;

  // 로그인 정보 업데이트
  updateUser({ lastTurn: Date.now() });
});
```

**`startOfTurn` 이벤트는 다음과 같은 작업에 사용할 수 있습니다.**

* 게임 상태 업데이트
* 로그인 정보 업데이트
* 라운드 정보 저장
* 게임 플레이 목록 업데이트

**참고:**

* `startOfTurn` 이벤트는 Next.js 라우터에 내장된 이벤트입니다.
* 이벤트는 `next/router` 모듈을 사용하여 등록해야 합니다.
[INFO ] 2025-04-18 10:24:47.094 [http-nio-48080-exec-5] ChatController - 사용자 메시지 저장 완료: 41
[INFO ] 2025-04-18 10:24:47.095 [http-nio-48080-exec-5] ChatController - AI 메시지 저장 완료: 42
[INFO ] 2025-04-18 10:24:47.099 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "**next.js에서 사용하기 위해 `next/router` 모듈을 사용합니다.** \n\n**1. `next/router` 모듈을 사용하기 위해 다음 코드를 `pages/index.js` 파일의 상단에 추가합니다.**\n\n```javascript\nimport { useRouter } from 'next/router';\n```\n\n**2. `useRouter` 함수를 사용하여 현재 라우터 객체를 얻습니다.**\n\n```javascript\nconst router = useRouter();\n```\n\n**3. 라우터 객체를 사용하여 `startOfTurn` 이벤트를 설정합니다.**\n\n```javascript\nrouter.on('startOfTurn', () => {\n  // 이벤트 처리 코드\n});\n```\n\n**4. `startOfTurn` 이벤트에서 필요한 작업을 수행합니다.** 예를 들어, 게임 상태를 업데이트하거나 로그인 정보를 업데이트할 수 있습니다.\n\n**다음은 `startOfTurn` 이벤트 처리 코드 예시입니다.**\n\n```javascript\nrouter.on('startOfTurn', () => {\n  // GameState에 현재 라운드 정보 저장\n  gameState.currentRound++;\n\n  // 로그인 정보 업데이트\n  updateUser({ lastTurn: Date.now() });\n});\n```\n\n**`startOfTurn` 이벤트는 다음과 같은 작업에 사용할 수 있습니다.**\n\n* 게임 상태 업데이트\n* 로그인 정보 업데이트\n* 라운드 정보 저장\n* 게임 플레이 목록 업데이트\n\n**참고:**\n\n* `startOfTurn` 이벤트는 Next.js 라우터에 내장된 이벤트입니다.\n* 이벤트는 `next/router` 모듈을 사용하여 등록해야 합니다."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:25:17.684 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=90
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:25:17.685 [http-nio-48080-exec-1] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=2, msgQuestion=startOfTurn 이게 뭐야?, msgList=)
[INFO ] 2025-04-18 10:25:19.058 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=70
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:25:19.059 [http-nio-48080-exec-10] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=2, msgQuestion=ㅇㅇ, msgList=)
[INFO ] 2025-04-18 10:25:21.180 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=68
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:25:21.184 [http-nio-48080-exec-9] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=2, msgQuestion=ㅇ?, msgList=)
[INFO ] 2025-04-18 10:25:52.550 [http-nio-48080-exec-1] ChatController - AI 응답 수신: **startOfTurn**은 게임 내에서 플레이어가 새로운 라운드를 시작할 때 사용하는 명령어입니다. 이 명령어는 플레이어가 다음 라운드 동안 게임 내의 모든 활동을 시작하고 새로운 라운드에 필요한 모든 설정을 변경합니다.

**startOfTurn** 명령어는 다음과 같은 작업을 수행합니다:

* 새로운 라운드를 시작합니다.
* 플레이어의 상태를 업데이트합니다.
* 게임 내의 모든 변수와 상태를 초기화합니다.
* 플레이어가 다음 라운드 동안 수행할 작업을 설정합니다.

**startOfTurn** 명령어는 게임에서 플레이어가 새로운 라운드를 시작하고 모든 설정을 초기화할 수 있도록 합니다.
[INFO ] 2025-04-18 10:25:52.561 [http-nio-48080-exec-1] ChatController - 사용자 메시지 저장 완료: 43
[INFO ] 2025-04-18 10:25:52.567 [http-nio-48080-exec-1] ChatController - AI 메시지 저장 완료: 44
[INFO ] 2025-04-18 10:25:52.569 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "**startOfTurn**은 게임 내에서 플레이어가 새로운 라운드를 시작할 때 사용하는 명령어입니다. 이 명령어는 플레이어가 다음 라운드 동안 게임 내의 모든 활동을 시작하고 새로운 라운드에 필요한 모든 설정을 변경합니다.\n\n**startOfTurn** 명령어는 다음과 같은 작업을 수행합니다:\n\n* 새로운 라운드를 시작합니다.\n* 플레이어의 상태를 업데이트합니다.\n* 게임 내의 모든 변수와 상태를 초기화합니다.\n* 플레이어가 다음 라운드 동안 수행할 작업을 설정합니다.\n\n**startOfTurn** 명령어는 게임에서 플레이어가 새로운 라운드를 시작하고 모든 설정을 초기화할 수 있도록 합니다."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:25:59.814 [http-nio-48080-exec-9] ChatController - AI 응답 수신: ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.
[INFO ] 2025-04-18 10:25:59.817 [http-nio-48080-exec-9] ChatController - 사용자 메시지 저장 완료: 45
[INFO ] 2025-04-18 10:25:59.819 [http-nio-48080-exec-9] ChatController - AI 메시지 저장 완료: 46
[INFO ] 2025-04-18 10:25:59.821 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:26:07.485 [http-nio-48080-exec-10] ChatController - AI 응답 수신: **Turn start!** 

I am ready to receive your command. Please let me know what you would like me to do.
[INFO ] 2025-04-18 10:26:07.486 [http-nio-48080-exec-10] ChatController - 사용자 메시지 저장 완료: 47
[INFO ] 2025-04-18 10:26:07.488 [http-nio-48080-exec-10] ChatController - AI 메시지 저장 완료: 48
[INFO ] 2025-04-18 10:26:07.491 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:26:14.843 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:26:14.855 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 28,
  "message" : "시작합니다! 무엇에 도와드릴까요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:33:11.38904"
}, {
  "id" : 27,
  "message" : "ㅇㅇ\n한글로",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:33:11.387532"
}, {
  "id" : 26,
  "message" : "아, 이해했습니다. 시작 전을 합니다. 알려주세요, 어떤 작업을 하고 싶나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:32:04.334068"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:26:15.397 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:26:15.407 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:27:27.100 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:27:27.101 [http-nio-48080-exec-8] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:27:27.105 [http-nio-48080-exec-8] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:27:27.106 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:28:39.784 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:28:39.784 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:28:39.786 [http-nio-48080-exec-1] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:28:39.788 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:28:41.321 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:28:41.329 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 28,
  "message" : "시작합니다! 무엇에 도와드릴까요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:33:11.38904"
}, {
  "id" : 27,
  "message" : "ㅇㅇ\n한글로",
  "senderType" : "USER",
  "createdAt" : "2025-04-17T18:33:11.387532"
}, {
  "id" : 26,
  "message" : "아, 이해했습니다. 시작 전을 합니다. 알려주세요, 어떤 작업을 하고 싶나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-17T18:32:04.334068"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:28:55.801 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=70
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:28:55.802 [http-nio-48080-exec-10] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=3, msgQuestion=안녕, msgList=)
[INFO ] 2025-04-18 10:29:01.441 [http-nio-48080-exec-10] ChatController - AI 응답 수신: 안녕하세요! 오늘은 무슨 일이 있나요?
[INFO ] 2025-04-18 10:29:01.465 [http-nio-48080-exec-10] ChatController - 사용자 메시지 저장 완료: 49
[INFO ] 2025-04-18 10:29:01.467 [http-nio-48080-exec-10] ChatController - AI 메시지 저장 완료: 50
[INFO ] 2025-04-18 10:29:01.468 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "안녕하세요! 오늘은 무슨 일이 있나요?"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:29:45.011 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=121
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:29:45.012 [http-nio-48080-exec-6] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=3, msgQuestion=next.js에서 카카오 로그인 기능 만들고 싶어, msgList=)
[INFO ] 2025-04-18 10:29:51.319 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:29:51.334 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:19.930 [http-nio-48080-exec-6] ChatController - AI 응답 수신: **next.js에서 카카오 로그인 기능 만들기**

**1. 카카오 개발 플랫폼 생성**

* 카카오 개발 플랫폼 등록하고 API 키를 받음
* 사용자 모델 설정 및 카카오 로그인 API 설정

**2. next.js 프로젝트 설정**

* next.js 프로젝트 생성
* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정

**3. 로그인 페이지 만들기**

* `pages/login.js` 페이지 만들고 로그인 버튼을 추가
* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출

**4. 로그인 결과 처리**

* 카카오 로그인 API에서 사용자 정보를 받음
* 사용자 정보를 데이터베이스에 저장
* 사용자를 메인 페이지로 이동

**5. 코드 예시**

```javascript
import { useSession } from 'next-auth/react'
import { loginKakao } from '../utils/kakaoLogin'

const LoginPage = () => {
  const { session } = useSession()

  const handleLogin = async () => {
    await loginKakao()
  }

  return (
    <div>
      <button onClick={handleLogin}>카카오 로그인</button>
    </div>
  )
}

export default LoginPage
```

**`utils/kakaoLogin.js` 파일**

```javascript
import { NextApiRequest, NextApiResponse } from 'next'

export const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {
  // 카카오 로그인 API 호출
  // ...

  // 사용자 정보 반환
  res.status(200).json({
    name: 'John Doe',
    email: 'john.doe@example.com',
  })
}
```

**참고 자료:**

* NextAuth.js: https://next-auth.js.org/
* 카카오 개발 플랫폼: https://developers.kakao.com/

**주의:**

* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.
[INFO ] 2025-04-18 10:31:19.932 [http-nio-48080-exec-6] ChatController - 사용자 메시지 저장 완료: 51
[INFO ] 2025-04-18 10:31:19.933 [http-nio-48080-exec-6] ChatController - AI 메시지 저장 완료: 52
[INFO ] 2025-04-18 10:31:19.934 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:23.867 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:23.878 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:28.516 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:28.522 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:30.039 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:30.044 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:30.894 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:30.899 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:31.485 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:31.490 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:31.939 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:31.948 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:32.515 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:32.531 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:33.199 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:33.206 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:33.789 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:31:33.794 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:50:29.368 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:50:29.375 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:53:12.878 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:53:12.879 [http-nio-48080-exec-8] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:53:12.882 [http-nio-48080-exec-8] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:53:12.884 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:55:32.045 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:55:32.045 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:55:32.048 [http-nio-48080-exec-1] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:55:32.049 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:55:42.660 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:55:42.660 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:55:42.663 [http-nio-48080-exec-9] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:55:42.665 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 10:55:57.673 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 10:55:57.673 [http-nio-48080-exec-10] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 10:55:57.675 [http-nio-48080-exec-10] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 10:55:57.676 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:01:35.975 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:01:36.000 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:01:41.190 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 11:01:41.191 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 11:01:41.194 [http-nio-48080-exec-6] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 11:01:41.195 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:02:38.890 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 11:02:38.891 [http-nio-48080-exec-4] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 11:02:38.902 [http-nio-48080-exec-4] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 11:02:38.903 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:02:39.652 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:02:39.659 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:02:44.126 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=70
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 11:02:44.137 [http-nio-48080-exec-8] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=6, msgQuestion=안녕, msgList=)
[INFO ] 2025-04-18 11:02:52.334 [http-nio-48080-exec-8] ChatController - AI 응답 수신: 안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.
[INFO ] 2025-04-18 11:02:52.340 [http-nio-48080-exec-8] ChatController - 사용자 메시지 저장 완료: 53
[INFO ] 2025-04-18 11:02:52.342 [http-nio-48080-exec-8] ChatController - AI 메시지 저장 완료: 54
[INFO ] 2025-04-18 11:02:52.344 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:00.922 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : DELETE
  ▶ URI      : //api/chatrooms/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:00.966 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 404
  ◀ URI      : //api/chatrooms/6
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:39.460 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 11:03:39.460 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 11:03:39.463 [http-nio-48080-exec-9] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 11:03:39.465 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:40.189 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:40.193 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
}, {
  "id" : 53,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T11:02:52.336644"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:42.406 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 11:03:42.418 [http-nio-48080-exec-3] ChatRoomController - 채팅창 삭제 요청 - ID: 6
[WARN ] 2025-04-18 11:03:42.481 [http-nio-48080-exec-3] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 11:03:42.481 [http-nio-48080-exec-3] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 11:03:42.519 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/6
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 11:03:42.524 [http-nio-48080-exec-3] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 11:03:54.548 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:54.553 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:54.569 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:54.576 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:54.616 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:54.620 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:54.631 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:03:54.650 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:04:14.526 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, cookie=JSESSIONID=A747D0C8620704FD7E468CA0E27CBC3E
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 11:04:14.526 [http-nio-48080-exec-8] ChatRoomController - 채팅창 삭제 요청 - ID: 6
[WARN ] 2025-04-18 11:04:14.530 [http-nio-48080-exec-8] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 11:04:14.530 [http-nio-48080-exec-8] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 11:04:14.530 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/6
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 11:04:14.531 [http-nio-48080-exec-8] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 11:07:04.015 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:07:04.020 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:07:05.723 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:07:05.727 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:09:45.461 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 11:09:45.462 [http-nio-48080-exec-3] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 11:09:45.464 [http-nio-48080-exec-3] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 11:09:45.464 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:16:06.223 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 11:16:06.224 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 11:16:06.225 [http-nio-48080-exec-6] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 11:16:06.226 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:36.065 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 11:18:36.065 [http-nio-48080-exec-2] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 11:18:36.067 [http-nio-48080-exec-2] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 11:18:36.068 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:37.183 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:37.187 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:38.758 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:38.763 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:40.069 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:40.074 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:40.919 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:40.926 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
}, {
  "id" : 53,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T11:02:52.336644"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:42.680 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:42.685 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:44.614 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:44.621 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:46.325 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:46.335 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:47.319 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:47.323 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:48.550 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:48.559 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
}, {
  "id" : 53,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T11:02:52.336644"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:49.275 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:49.279 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:50.806 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:50.811 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:52.150 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:52.161 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:53.185 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:18:53.191 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
}, {
  "id" : 53,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T11:02:52.336644"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:19:57.578 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:19:57.583 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:19:58.479 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 11:19:58.493 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:35:12.051 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=37
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:35:12.524 [http-nio-48080-exec-6] MemberController - 로그인 시도 - ID: admin1
[INFO ] 2025-04-18 13:35:12.762 [http-nio-48080-exec-6] MemberController - 로그인 성공 - ID: admin1, 이메일: admin1@1234
[INFO ] 2025-04-18 13:35:12.805 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 어드민
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:35:12.991 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:35:13.016 [http-nio-48080-exec-4] MemberController - 받은 id: admin1
[INFO ] 2025-04-18 13:35:13.053 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin1
  ◀ Body     : {
  "id" : "admin1",
  "passwordHash" : "1234",
  "email" : "admin1@1234",
  "name" : "어드민",
  "createdAt" : "2025-04-17T16:08:04.342751",
  "updatedAt" : "2025-04-17T16:08:04.342751"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:35:13.156 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:35:13.160 [http-nio-48080-exec-2] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:35:13.232 [http-nio-48080-exec-2] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 13:35:13.238 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:35:18.562 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:35:18.652 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:35:19.933 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:35:19.938 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:37:29.661 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /admin/members/list
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:37:29.663 [http-nio-48080-exec-10] MemberController - 회원 목록 조회 요청
[INFO ] 2025-04-18 13:37:29.679 [http-nio-48080-exec-10] MemberController - 총 2명의 회원 조회됨
[INFO ] 2025-04-18 13:37:29.682 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /admin/members/list
  ◀ Body     : [ {
  "id" : "testuser",
  "name" : "김규동",
  "email" : "kdkim@iteyes.co.kr"
}, {
  "id" : "admin1",
  "name" : "어드민",
  "email" : "admin1@1234"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:37:50.669 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : POST
  ▶ URI      : /admin/members
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=82
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:37:50.725 [http-nio-48080-exec-3] MemberController - 받은 DTO: MemberCreateReqDto(id=ljun0903, passwordHash=1234, email=ljun0903@1234, name=이승준)
[INFO ] 2025-04-18 13:37:50.726 [http-nio-48080-exec-3] MemberController - 받은 id: 'ljun0903'
[INFO ] 2025-04-18 13:37:50.726 [http-nio-48080-exec-3] MemberController - 받은 passwordHash: '1234'
[INFO ] 2025-04-18 13:37:50.726 [http-nio-48080-exec-3] MemberController - 받은 email: 'ljun0903@1234'
[INFO ] 2025-04-18 13:37:50.726 [http-nio-48080-exec-3] MemberController - 받은 name: '이승준'
[INFO ] 2025-04-18 13:37:50.759 [http-nio-48080-exec-3] MemberController - 신규 회원 등록 완료: ljun0903
[INFO ] 2025-04-18 13:37:50.763 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /admin/members
  ◀ Body     : {
  "id" : "ljun0903",
  "email" : "ljun0903@1234",
  "passwordHash" : "1234",
  "name" : "이승준",
  "createdAt" : "2025-04-18T13:37:50.7415728",
  "updatedAt" : "2025-04-18T13:37:50.7415728"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:38:47.871 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=39
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:38:47.872 [http-nio-48080-exec-7] MemberController - 로그인 시도 - ID: ljun0903
[INFO ] 2025-04-18 13:38:47.874 [http-nio-48080-exec-7] MemberController - 로그인 성공 - ID: ljun0903, 이메일: ljun0903@1234
[INFO ] 2025-04-18 13:38:47.875 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 이승준
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:38:47.883 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /admin/members/ljun0903
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:38:47.884 [http-nio-48080-exec-6] MemberController - 받은 id: ljun0903
[INFO ] 2025-04-18 13:38:47.886 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /admin/members/ljun0903
  ◀ Body     : {
  "id" : "ljun0903",
  "passwordHash" : "1234",
  "email" : "ljun0903@1234",
  "name" : "이승준",
  "createdAt" : "2025-04-18T13:37:50.741573",
  "updatedAt" : "2025-04-18T13:37:50.741573"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:38:47.999 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/ljun0903
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:38:47.999 [http-nio-48080-exec-4] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:38:48.002 [http-nio-48080-exec-4] ChatRoomController - 총 0명의 채팅창 조회됨
[INFO ] 2025-04-18 13:38:48.003 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/ljun0903
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:39:59.088 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/ljun0903
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:39:59.089 [http-nio-48080-exec-5] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:39:59.090 [http-nio-48080-exec-5] ChatRoomController - 총 0명의 채팅창 조회됨
[INFO ] 2025-04-18 13:39:59.091 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/ljun0903
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:40:03.796 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/ljun0903
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:40:03.797 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:40:03.800 [http-nio-48080-exec-1] ChatRoomController - 총 0명의 채팅창 조회됨
[INFO ] 2025-04-18 13:40:03.803 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/ljun0903
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:40:14.256 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=37
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:40:14.256 [http-nio-48080-exec-9] MemberController - 로그인 시도 - ID: admin1
[INFO ] 2025-04-18 13:40:14.258 [http-nio-48080-exec-9] MemberController - 로그인 성공 - ID: admin1, 이메일: admin1@1234
[INFO ] 2025-04-18 13:40:14.258 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 어드민
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:40:14.268 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:40:14.268 [http-nio-48080-exec-10] MemberController - 받은 id: admin1
[INFO ] 2025-04-18 13:40:14.270 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin1
  ◀ Body     : {
  "id" : "admin1",
  "passwordHash" : "1234",
  "email" : "admin1@1234",
  "name" : "어드민",
  "createdAt" : "2025-04-17T16:08:04.342751",
  "updatedAt" : "2025-04-17T16:08:04.342751"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:40:14.293 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:40:14.294 [http-nio-48080-exec-3] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:40:14.296 [http-nio-48080-exec-3] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 13:40:14.297 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:40:19.385 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:40:19.406 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:40.159 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=37
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:47:40.159 [http-nio-48080-exec-2] MemberController - 로그인 시도 - ID: admin1
[INFO ] 2025-04-18 13:47:40.161 [http-nio-48080-exec-2] MemberController - 로그인 성공 - ID: admin1, 이메일: admin1@1234
[INFO ] 2025-04-18 13:47:40.162 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 어드민
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:40.173 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:40.174 [http-nio-48080-exec-8] MemberController - 받은 id: admin1
[INFO ] 2025-04-18 13:47:40.175 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin1
  ◀ Body     : {
  "id" : "admin1",
  "passwordHash" : "1234",
  "email" : "admin1@1234",
  "name" : "어드민",
  "createdAt" : "2025-04-17T16:08:04.342751",
  "updatedAt" : "2025-04-17T16:08:04.342751"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:40.380 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:47:40.381 [http-nio-48080-exec-5] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:47:40.382 [http-nio-48080-exec-5] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 13:47:40.384 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:44.739 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:44.742 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:45.780 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:45.785 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:47.057 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:47.061 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:47.891 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:47:47.895 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
}, {
  "id" : 53,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T11:02:52.336644"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:48:11.807 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:48:11.811 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:48:33.734 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=97
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:48:33.742 [http-nio-48080-exec-6] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=5, msgQuestion=리액트 초기 설정 알려줘, msgList=)
[INFO ] 2025-04-18 13:50:15.842 [http-nio-48080-exec-6] ChatController - AI 응답 수신: **리액트 초기 설정**

리액트 초기 설정은 리액트 응용 프로그램을 시작하고 사용자 인터페이스를 구성하기 위해 필요합니다. 이 과정은 리액트 코드를 로딩하고 초기 상태를 설정합니다.

**1. 리액트 설정 파일 만들기**

- `package.json` 파일에 리액트 설정 정보를 포함합니다.
- `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.

**2. `index.js` 파일 설정**

- `index.js` 파일은 리액트 응용 프로그램의 시작점입니다.
- 이 파일에서 리액트 루프를 설정하고 초기 설정 작업을 수행합니다.

**3. 루프 설정**

- 리액트 루프는 DOM 트리를 업데이트하고 사용자 인터페이스를 관리합니다.
- `ReactDOM.render()` 함수를 사용하여 리액트 컴포넌트를 DOM 트리에 렌더링합니다.

**4. 초기 설정 작업**

- 초기 설정 작업은 사용자 데이터 로딩, 상태 초기화 및 리액트 컴포넌트 초기 설정 등을 포함합니다.

**5. `start` 명령어 설정**

- `package.json` 파일의 `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.
- 이 명령어는 `index.js` 파일을 로딩하고 루프를 시작합니다.

**예: `index.js` 파일**

```javascript
import React from 'react';
import ReactDOM from 'react-dom';

const App = () => {
  // 초기 설정 작업
  return <h1>리액트 응용 프로그램 시작</h1>;
};

ReactDOM.render(<App />, document.getElementById('root'));
```

**리액트 초기 설정 과정의 주요 요소:**

- 리액트 설정 파일 구성
- `index.js` 파일 설정
- 루프 설정
- 초기 설정 작업 설정
- `start` 명령어 설정
[INFO ] 2025-04-18 13:50:15.857 [http-nio-48080-exec-6] ChatController - 사용자 메시지 저장 완료: 55
[INFO ] 2025-04-18 13:50:15.859 [http-nio-48080-exec-6] ChatController - AI 메시지 저장 완료: 56
[INFO ] 2025-04-18 13:50:15.862 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "**리액트 초기 설정**\n\n리액트 초기 설정은 리액트 응용 프로그램을 시작하고 사용자 인터페이스를 구성하기 위해 필요합니다. 이 과정은 리액트 코드를 로딩하고 초기 상태를 설정합니다.\n\n**1. 리액트 설정 파일 만들기**\n\n- `package.json` 파일에 리액트 설정 정보를 포함합니다.\n- `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n\n**2. `index.js` 파일 설정**\n\n- `index.js` 파일은 리액트 응용 프로그램의 시작점입니다.\n- 이 파일에서 리액트 루프를 설정하고 초기 설정 작업을 수행합니다.\n\n**3. 루프 설정**\n\n- 리액트 루프는 DOM 트리를 업데이트하고 사용자 인터페이스를 관리합니다.\n- `ReactDOM.render()` 함수를 사용하여 리액트 컴포넌트를 DOM 트리에 렌더링합니다.\n\n**4. 초기 설정 작업**\n\n- 초기 설정 작업은 사용자 데이터 로딩, 상태 초기화 및 리액트 컴포넌트 초기 설정 등을 포함합니다.\n\n**5. `start` 명령어 설정**\n\n- `package.json` 파일의 `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n- 이 명령어는 `index.js` 파일을 로딩하고 루프를 시작합니다.\n\n**예: `index.js` 파일**\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // 초기 설정 작업\n  return <h1>리액트 응용 프로그램 시작</h1>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n**리액트 초기 설정 과정의 주요 요소:**\n\n- 리액트 설정 파일 구성\n- `index.js` 파일 설정\n- 루프 설정\n- 초기 설정 작업 설정\n- `start` 명령어 설정"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:50:26.458 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:50:26.473 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:56:01.309 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:56:01.313 [http-nio-48080-exec-5] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:56:01.321 [http-nio-48080-exec-5] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 13:56:01.323 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:56:40.973 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:56:40.973 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:56:40.976 [http-nio-48080-exec-1] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 13:56:40.978 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:56:43.857 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:56:43.858 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:56:43.859 [http-nio-48080-exec-9] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 13:56:43.860 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:56:54.427 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=37
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:56:54.429 [http-nio-48080-exec-10] MemberController - 로그인 시도 - ID: admin1
[INFO ] 2025-04-18 13:56:54.432 [http-nio-48080-exec-10] MemberController - 로그인 성공 - ID: admin1, 이메일: admin1@1234
[INFO ] 2025-04-18 13:56:54.434 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 어드민
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:56:54.445 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:56:54.445 [http-nio-48080-exec-3] MemberController - 받은 id: admin1
[INFO ] 2025-04-18 13:56:54.449 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin1
  ◀ Body     : {
  "id" : "admin1",
  "passwordHash" : "1234",
  "email" : "admin1@1234",
  "name" : "어드민",
  "createdAt" : "2025-04-17T16:08:04.342751",
  "updatedAt" : "2025-04-17T16:08:04.342751"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:56:54.466 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:56:54.466 [http-nio-48080-exec-7] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:56:54.467 [http-nio-48080-exec-7] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 13:56:54.468 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:56:58.651 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:56:58.654 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:00.429 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:00.438 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:01.031 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:01.034 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ {
  "id" : 56,
  "message" : "**리액트 초기 설정**\n\n리액트 초기 설정은 리액트 응용 프로그램을 시작하고 사용자 인터페이스를 구성하기 위해 필요합니다. 이 과정은 리액트 코드를 로딩하고 초기 상태를 설정합니다.\n\n**1. 리액트 설정 파일 만들기**\n\n- `package.json` 파일에 리액트 설정 정보를 포함합니다.\n- `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n\n**2. `index.js` 파일 설정**\n\n- `index.js` 파일은 리액트 응용 프로그램의 시작점입니다.\n- 이 파일에서 리액트 루프를 설정하고 초기 설정 작업을 수행합니다.\n\n**3. 루프 설정**\n\n- 리액트 루프는 DOM 트리를 업데이트하고 사용자 인터페이스를 관리합니다.\n- `ReactDOM.render()` 함수를 사용하여 리액트 컴포넌트를 DOM 트리에 렌더링합니다.\n\n**4. 초기 설정 작업**\n\n- 초기 설정 작업은 사용자 데이터 로딩, 상태 초기화 및 리액트 컴포넌트 초기 설정 등을 포함합니다.\n\n**5. `start` 명령어 설정**\n\n- `package.json` 파일의 `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n- 이 명령어는 `index.js` 파일을 로딩하고 루프를 시작합니다.\n\n**예: `index.js` 파일**\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // 초기 설정 작업\n  return <h1>리액트 응용 프로그램 시작</h1>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n**리액트 초기 설정 과정의 주요 요소:**\n\n- 리액트 설정 파일 구성\n- `index.js` 파일 설정\n- 루프 설정\n- 초기 설정 작업 설정\n- `start` 명령어 설정",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T13:50:15.857818"
}, {
  "id" : 55,
  "message" : "리액트 초기 설정 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T13:50:15.846286"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:01.740 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:01.750 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:02.187 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:02.190 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:39.721 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:57:39.722 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:57:39.723 [http-nio-48080-exec-1] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 13:57:39.723 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:42.148 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:57:42.148 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:57:42.149 [http-nio-48080-exec-9] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 13:57:42.150 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:43.481 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:43.484 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:45.476 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:45.479 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:46.423 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:46.425 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:47.151 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:47.155 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ {
  "id" : 56,
  "message" : "**리액트 초기 설정**\n\n리액트 초기 설정은 리액트 응용 프로그램을 시작하고 사용자 인터페이스를 구성하기 위해 필요합니다. 이 과정은 리액트 코드를 로딩하고 초기 상태를 설정합니다.\n\n**1. 리액트 설정 파일 만들기**\n\n- `package.json` 파일에 리액트 설정 정보를 포함합니다.\n- `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n\n**2. `index.js` 파일 설정**\n\n- `index.js` 파일은 리액트 응용 프로그램의 시작점입니다.\n- 이 파일에서 리액트 루프를 설정하고 초기 설정 작업을 수행합니다.\n\n**3. 루프 설정**\n\n- 리액트 루프는 DOM 트리를 업데이트하고 사용자 인터페이스를 관리합니다.\n- `ReactDOM.render()` 함수를 사용하여 리액트 컴포넌트를 DOM 트리에 렌더링합니다.\n\n**4. 초기 설정 작업**\n\n- 초기 설정 작업은 사용자 데이터 로딩, 상태 초기화 및 리액트 컴포넌트 초기 설정 등을 포함합니다.\n\n**5. `start` 명령어 설정**\n\n- `package.json` 파일의 `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n- 이 명령어는 `index.js` 파일을 로딩하고 루프를 시작합니다.\n\n**예: `index.js` 파일**\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // 초기 설정 작업\n  return <h1>리액트 응용 프로그램 시작</h1>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n**리액트 초기 설정 과정의 주요 요소:**\n\n- 리액트 설정 파일 구성\n- `index.js` 파일 설정\n- 루프 설정\n- 초기 설정 작업 설정\n- `start` 명령어 설정",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T13:50:15.857818"
}, {
  "id" : 55,
  "message" : "리액트 초기 설정 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T13:50:15.846286"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:47.626 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:47.629 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
}, {
  "id" : 53,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T11:02:52.336644"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:49.187 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:49.190 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:50.116 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:50.119 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:50.676 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:57:50.678 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:58:57.966 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:58:57.980 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:58:58.015 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:58:58.019 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:58:58.037 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:58:58.059 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:59:18.641 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:59:18.642 [http-nio-48080-exec-4] MemberController - 받은 id: admin1
[INFO ] 2025-04-18 13:59:18.644 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin1
  ◀ Body     : {
  "id" : "admin1",
  "passwordHash" : "1234",
  "email" : "admin1@1234",
  "name" : "어드민",
  "createdAt" : "2025-04-17T16:08:04.342751",
  "updatedAt" : "2025-04-17T16:08:04.342751"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:59:35.698 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:59:35.699 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 13:59:35.701 [http-nio-48080-exec-6] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 13:59:35.702 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 13:59:40.404 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 13:59:40.412 [http-nio-48080-exec-2] ChatRoomController - 채팅창 삭제 요청 - ID: 6
[WARN ] 2025-04-18 13:59:40.421 [http-nio-48080-exec-2] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 13:59:40.421 [http-nio-48080-exec-2] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 13:59:40.425 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/6
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 13:59:40.427 [http-nio-48080-exec-2] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(6 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 14:00:35.502 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:00:35.506 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:01.638 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:08:01.639 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:08:01.641 [http-nio-48080-exec-9] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 14:08:01.642 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:05.068 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:05.079 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:08.169 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:08:08.169 [http-nio-48080-exec-3] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:08:08.171 [http-nio-48080-exec-3] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 14:08:08.171 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 4,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:09.837 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:09.839 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:11.423 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:11.425 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:41.473 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:41.475 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:42.317 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:42.321 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ {
  "id" : 56,
  "message" : "**리액트 초기 설정**\n\n리액트 초기 설정은 리액트 응용 프로그램을 시작하고 사용자 인터페이스를 구성하기 위해 필요합니다. 이 과정은 리액트 코드를 로딩하고 초기 상태를 설정합니다.\n\n**1. 리액트 설정 파일 만들기**\n\n- `package.json` 파일에 리액트 설정 정보를 포함합니다.\n- `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n\n**2. `index.js` 파일 설정**\n\n- `index.js` 파일은 리액트 응용 프로그램의 시작점입니다.\n- 이 파일에서 리액트 루프를 설정하고 초기 설정 작업을 수행합니다.\n\n**3. 루프 설정**\n\n- 리액트 루프는 DOM 트리를 업데이트하고 사용자 인터페이스를 관리합니다.\n- `ReactDOM.render()` 함수를 사용하여 리액트 컴포넌트를 DOM 트리에 렌더링합니다.\n\n**4. 초기 설정 작업**\n\n- 초기 설정 작업은 사용자 데이터 로딩, 상태 초기화 및 리액트 컴포넌트 초기 설정 등을 포함합니다.\n\n**5. `start` 명령어 설정**\n\n- `package.json` 파일의 `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n- 이 명령어는 `index.js` 파일을 로딩하고 루프를 시작합니다.\n\n**예: `index.js` 파일**\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // 초기 설정 작업\n  return <h1>리액트 응용 프로그램 시작</h1>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n**리액트 초기 설정 과정의 주요 요소:**\n\n- 리액트 설정 파일 구성\n- `index.js` 파일 설정\n- 루프 설정\n- 초기 설정 작업 설정\n- `start` 명령어 설정",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T13:50:15.857818"
}, {
  "id" : 55,
  "message" : "리액트 초기 설정 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T13:50:15.846286"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:43.654 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:43.656 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
}, {
  "id" : 53,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T11:02:52.336644"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:45.248 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:45.250 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:47.463 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:08:47.464 [http-nio-48080-exec-1] ChatRoomController - 채팅창 삭제 요청 - ID: 4
[INFO ] 2025-04-18 14:08:47.474 [http-nio-48080-exec-1] ChatRoomController - 채팅창 삭제 완료 - ID: 4
[INFO ] 2025-04-18 14:08:47.475 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/4
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:51.030 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:51.033 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ {
  "id" : 56,
  "message" : "**리액트 초기 설정**\n\n리액트 초기 설정은 리액트 응용 프로그램을 시작하고 사용자 인터페이스를 구성하기 위해 필요합니다. 이 과정은 리액트 코드를 로딩하고 초기 상태를 설정합니다.\n\n**1. 리액트 설정 파일 만들기**\n\n- `package.json` 파일에 리액트 설정 정보를 포함합니다.\n- `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n\n**2. `index.js` 파일 설정**\n\n- `index.js` 파일은 리액트 응용 프로그램의 시작점입니다.\n- 이 파일에서 리액트 루프를 설정하고 초기 설정 작업을 수행합니다.\n\n**3. 루프 설정**\n\n- 리액트 루프는 DOM 트리를 업데이트하고 사용자 인터페이스를 관리합니다.\n- `ReactDOM.render()` 함수를 사용하여 리액트 컴포넌트를 DOM 트리에 렌더링합니다.\n\n**4. 초기 설정 작업**\n\n- 초기 설정 작업은 사용자 데이터 로딩, 상태 초기화 및 리액트 컴포넌트 초기 설정 등을 포함합니다.\n\n**5. `start` 명령어 설정**\n\n- `package.json` 파일의 `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n- 이 명령어는 `index.js` 파일을 로딩하고 루프를 시작합니다.\n\n**예: `index.js` 파일**\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // 초기 설정 작업\n  return <h1>리액트 응용 프로그램 시작</h1>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n**리액트 초기 설정 과정의 주요 요소:**\n\n- 리액트 설정 파일 구성\n- `index.js` 파일 설정\n- 루프 설정\n- 초기 설정 작업 설정\n- `start` 명령어 설정",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T13:50:15.857818"
}, {
  "id" : 55,
  "message" : "리액트 초기 설정 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T13:50:15.846286"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:52.749 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:52.752 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
}, {
  "id" : 53,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T11:02:52.336644"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:53.570 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:53.573 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ {
  "id" : 56,
  "message" : "**리액트 초기 설정**\n\n리액트 초기 설정은 리액트 응용 프로그램을 시작하고 사용자 인터페이스를 구성하기 위해 필요합니다. 이 과정은 리액트 코드를 로딩하고 초기 상태를 설정합니다.\n\n**1. 리액트 설정 파일 만들기**\n\n- `package.json` 파일에 리액트 설정 정보를 포함합니다.\n- `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n\n**2. `index.js` 파일 설정**\n\n- `index.js` 파일은 리액트 응용 프로그램의 시작점입니다.\n- 이 파일에서 리액트 루프를 설정하고 초기 설정 작업을 수행합니다.\n\n**3. 루프 설정**\n\n- 리액트 루프는 DOM 트리를 업데이트하고 사용자 인터페이스를 관리합니다.\n- `ReactDOM.render()` 함수를 사용하여 리액트 컴포넌트를 DOM 트리에 렌더링합니다.\n\n**4. 초기 설정 작업**\n\n- 초기 설정 작업은 사용자 데이터 로딩, 상태 초기화 및 리액트 컴포넌트 초기 설정 등을 포함합니다.\n\n**5. `start` 명령어 설정**\n\n- `package.json` 파일의 `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n- 이 명령어는 `index.js` 파일을 로딩하고 루프를 시작합니다.\n\n**예: `index.js` 파일**\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // 초기 설정 작업\n  return <h1>리액트 응용 프로그램 시작</h1>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n**리액트 초기 설정 과정의 주요 요소:**\n\n- 리액트 설정 파일 구성\n- `index.js` 파일 설정\n- 루프 설정\n- 초기 설정 작업 설정\n- `start` 명령어 설정",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T13:50:15.857818"
}, {
  "id" : 55,
  "message" : "리액트 초기 설정 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T13:50:15.846286"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:55.532 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:55.535 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
}, {
  "id" : 47,
  "message" : "ㅇㅇ",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:26:07.485234"
}, {
  "id" : 46,
  "message" : "ㅇ? What would you like to ask or do? Please provide me with more context so I can understand your request.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:25:59.818264"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:08:57.563 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:08:57.563 [http-nio-48080-exec-4] ChatRoomController - 채팅창 삭제 요청 - ID: 2
[WARN ] 2025-04-18 14:08:57.574 [http-nio-48080-exec-4] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 14:08:57.574 [http-nio-48080-exec-4] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 14:08:57.575 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/2
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 14:08:57.576 [http-nio-48080-exec-4] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 14:09:28.328 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=132
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:09:28.329 [http-nio-48080-exec-6] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=2, msgQuestion=스프링에서 카카오 로그인 연동하고 싶은데 알려줘, msgList=)
[INFO ] 2025-04-18 14:11:31.551 [http-nio-48080-exec-6] ChatController - AI 응답 수신: **스프링에서 카카오 로그인 연동하기**

**1. 카카오 개발자 센터에서 로그인 정보 가져오기**

* 카카오 개발자 센터에 가입하고 카카오 로그인 서비스를 사용하기 위해 계정 정보를 받아옵니다.
* `clientId`와 `clientSecret`를 포함하여 로그인 정보를 가져옵니다.


**2. 스프링 프로젝트 설정**

* `pom.xml` 파일에 카카오 로그인 라이브러리를 추가합니다.
* `WebSecurityConfig` 클래스를 만듭니다.


**3. `WebSecurityConfig` 클래스 설정**

```java
@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(AuthenticationManagerBuilder auth) {
        auth.oauth2Login()
                .permitAll()
                .and()
                .oauth2ClientRegistration()
                        .clientId("YOUR_CLIENT_ID")
                        .clientSecret("YOUR_CLIENT_SECRET")
                        .scope("openid email profile")
                        .accessTokenUri("https://kapi.kakao.com/oauth/token")
                        .userAuthorizationUri("https://kapi.kakao.com/oauth/authorize")
                        .tokenStore(new InMemoryTokenStore());
    }
}
```

* `clientId` 과 `clientSecret`는 카카오 로그인 서비스 설정에서 받아온 정보를 사용합니다.
* `scope`는 사용자가 카카오 계정으로 제공할 수 있는 정보의 범위를 설정합니다.
* `accessTokenUri` 과 `userAuthorizationUri`는 카카오 로그인 API 엔드포인트를 설정합니다.

**4. 로그인 컨트롤러 설정**

* 로그인 컨트롤러에서 `OAuth2LoginController` 클래스를 사용하여 카카오 로그인 연결을 설정합니다.


**5. 사용자 정보 가져오기**

* 카카오 로그인 성공 시 `OAuth2AuthenticationToken` 객체를 사용하여 사용자 정보를 가져옵니다.
* `UserDetails` 객체로 변환하여 시스템에 사용합니다.

**6. 추가 설정**

* 카카오 로그인 정보를 기반하여 사용자 프로필을 업데이트합니다.
* 사용자 관리 기능을 설정하여 카카오 로그인 유저를 관리합니다.
[INFO ] 2025-04-18 14:11:31.577 [http-nio-48080-exec-6] ChatController - 사용자 메시지 저장 완료: 57
[INFO ] 2025-04-18 14:11:31.590 [http-nio-48080-exec-6] ChatController - AI 메시지 저장 완료: 58
[INFO ] 2025-04-18 14:11:31.594 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "**스프링에서 카카오 로그인 연동하기**\n\n**1. 카카오 개발자 센터에서 로그인 정보 가져오기**\n\n* 카카오 개발자 센터에 가입하고 카카오 로그인 서비스를 사용하기 위해 계정 정보를 받아옵니다.\n* `clientId`와 `clientSecret`를 포함하여 로그인 정보를 가져옵니다.\n\n\n**2. 스프링 프로젝트 설정**\n\n* `pom.xml` 파일에 카카오 로그인 라이브러리를 추가합니다.\n* `WebSecurityConfig` 클래스를 만듭니다.\n\n\n**3. `WebSecurityConfig` 클래스 설정**\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) {\n        auth.oauth2Login()\n                .permitAll()\n                .and()\n                .oauth2ClientRegistration()\n                        .clientId(\"YOUR_CLIENT_ID\")\n                        .clientSecret(\"YOUR_CLIENT_SECRET\")\n                        .scope(\"openid email profile\")\n                        .accessTokenUri(\"https://kapi.kakao.com/oauth/token\")\n                        .userAuthorizationUri(\"https://kapi.kakao.com/oauth/authorize\")\n                        .tokenStore(new InMemoryTokenStore());\n    }\n}\n```\n\n* `clientId` 과 `clientSecret`는 카카오 로그인 서비스 설정에서 받아온 정보를 사용합니다.\n* `scope`는 사용자가 카카오 계정으로 제공할 수 있는 정보의 범위를 설정합니다.\n* `accessTokenUri` 과 `userAuthorizationUri`는 카카오 로그인 API 엔드포인트를 설정합니다.\n\n**4. 로그인 컨트롤러 설정**\n\n* 로그인 컨트롤러에서 `OAuth2LoginController` 클래스를 사용하여 카카오 로그인 연결을 설정합니다.\n\n\n**5. 사용자 정보 가져오기**\n\n* 카카오 로그인 성공 시 `OAuth2AuthenticationToken` 객체를 사용하여 사용자 정보를 가져옵니다.\n* `UserDetails` 객체로 변환하여 시스템에 사용합니다.\n\n**6. 추가 설정**\n\n* 카카오 로그인 정보를 기반하여 사용자 프로필을 업데이트합니다.\n* 사용자 관리 기능을 설정하여 카카오 로그인 유저를 관리합니다."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:21:06.666 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:21:06.671 [http-nio-48080-exec-8] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:21:06.697 [http-nio-48080-exec-8] ChatRoomController - 총 4명의 채팅창 조회됨
[INFO ] 2025-04-18 14:21:06.701 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:21:43.080 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:21:43.081 [http-nio-48080-exec-5] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:21:43.083 [http-nio-48080-exec-5] ChatRoomController - 총 4명의 채팅창 조회됨
[INFO ] 2025-04-18 14:21:43.084 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:21:44.176 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:21:44.201 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 58,
  "message" : "**스프링에서 카카오 로그인 연동하기**\n\n**1. 카카오 개발자 센터에서 로그인 정보 가져오기**\n\n* 카카오 개발자 센터에 가입하고 카카오 로그인 서비스를 사용하기 위해 계정 정보를 받아옵니다.\n* `clientId`와 `clientSecret`를 포함하여 로그인 정보를 가져옵니다.\n\n\n**2. 스프링 프로젝트 설정**\n\n* `pom.xml` 파일에 카카오 로그인 라이브러리를 추가합니다.\n* `WebSecurityConfig` 클래스를 만듭니다.\n\n\n**3. `WebSecurityConfig` 클래스 설정**\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) {\n        auth.oauth2Login()\n                .permitAll()\n                .and()\n                .oauth2ClientRegistration()\n                        .clientId(\"YOUR_CLIENT_ID\")\n                        .clientSecret(\"YOUR_CLIENT_SECRET\")\n                        .scope(\"openid email profile\")\n                        .accessTokenUri(\"https://kapi.kakao.com/oauth/token\")\n                        .userAuthorizationUri(\"https://kapi.kakao.com/oauth/authorize\")\n                        .tokenStore(new InMemoryTokenStore());\n    }\n}\n```\n\n* `clientId` 과 `clientSecret`는 카카오 로그인 서비스 설정에서 받아온 정보를 사용합니다.\n* `scope`는 사용자가 카카오 계정으로 제공할 수 있는 정보의 범위를 설정합니다.\n* `accessTokenUri` 과 `userAuthorizationUri`는 카카오 로그인 API 엔드포인트를 설정합니다.\n\n**4. 로그인 컨트롤러 설정**\n\n* 로그인 컨트롤러에서 `OAuth2LoginController` 클래스를 사용하여 카카오 로그인 연결을 설정합니다.\n\n\n**5. 사용자 정보 가져오기**\n\n* 카카오 로그인 성공 시 `OAuth2AuthenticationToken` 객체를 사용하여 사용자 정보를 가져옵니다.\n* `UserDetails` 객체로 변환하여 시스템에 사용합니다.\n\n**6. 추가 설정**\n\n* 카카오 로그인 정보를 기반하여 사용자 프로필을 업데이트합니다.\n* 사용자 관리 기능을 설정하여 카카오 로그인 유저를 관리합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:11:31.588242"
}, {
  "id" : 57,
  "message" : "스프링에서 카카오 로그인 연동하고 싶은데 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:11:31.565901"
}, {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:22:57.421 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:22:57.421 [http-nio-48080-exec-10] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:22:57.423 [http-nio-48080-exec-10] ChatRoomController - 총 4명의 채팅창 조회됨
[INFO ] 2025-04-18 14:22:57.424 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:22:58.465 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:22:58.470 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 58,
  "message" : "**스프링에서 카카오 로그인 연동하기**\n\n**1. 카카오 개발자 센터에서 로그인 정보 가져오기**\n\n* 카카오 개발자 센터에 가입하고 카카오 로그인 서비스를 사용하기 위해 계정 정보를 받아옵니다.\n* `clientId`와 `clientSecret`를 포함하여 로그인 정보를 가져옵니다.\n\n\n**2. 스프링 프로젝트 설정**\n\n* `pom.xml` 파일에 카카오 로그인 라이브러리를 추가합니다.\n* `WebSecurityConfig` 클래스를 만듭니다.\n\n\n**3. `WebSecurityConfig` 클래스 설정**\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) {\n        auth.oauth2Login()\n                .permitAll()\n                .and()\n                .oauth2ClientRegistration()\n                        .clientId(\"YOUR_CLIENT_ID\")\n                        .clientSecret(\"YOUR_CLIENT_SECRET\")\n                        .scope(\"openid email profile\")\n                        .accessTokenUri(\"https://kapi.kakao.com/oauth/token\")\n                        .userAuthorizationUri(\"https://kapi.kakao.com/oauth/authorize\")\n                        .tokenStore(new InMemoryTokenStore());\n    }\n}\n```\n\n* `clientId` 과 `clientSecret`는 카카오 로그인 서비스 설정에서 받아온 정보를 사용합니다.\n* `scope`는 사용자가 카카오 계정으로 제공할 수 있는 정보의 범위를 설정합니다.\n* `accessTokenUri` 과 `userAuthorizationUri`는 카카오 로그인 API 엔드포인트를 설정합니다.\n\n**4. 로그인 컨트롤러 설정**\n\n* 로그인 컨트롤러에서 `OAuth2LoginController` 클래스를 사용하여 카카오 로그인 연결을 설정합니다.\n\n\n**5. 사용자 정보 가져오기**\n\n* 카카오 로그인 성공 시 `OAuth2AuthenticationToken` 객체를 사용하여 사용자 정보를 가져옵니다.\n* `UserDetails` 객체로 변환하여 시스템에 사용합니다.\n\n**6. 추가 설정**\n\n* 카카오 로그인 정보를 기반하여 사용자 프로필을 업데이트합니다.\n* 사용자 관리 기능을 설정하여 카카오 로그인 유저를 관리합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:11:31.588242"
}, {
  "id" : 57,
  "message" : "스프링에서 카카오 로그인 연동하고 싶은데 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:11:31.565901"
}, {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:25:25.220 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:25:25.224 [http-nio-48080-exec-4] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:25:25.225 [http-nio-48080-exec-4] ChatRoomController - 총 4명의 채팅창 조회됨
[INFO ] 2025-04-18 14:25:25.227 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:25:25.969 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:25:25.979 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 58,
  "message" : "**스프링에서 카카오 로그인 연동하기**\n\n**1. 카카오 개발자 센터에서 로그인 정보 가져오기**\n\n* 카카오 개발자 센터에 가입하고 카카오 로그인 서비스를 사용하기 위해 계정 정보를 받아옵니다.\n* `clientId`와 `clientSecret`를 포함하여 로그인 정보를 가져옵니다.\n\n\n**2. 스프링 프로젝트 설정**\n\n* `pom.xml` 파일에 카카오 로그인 라이브러리를 추가합니다.\n* `WebSecurityConfig` 클래스를 만듭니다.\n\n\n**3. `WebSecurityConfig` 클래스 설정**\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) {\n        auth.oauth2Login()\n                .permitAll()\n                .and()\n                .oauth2ClientRegistration()\n                        .clientId(\"YOUR_CLIENT_ID\")\n                        .clientSecret(\"YOUR_CLIENT_SECRET\")\n                        .scope(\"openid email profile\")\n                        .accessTokenUri(\"https://kapi.kakao.com/oauth/token\")\n                        .userAuthorizationUri(\"https://kapi.kakao.com/oauth/authorize\")\n                        .tokenStore(new InMemoryTokenStore());\n    }\n}\n```\n\n* `clientId` 과 `clientSecret`는 카카오 로그인 서비스 설정에서 받아온 정보를 사용합니다.\n* `scope`는 사용자가 카카오 계정으로 제공할 수 있는 정보의 범위를 설정합니다.\n* `accessTokenUri` 과 `userAuthorizationUri`는 카카오 로그인 API 엔드포인트를 설정합니다.\n\n**4. 로그인 컨트롤러 설정**\n\n* 로그인 컨트롤러에서 `OAuth2LoginController` 클래스를 사용하여 카카오 로그인 연결을 설정합니다.\n\n\n**5. 사용자 정보 가져오기**\n\n* 카카오 로그인 성공 시 `OAuth2AuthenticationToken` 객체를 사용하여 사용자 정보를 가져옵니다.\n* `UserDetails` 객체로 변환하여 시스템에 사용합니다.\n\n**6. 추가 설정**\n\n* 카카오 로그인 정보를 기반하여 사용자 프로필을 업데이트합니다.\n* 사용자 관리 기능을 설정하여 카카오 로그인 유저를 관리합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:11:31.588242"
}, {
  "id" : 57,
  "message" : "스프링에서 카카오 로그인 연동하고 싶은데 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:11:31.565901"
}, {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:25:28.064 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:25:28.068 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:25:31.070 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:25:31.074 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ {
  "id" : 56,
  "message" : "**리액트 초기 설정**\n\n리액트 초기 설정은 리액트 응용 프로그램을 시작하고 사용자 인터페이스를 구성하기 위해 필요합니다. 이 과정은 리액트 코드를 로딩하고 초기 상태를 설정합니다.\n\n**1. 리액트 설정 파일 만들기**\n\n- `package.json` 파일에 리액트 설정 정보를 포함합니다.\n- `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n\n**2. `index.js` 파일 설정**\n\n- `index.js` 파일은 리액트 응용 프로그램의 시작점입니다.\n- 이 파일에서 리액트 루프를 설정하고 초기 설정 작업을 수행합니다.\n\n**3. 루프 설정**\n\n- 리액트 루프는 DOM 트리를 업데이트하고 사용자 인터페이스를 관리합니다.\n- `ReactDOM.render()` 함수를 사용하여 리액트 컴포넌트를 DOM 트리에 렌더링합니다.\n\n**4. 초기 설정 작업**\n\n- 초기 설정 작업은 사용자 데이터 로딩, 상태 초기화 및 리액트 컴포넌트 초기 설정 등을 포함합니다.\n\n**5. `start` 명령어 설정**\n\n- `package.json` 파일의 `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n- 이 명령어는 `index.js` 파일을 로딩하고 루프를 시작합니다.\n\n**예: `index.js` 파일**\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // 초기 설정 작업\n  return <h1>리액트 응용 프로그램 시작</h1>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n**리액트 초기 설정 과정의 주요 요소:**\n\n- 리액트 설정 파일 구성\n- `index.js` 파일 설정\n- 루프 설정\n- 초기 설정 작업 설정\n- `start` 명령어 설정",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T13:50:15.857818"
}, {
  "id" : 55,
  "message" : "리액트 초기 설정 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T13:50:15.846286"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:25:35.421 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:25:35.430 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
}, {
  "id" : 53,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T11:02:52.336644"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:25:40.388 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=80
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:25:40.392 [http-nio-48080-exec-1] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=6, msgQuestion=그래 잘하자, msgList=)
[ERROR] 2025-04-18 14:25:40.459 [http-nio-48080-exec-1] AiService - AI 서버 호출 실패
org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://localhost:8000/ask": Connection refused: connect
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:926) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:906) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:801) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:549) ~[spring-web-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.service.AiService.sendMessage(AiService.java:38) ~[main/:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:61) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
Caused by: java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method) ~[?:?]
	at java.base/sun.nio.ch.Net.connect(Net.java:589) ~[?:?]
	at java.base/sun.nio.ch.Net.connect(Net.java:578) ~[?:?]
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583) ~[?:?]
	at java.base/java.net.Socket.connect(Socket.java:751) ~[?:?]
	at java.base/java.net.Socket.connect(Socket.java:686) ~[?:?]
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052) ~[?:?]
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:71) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:81) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:900) ~[spring-web-6.2.5.jar:6.2.5]
	... 70 more
[INFO ] 2025-04-18 14:25:40.508 [http-nio-48080-exec-1] ChatController - AI 응답 수신: AI 응답 실패
[INFO ] 2025-04-18 14:25:40.512 [http-nio-48080-exec-1] ChatController - 사용자 메시지 저장 완료: 59
[INFO ] 2025-04-18 14:25:40.512 [http-nio-48080-exec-1] ChatController - AI 메시지 저장 완료: 60
[INFO ] 2025-04-18 14:25:40.514 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "AI 응답 실패"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:05.744 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:05.752 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:05.769 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:05.777 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:05.831 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:05.834 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:05.844 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:05.854 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:13.638 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:26:13.638 [http-nio-48080-exec-4] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:26:13.640 [http-nio-48080-exec-4] ChatRoomController - 총 4명의 채팅창 조회됨
[INFO ] 2025-04-18 14:26:13.641 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:27.027 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:27.039 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ {
  "id" : 56,
  "message" : "**리액트 초기 설정**\n\n리액트 초기 설정은 리액트 응용 프로그램을 시작하고 사용자 인터페이스를 구성하기 위해 필요합니다. 이 과정은 리액트 코드를 로딩하고 초기 상태를 설정합니다.\n\n**1. 리액트 설정 파일 만들기**\n\n- `package.json` 파일에 리액트 설정 정보를 포함합니다.\n- `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n\n**2. `index.js` 파일 설정**\n\n- `index.js` 파일은 리액트 응용 프로그램의 시작점입니다.\n- 이 파일에서 리액트 루프를 설정하고 초기 설정 작업을 수행합니다.\n\n**3. 루프 설정**\n\n- 리액트 루프는 DOM 트리를 업데이트하고 사용자 인터페이스를 관리합니다.\n- `ReactDOM.render()` 함수를 사용하여 리액트 컴포넌트를 DOM 트리에 렌더링합니다.\n\n**4. 초기 설정 작업**\n\n- 초기 설정 작업은 사용자 데이터 로딩, 상태 초기화 및 리액트 컴포넌트 초기 설정 등을 포함합니다.\n\n**5. `start` 명령어 설정**\n\n- `package.json` 파일의 `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n- 이 명령어는 `index.js` 파일을 로딩하고 루프를 시작합니다.\n\n**예: `index.js` 파일**\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // 초기 설정 작업\n  return <h1>리액트 응용 프로그램 시작</h1>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n**리액트 초기 설정 과정의 주요 요소:**\n\n- 리액트 설정 파일 구성\n- `index.js` 파일 설정\n- 루프 설정\n- 초기 설정 작업 설정\n- `start` 명령어 설정",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T13:50:15.857818"
}, {
  "id" : 55,
  "message" : "리액트 초기 설정 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T13:50:15.846286"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:27.120 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:27.123 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ {
  "id" : 56,
  "message" : "**리액트 초기 설정**\n\n리액트 초기 설정은 리액트 응용 프로그램을 시작하고 사용자 인터페이스를 구성하기 위해 필요합니다. 이 과정은 리액트 코드를 로딩하고 초기 상태를 설정합니다.\n\n**1. 리액트 설정 파일 만들기**\n\n- `package.json` 파일에 리액트 설정 정보를 포함합니다.\n- `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n\n**2. `index.js` 파일 설정**\n\n- `index.js` 파일은 리액트 응용 프로그램의 시작점입니다.\n- 이 파일에서 리액트 루프를 설정하고 초기 설정 작업을 수행합니다.\n\n**3. 루프 설정**\n\n- 리액트 루프는 DOM 트리를 업데이트하고 사용자 인터페이스를 관리합니다.\n- `ReactDOM.render()` 함수를 사용하여 리액트 컴포넌트를 DOM 트리에 렌더링합니다.\n\n**4. 초기 설정 작업**\n\n- 초기 설정 작업은 사용자 데이터 로딩, 상태 초기화 및 리액트 컴포넌트 초기 설정 등을 포함합니다.\n\n**5. `start` 명령어 설정**\n\n- `package.json` 파일의 `scripts` 섹션에서 `start` 명령어를 설정하여 리액트 응용 프로그램을 시작합니다.\n- 이 명령어는 `index.js` 파일을 로딩하고 루프를 시작합니다.\n\n**예: `index.js` 파일**\n\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  // 초기 설정 작업\n  return <h1>리액트 응용 프로그램 시작</h1>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n**리액트 초기 설정 과정의 주요 요소:**\n\n- 리액트 설정 파일 구성\n- `index.js` 파일 설정\n- 루프 설정\n- 초기 설정 작업 설정\n- `start` 명령어 설정",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T13:50:15.857818"
}, {
  "id" : 55,
  "message" : "리액트 초기 설정 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T13:50:15.846286"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:29.042 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=57
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:29.062 [http-nio-48080-exec-8] ChatRoomController - 신규 채팅창 등록 완료: 7
[INFO ] 2025-04-18 14:26:29.064 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 7,
  "member" : {
    "id" : "admin1",
    "email" : "admin1@1234",
    "passwordHash" : "1234",
    "name" : "어드민",
    "createdAt" : "2025-04-17T16:08:04.342751",
    "updatedAt" : "2025-04-17T16:08:04.342751"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:26:29.0569901",
  "updatedAt" : "2025-04-18T14:26:29.0569901"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:35.596 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=70
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:26:35.597 [http-nio-48080-exec-5] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=5, msgQuestion=안녕, msgList=)
[ERROR] 2025-04-18 14:26:35.602 [http-nio-48080-exec-5] AiService - AI 서버 호출 실패
org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://localhost:8000/ask": Connection refused: connect
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:926) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:906) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:801) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:549) ~[spring-web-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.service.AiService.sendMessage(AiService.java:38) ~[main/:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:61) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
Caused by: java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method) ~[?:?]
	at java.base/sun.nio.ch.Net.connect(Net.java:589) ~[?:?]
	at java.base/sun.nio.ch.Net.connect(Net.java:578) ~[?:?]
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583) ~[?:?]
	at java.base/java.net.Socket.connect(Socket.java:751) ~[?:?]
	at java.base/java.net.Socket.connect(Socket.java:686) ~[?:?]
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052) ~[?:?]
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:71) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:81) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:900) ~[spring-web-6.2.5.jar:6.2.5]
	... 70 more
[INFO ] 2025-04-18 14:26:35.605 [http-nio-48080-exec-5] ChatController - AI 응답 수신: AI 응답 실패
[INFO ] 2025-04-18 14:26:35.606 [http-nio-48080-exec-5] ChatController - 사용자 메시지 저장 완료: 61
[INFO ] 2025-04-18 14:26:35.607 [http-nio-48080-exec-5] ChatController - AI 메시지 저장 완료: 62
[INFO ] 2025-04-18 14:26:35.609 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "AI 응답 실패"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:48.577 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=70
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:26:48.578 [http-nio-48080-exec-1] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=5, msgQuestion=안녕, msgList=)
[ERROR] 2025-04-18 14:26:48.588 [http-nio-48080-exec-1] AiService - AI 서버 호출 실패
org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://localhost:8000/ask": Connection refused: connect
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:926) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:906) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:801) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:549) ~[spring-web-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.service.AiService.sendMessage(AiService.java:38) ~[main/:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:61) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
Caused by: java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method) ~[?:?]
	at java.base/sun.nio.ch.Net.connect(Net.java:589) ~[?:?]
	at java.base/sun.nio.ch.Net.connect(Net.java:578) ~[?:?]
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583) ~[?:?]
	at java.base/java.net.Socket.connect(Socket.java:751) ~[?:?]
	at java.base/java.net.Socket.connect(Socket.java:686) ~[?:?]
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052) ~[?:?]
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:71) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:81) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:900) ~[spring-web-6.2.5.jar:6.2.5]
	... 70 more
[INFO ] 2025-04-18 14:26:48.591 [http-nio-48080-exec-1] ChatController - AI 응답 수신: AI 응답 실패
[INFO ] 2025-04-18 14:26:48.592 [http-nio-48080-exec-1] ChatController - 사용자 메시지 저장 완료: 63
[INFO ] 2025-04-18 14:26:48.593 [http-nio-48080-exec-1] ChatController - AI 메시지 저장 완료: 64
[INFO ] 2025-04-18 14:26:48.594 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "AI 응답 실패"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:53.763 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:26:53.764 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:26:53.765 [http-nio-48080-exec-9] ChatRoomController - 총 5명의 채팅창 조회됨
[INFO ] 2025-04-18 14:26:53.767 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
}, {
  "id" : 7,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:55.581 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:55.584 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:56.603 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:56.607 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 60,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:25:40.512269"
}, {
  "id" : 59,
  "message" : "그래 잘하자",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:25:40.510189"
}, {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:57.274 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:57.277 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ {
  "id" : 64,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:26:48.59265"
}, {
  "id" : 63,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:26:48.591628"
}, {
  "id" : 62,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:26:35.606386"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:57.986 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:57.988 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:59.472 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:26:59.484 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:27.530 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=93, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:27:27.531 [http-nio-48080-exec-5] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=7, msgQuestion=안녕, msgList=string)
[ERROR] 2025-04-18 14:27:27.536 [http-nio-48080-exec-5] AiService - AI 서버 호출 실패
org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://localhost:8000/ask": Connection refused: connect
	at org.springframework.web.client.RestTemplate.createResourceAccessException(RestTemplate.java:926) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:906) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:801) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:549) ~[spring-web-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.service.AiService.sendMessage(AiService.java:38) ~[main/:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:61) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
Caused by: java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method) ~[?:?]
	at java.base/sun.nio.ch.Net.connect(Net.java:589) ~[?:?]
	at java.base/sun.nio.ch.Net.connect(Net.java:578) ~[?:?]
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583) ~[?:?]
	at java.base/java.net.Socket.connect(Socket.java:751) ~[?:?]
	at java.base/java.net.Socket.connect(Socket.java:686) ~[?:?]
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386) ~[?:?]
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123) ~[?:?]
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052) ~[?:?]
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:71) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:81) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:900) ~[spring-web-6.2.5.jar:6.2.5]
	... 70 more
[INFO ] 2025-04-18 14:27:27.539 [http-nio-48080-exec-5] ChatController - AI 응답 수신: AI 응답 실패
[INFO ] 2025-04-18 14:27:27.541 [http-nio-48080-exec-5] ChatController - 사용자 메시지 저장 완료: 65
[INFO ] 2025-04-18 14:27:27.541 [http-nio-48080-exec-5] ChatController - AI 메시지 저장 완료: 66
[INFO ] 2025-04-18 14:27:27.542 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "AI 응답 실패"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:36.263 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:36.267 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ {
  "id" : 66,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:27:27.5412"
}, {
  "id" : 65,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:27:27.539199"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:36.501 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:36.503 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 60,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:25:40.512269"
}, {
  "id" : 59,
  "message" : "그래 잘하자",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:25:40.510189"
}, {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:37.738 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:37.741 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ {
  "id" : 66,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:27:27.5412"
}, {
  "id" : 65,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:27:27.539199"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:38.563 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=57
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:38.567 [http-nio-48080-exec-3] ChatRoomController - 신규 채팅창 등록 완료: 8
[INFO ] 2025-04-18 14:27:38.568 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 8,
  "member" : {
    "id" : "admin1",
    "email" : "admin1@1234",
    "passwordHash" : "1234",
    "name" : "어드민",
    "createdAt" : "2025-04-17T16:08:04.342751",
    "updatedAt" : "2025-04-17T16:08:04.342751"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:27:38.5666324",
  "updatedAt" : "2025-04-18T14:27:38.5666324"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:40.428 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/8
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:40.431 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/8
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:41.121 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:41.123 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 58,
  "message" : "**스프링에서 카카오 로그인 연동하기**\n\n**1. 카카오 개발자 센터에서 로그인 정보 가져오기**\n\n* 카카오 개발자 센터에 가입하고 카카오 로그인 서비스를 사용하기 위해 계정 정보를 받아옵니다.\n* `clientId`와 `clientSecret`를 포함하여 로그인 정보를 가져옵니다.\n\n\n**2. 스프링 프로젝트 설정**\n\n* `pom.xml` 파일에 카카오 로그인 라이브러리를 추가합니다.\n* `WebSecurityConfig` 클래스를 만듭니다.\n\n\n**3. `WebSecurityConfig` 클래스 설정**\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) {\n        auth.oauth2Login()\n                .permitAll()\n                .and()\n                .oauth2ClientRegistration()\n                        .clientId(\"YOUR_CLIENT_ID\")\n                        .clientSecret(\"YOUR_CLIENT_SECRET\")\n                        .scope(\"openid email profile\")\n                        .accessTokenUri(\"https://kapi.kakao.com/oauth/token\")\n                        .userAuthorizationUri(\"https://kapi.kakao.com/oauth/authorize\")\n                        .tokenStore(new InMemoryTokenStore());\n    }\n}\n```\n\n* `clientId` 과 `clientSecret`는 카카오 로그인 서비스 설정에서 받아온 정보를 사용합니다.\n* `scope`는 사용자가 카카오 계정으로 제공할 수 있는 정보의 범위를 설정합니다.\n* `accessTokenUri` 과 `userAuthorizationUri`는 카카오 로그인 API 엔드포인트를 설정합니다.\n\n**4. 로그인 컨트롤러 설정**\n\n* 로그인 컨트롤러에서 `OAuth2LoginController` 클래스를 사용하여 카카오 로그인 연결을 설정합니다.\n\n\n**5. 사용자 정보 가져오기**\n\n* 카카오 로그인 성공 시 `OAuth2AuthenticationToken` 객체를 사용하여 사용자 정보를 가져옵니다.\n* `UserDetails` 객체로 변환하여 시스템에 사용합니다.\n\n**6. 추가 설정**\n\n* 카카오 로그인 정보를 기반하여 사용자 프로필을 업데이트합니다.\n* 사용자 관리 기능을 설정하여 카카오 로그인 유저를 관리합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:11:31.588242"
}, {
  "id" : 57,
  "message" : "스프링에서 카카오 로그인 연동하고 싶은데 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:11:31.565901"
}, {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:45.950 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:45.953 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ {
  "id" : 66,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:27:27.5412"
}, {
  "id" : 65,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:27:27.539199"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:46.782 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:46.786 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 60,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:25:40.512269"
}, {
  "id" : 59,
  "message" : "그래 잘하자",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:25:40.510189"
}, {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:47.437 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:47.439 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ {
  "id" : 66,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:27:27.5412"
}, {
  "id" : 65,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:27:27.539199"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:48.613 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:27:48.613 [http-nio-48080-exec-5] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:27:48.615 [http-nio-48080-exec-5] ChatRoomController - 총 6명의 채팅창 조회됨
[INFO ] 2025-04-18 14:27:48.615 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
}, {
  "id" : 7,
  "title" : "New chat"
}, {
  "id" : 8,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:49.279 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/8
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:49.281 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/8
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:49.945 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:49.949 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ {
  "id" : 66,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:27:27.5412"
}, {
  "id" : 65,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:27:27.539199"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:52.063 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:27:52.064 [http-nio-48080-exec-10] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:27:52.065 [http-nio-48080-exec-10] ChatRoomController - 총 6명의 채팅창 조회됨
[INFO ] 2025-04-18 14:27:52.066 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ {
  "id" : 2,
  "title" : "채팅1"
}, {
  "id" : 3,
  "title" : "New chat"
}, {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
}, {
  "id" : 7,
  "title" : "New chat"
}, {
  "id" : 8,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:52.594 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:52.597 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ {
  "id" : 66,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:27:27.5412"
}, {
  "id" : 65,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:27:27.539199"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:53.917 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:53.920 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 60,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:25:40.512269"
}, {
  "id" : 59,
  "message" : "그래 잘하자",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:25:40.510189"
}, {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:55.305 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:55.309 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ {
  "id" : 64,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:26:48.59265"
}, {
  "id" : 63,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:26:48.591628"
}, {
  "id" : 62,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:26:35.606386"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:55.890 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:55.892 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:57.433 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:57.437 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 58,
  "message" : "**스프링에서 카카오 로그인 연동하기**\n\n**1. 카카오 개발자 센터에서 로그인 정보 가져오기**\n\n* 카카오 개발자 센터에 가입하고 카카오 로그인 서비스를 사용하기 위해 계정 정보를 받아옵니다.\n* `clientId`와 `clientSecret`를 포함하여 로그인 정보를 가져옵니다.\n\n\n**2. 스프링 프로젝트 설정**\n\n* `pom.xml` 파일에 카카오 로그인 라이브러리를 추가합니다.\n* `WebSecurityConfig` 클래스를 만듭니다.\n\n\n**3. `WebSecurityConfig` 클래스 설정**\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) {\n        auth.oauth2Login()\n                .permitAll()\n                .and()\n                .oauth2ClientRegistration()\n                        .clientId(\"YOUR_CLIENT_ID\")\n                        .clientSecret(\"YOUR_CLIENT_SECRET\")\n                        .scope(\"openid email profile\")\n                        .accessTokenUri(\"https://kapi.kakao.com/oauth/token\")\n                        .userAuthorizationUri(\"https://kapi.kakao.com/oauth/authorize\")\n                        .tokenStore(new InMemoryTokenStore());\n    }\n}\n```\n\n* `clientId` 과 `clientSecret`는 카카오 로그인 서비스 설정에서 받아온 정보를 사용합니다.\n* `scope`는 사용자가 카카오 계정으로 제공할 수 있는 정보의 범위를 설정합니다.\n* `accessTokenUri` 과 `userAuthorizationUri`는 카카오 로그인 API 엔드포인트를 설정합니다.\n\n**4. 로그인 컨트롤러 설정**\n\n* 로그인 컨트롤러에서 `OAuth2LoginController` 클래스를 사용하여 카카오 로그인 연결을 설정합니다.\n\n\n**5. 사용자 정보 가져오기**\n\n* 카카오 로그인 성공 시 `OAuth2AuthenticationToken` 객체를 사용하여 사용자 정보를 가져옵니다.\n* `UserDetails` 객체로 변환하여 시스템에 사용합니다.\n\n**6. 추가 설정**\n\n* 카카오 로그인 정보를 기반하여 사용자 프로필을 업데이트합니다.\n* 사용자 관리 기능을 설정하여 카카오 로그인 유저를 관리합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:11:31.588242"
}, {
  "id" : 57,
  "message" : "스프링에서 카카오 로그인 연동하고 싶은데 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:11:31.565901"
}, {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:58.140 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:58.143 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ {
  "id" : 60,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:25:40.512269"
}, {
  "id" : 59,
  "message" : "그래 잘하자",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:25:40.510189"
}, {
  "id" : 54,
  "message" : "안녕하세요! 저는 모델입니다. 도와드리거나 질문에 답변해 드리도록 하겠습니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T11:02:52.34173"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:59.411 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:27:59.414 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ {
  "id" : 66,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:27:27.5412"
}, {
  "id" : 65,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:27:27.539199"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:28:01.583 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:28:01.583 [http-nio-48080-exec-1] ChatRoomController - 채팅창 삭제 요청 - ID: 7
[WARN ] 2025-04-18 14:28:01.588 [http-nio-48080-exec-1] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 14:28:01.588 [http-nio-48080-exec-1] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(7 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 14:28:01.593 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/7
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 14:28:01.596 [http-nio-48080-exec-1] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(7 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(7 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(7 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 14:31:11.265 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:31:11.272 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 58,
  "message" : "**스프링에서 카카오 로그인 연동하기**\n\n**1. 카카오 개발자 센터에서 로그인 정보 가져오기**\n\n* 카카오 개발자 센터에 가입하고 카카오 로그인 서비스를 사용하기 위해 계정 정보를 받아옵니다.\n* `clientId`와 `clientSecret`를 포함하여 로그인 정보를 가져옵니다.\n\n\n**2. 스프링 프로젝트 설정**\n\n* `pom.xml` 파일에 카카오 로그인 라이브러리를 추가합니다.\n* `WebSecurityConfig` 클래스를 만듭니다.\n\n\n**3. `WebSecurityConfig` 클래스 설정**\n\n```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) {\n        auth.oauth2Login()\n                .permitAll()\n                .and()\n                .oauth2ClientRegistration()\n                        .clientId(\"YOUR_CLIENT_ID\")\n                        .clientSecret(\"YOUR_CLIENT_SECRET\")\n                        .scope(\"openid email profile\")\n                        .accessTokenUri(\"https://kapi.kakao.com/oauth/token\")\n                        .userAuthorizationUri(\"https://kapi.kakao.com/oauth/authorize\")\n                        .tokenStore(new InMemoryTokenStore());\n    }\n}\n```\n\n* `clientId` 과 `clientSecret`는 카카오 로그인 서비스 설정에서 받아온 정보를 사용합니다.\n* `scope`는 사용자가 카카오 계정으로 제공할 수 있는 정보의 범위를 설정합니다.\n* `accessTokenUri` 과 `userAuthorizationUri`는 카카오 로그인 API 엔드포인트를 설정합니다.\n\n**4. 로그인 컨트롤러 설정**\n\n* 로그인 컨트롤러에서 `OAuth2LoginController` 클래스를 사용하여 카카오 로그인 연결을 설정합니다.\n\n\n**5. 사용자 정보 가져오기**\n\n* 카카오 로그인 성공 시 `OAuth2AuthenticationToken` 객체를 사용하여 사용자 정보를 가져옵니다.\n* `UserDetails` 객체로 변환하여 시스템에 사용합니다.\n\n**6. 추가 설정**\n\n* 카카오 로그인 정보를 기반하여 사용자 프로필을 업데이트합니다.\n* 사용자 관리 기능을 설정하여 카카오 로그인 유저를 관리합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T14:11:31.588242"
}, {
  "id" : 57,
  "message" : "스프링에서 카카오 로그인 연동하고 싶은데 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T14:11:31.565901"
}, {
  "id" : 48,
  "message" : "**Turn start!** \n\nI am ready to receive your command. Please let me know what you would like me to do.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:26:07.487235"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:31:12.469 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:31:12.473 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 52,
  "message" : "**next.js에서 카카오 로그인 기능 만들기**\n\n**1. 카카오 개발 플랫폼 생성**\n\n* 카카오 개발 플랫폼 등록하고 API 키를 받음\n* 사용자 모델 설정 및 카카오 로그인 API 설정\n\n**2. next.js 프로젝트 설정**\n\n* next.js 프로젝트 생성\n* `package.json` 파일에 카카오 개발 플랫폼의 API 키를 설정\n\n**3. 로그인 페이지 만들기**\n\n* `pages/login.js` 페이지 만들고 로그인 버튼을 추가\n* `onClick` 이벤트를 사용하여 카카오 로그인 API를 호출\n\n**4. 로그인 결과 처리**\n\n* 카카오 로그인 API에서 사용자 정보를 받음\n* 사용자 정보를 데이터베이스에 저장\n* 사용자를 메인 페이지로 이동\n\n**5. 코드 예시**\n\n```javascript\nimport { useSession } from 'next-auth/react'\nimport { loginKakao } from '../utils/kakaoLogin'\n\nconst LoginPage = () => {\n  const { session } = useSession()\n\n  const handleLogin = async () => {\n    await loginKakao()\n  }\n\n  return (\n    <div>\n      <button onClick={handleLogin}>카카오 로그인</button>\n    </div>\n  )\n}\n\nexport default LoginPage\n```\n\n**`utils/kakaoLogin.js` 파일**\n\n```javascript\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport const loginKakao = async (req: NextApiRequest, res: NextApiResponse) => {\n  // 카카오 로그인 API 호출\n  // ...\n\n  // 사용자 정보 반환\n  res.status(200).json({\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n  })\n}\n```\n\n**참고 자료:**\n\n* NextAuth.js: https://next-auth.js.org/\n* 카카오 개발 플랫폼: https://developers.kakao.com/\n\n**주의:**\n\n* 카카오 로그인 API는 비공개입니다. 비공개 API를 사용하기 위해서는 카카오 개발 플랫폼의 허락을 받아야 합니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:31:19.933125"
}, {
  "id" : 51,
  "message" : "next.js에서 카카오 로그인 기능 만들고 싶어",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T10:31:19.931113"
}, {
  "id" : 50,
  "message" : "안녕하세요! 오늘은 무슨 일이 있나요?",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T10:29:01.465475"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:34:15.044 [SpringApplicationShutdownHook] GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
[INFO ] 2025-04-18 14:34:15.070 [tomcat-shutdown] GracefulShutdown - Graceful shutdown complete
[INFO ] 2025-04-18 14:34:15.088 [SpringApplicationShutdownHook] LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
[WARN ] 2025-04-18 14:34:15.100 [SpringApplicationShutdownHook] DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-232]
[INFO ] 2025-04-18 14:34:15.100 [SpringApplicationShutdownHook] HikariDataSource - HikariPool - Shutdown initiated...
[INFO ] 2025-04-18 14:34:15.102 [SpringApplicationShutdownHook] HikariDataSource - HikariPool - Shutdown completed.
[INFO ] 2025-04-18 14:34:31.866 [background-preinit] Version - HV000001: Hibernate Validator 8.0.2.Final
[INFO ] 2025-04-18 14:34:31.926 [restartedMain] GenaicodeboosterApplication - Starting GenaicodeboosterApplication v0.0.1-SNAPSHOT using Java 21.0.1 with PID 28192 (C:\iteyes-projects\genaicodebooster\genaicodebooster\build\classes\java\main started by lenovo in C:\iteyes-projects\genaicodebooster\genaicodebooster)
[DEBUG] 2025-04-18 14:34:31.930 [restartedMain] GenaicodeboosterApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
[INFO ] 2025-04-18 14:34:31.932 [restartedMain] GenaicodeboosterApplication - The following 1 profile is active: "local"
[INFO ] 2025-04-18 14:34:31.974 [restartedMain] DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
[INFO ] 2025-04-18 14:34:31.975 [restartedMain] DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
[INFO ] 2025-04-18 14:34:33.168 [restartedMain] RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
[INFO ] 2025-04-18 14:34:33.233 [restartedMain] RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 57 ms. Found 3 JPA repository interfaces.
[INFO ] 2025-04-18 14:34:34.016 [restartedMain] TomcatWebServer - Tomcat initialized with port 48080 (http)
[INFO ] 2025-04-18 14:34:34.032 [restartedMain] Http11NioProtocol - Initializing ProtocolHandler ["http-nio-48080"]
[INFO ] 2025-04-18 14:34:34.034 [restartedMain] StandardService - Starting service [Tomcat]
[INFO ] 2025-04-18 14:34:34.034 [restartedMain] StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
[INFO ] 2025-04-18 14:34:34.084 [restartedMain] [/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2025-04-18 14:34:34.084 [restartedMain] ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2109 ms
[DEBUG] 2025-04-18 14:34:34.238 [restartedMain] RequestCachingFilter - Filter 'requestCachingFilter' configured for use
[INFO ] 2025-04-18 14:34:34.375 [restartedMain] LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
[INFO ] 2025-04-18 14:34:34.446 [restartedMain] Version - HHH000412: Hibernate ORM core version 6.6.11.Final
[INFO ] 2025-04-18 14:34:34.487 [restartedMain] RegionFactoryInitiator - HHH000026: Second-level cache disabled
[INFO ] 2025-04-18 14:34:34.785 [restartedMain] SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
[INFO ] 2025-04-18 14:34:34.820 [restartedMain] HikariDataSource - HikariPool - Starting...
[INFO ] 2025-04-18 14:34:35.030 [restartedMain] HikariPool - HikariPool - Added connection conn0: url=jdbc:h2:mem:genaicbtest user=TEST
[INFO ] 2025-04-18 14:34:35.031 [restartedMain] HikariDataSource - HikariPool - Start completed.
[WARN ] 2025-04-18 14:34:35.061 [restartedMain] deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
[INFO ] 2025-04-18 14:34:35.082 [restartedMain] pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool)']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
[INFO ] 2025-04-18 14:34:35.968 [restartedMain] JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
[INFO ] 2025-04-18 14:34:36.047 [restartedMain] LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
[DEBUG] 2025-04-18 14:34:36.474 [restartedMain] RestTemplateConfig - RestTemplate configured with connect timeout: 5000ms and read timeout: 5000ms
[WARN ] 2025-04-18 14:34:36.674 [restartedMain] JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
[INFO ] 2025-04-18 14:34:37.566 [restartedMain] H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:genaicbtest'
[INFO ] 2025-04-18 14:34:37.649 [restartedMain] OptionalLiveReloadServer - LiveReload server is running on port 35729
[INFO ] 2025-04-18 14:34:37.661 [restartedMain] EndpointLinksResolver - Exposing 2 endpoints beneath base path '/healthcheck'
[INFO ] 2025-04-18 14:34:37.736 [restartedMain] Http11NioProtocol - Starting ProtocolHandler ["http-nio-48080"]
[INFO ] 2025-04-18 14:34:37.758 [restartedMain] TomcatWebServer - Tomcat started on port 48080 (http) with context path '/'
[INFO ] 2025-04-18 14:34:37.772 [restartedMain] GenaicodeboosterApplication - Started GenaicodeboosterApplication in 6.287 seconds (process running for 8.001)
[INFO ] 2025-04-18 14:34:38.108 [RMI TCP Connection(1)-172.24.80.1] [/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[INFO ] 2025-04-18 14:34:38.109 [RMI TCP Connection(1)-172.24.80.1] DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[INFO ] 2025-04-18 14:34:38.110 [RMI TCP Connection(1)-172.24.80.1] DispatcherServlet - Completed initialization in 1 ms
[INFO ] 2025-04-18 14:34:52.878 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=93, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:34:52.942 [http-nio-48080-exec-1] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=7, msgQuestion=안녕, msgList=string)
[ERROR] 2025-04-18 14:34:52.995 [http-nio-48080-exec-1] ChatController - 채팅 생성 중 오류 발생
java.lang.IllegalArgumentException: 존재하지 않는 채팅방입니다.
	at io.iteyes.genaicodebooster.api.controller.ChatController.lambda$createChat$0(ChatController.java:57) ~[main/:?]
	at java.base/java.util.Optional.orElseThrow(Optional.java:403) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:57) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 14:34:53.018 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 500
  ◀ URI      : /api/chat
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:09.769 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=87, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:35:09.770 [http-nio-48080-exec-2] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=7, msgQuestion=안녕, msgList=)
[ERROR] 2025-04-18 14:35:09.772 [http-nio-48080-exec-2] ChatController - 채팅 생성 중 오류 발생
java.lang.IllegalArgumentException: 존재하지 않는 채팅방입니다.
	at io.iteyes.genaicodebooster.api.controller.ChatController.lambda$createChat$0(ChatController.java:57) ~[main/:?]
	at java.base/java.util.Optional.orElseThrow(Optional.java:403) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:57) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 14:35:09.775 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 500
  ◀ URI      : /api/chat
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:21.294 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=87, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:35:21.294 [http-nio-48080-exec-3] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=7, msgQuestion=안녕, msgList=)
[ERROR] 2025-04-18 14:35:21.295 [http-nio-48080-exec-3] ChatController - 채팅 생성 중 오류 발생
java.lang.IllegalArgumentException: 존재하지 않는 채팅방입니다.
	at io.iteyes.genaicodebooster.api.controller.ChatController.lambda$createChat$0(ChatController.java:57) ~[main/:?]
	at java.base/java.util.Optional.orElseThrow(Optional.java:403) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:57) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 14:35:21.297 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 500
  ◀ URI      : /api/chat
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:39.333 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=87, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:35:39.334 [http-nio-48080-exec-4] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=7, msgQuestion=안녕, msgList=)
[ERROR] 2025-04-18 14:35:39.335 [http-nio-48080-exec-4] ChatController - 채팅 생성 중 오류 발생
java.lang.IllegalArgumentException: 존재하지 않는 채팅방입니다.
	at io.iteyes.genaicodebooster.api.controller.ChatController.lambda$createChat$0(ChatController.java:57) ~[main/:?]
	at java.base/java.util.Optional.orElseThrow(Optional.java:403) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:57) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 14:35:39.338 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 500
  ◀ URI      : /api/chat
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:47.696 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:47.706 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:47.727 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:47.742 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:47.791 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:47.797 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:47.811 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:35:48.013 [http-nio-48080-exec-9] AbstractOpenApiResource - Init duration for springdoc-openapi is: 197 ms
[INFO ] 2025-04-18 14:35:48.035 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:36:05.062 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=87, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:36:05.063 [http-nio-48080-exec-10] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin1, chatRoomId=7, msgQuestion=안녕, msgList=)
[ERROR] 2025-04-18 14:36:05.064 [http-nio-48080-exec-10] ChatController - 채팅 생성 중 오류 발생
java.lang.IllegalArgumentException: 존재하지 않는 채팅방입니다.
	at io.iteyes.genaicodebooster.api.controller.ChatController.lambda$createChat$0(ChatController.java:57) ~[main/:?]
	at java.base/java.util.Optional.orElseThrow(Optional.java:403) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:57) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 14:36:05.066 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 500
  ◀ URI      : /api/chat
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:32.527 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:37:32.528 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:37:32.612 [http-nio-48080-exec-1] ChatRoomController - 총 0명의 채팅창 조회됨
[INFO ] 2025-04-18 14:37:32.614 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:40.962 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:40.963 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:40.979 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:40.981 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:41.020 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:41.023 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:41.032 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:41.043 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:47.435 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:37:47.435 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:37:47.437 [http-nio-48080-exec-6] ChatRoomController - 총 0명의 채팅창 조회됨
[INFO ] 2025-04-18 14:37:47.439 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin1
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:37:59.969 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /admin/members/list
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:37:59.970 [http-nio-48080-exec-7] MemberController - 회원 목록 조회 요청
[INFO ] 2025-04-18 14:37:59.973 [http-nio-48080-exec-7] MemberController - 총 0명의 회원 조회됨
[INFO ] 2025-04-18 14:37:59.974 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /admin/members/list
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:38:30.163 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : POST
  ▶ URI      : /admin/members
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=93, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:38:30.198 [http-nio-48080-exec-9] MemberController - 받은 DTO: MemberCreateReqDto(id=admin, passwordHash=1234, email=admin@1234, name=관리자)
[INFO ] 2025-04-18 14:38:30.199 [http-nio-48080-exec-9] MemberController - 받은 id: 'admin'
[INFO ] 2025-04-18 14:38:30.199 [http-nio-48080-exec-9] MemberController - 받은 passwordHash: '1234'
[INFO ] 2025-04-18 14:38:30.199 [http-nio-48080-exec-9] MemberController - 받은 email: 'admin@1234'
[INFO ] 2025-04-18 14:38:30.199 [http-nio-48080-exec-9] MemberController - 받은 name: '관리자'
[INFO ] 2025-04-18 14:38:30.529 [http-nio-48080-exec-9] MemberController - 신규 회원 등록 완료: admin
[INFO ] 2025-04-18 14:38:30.533 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /admin/members
  ◀ Body     : {
  "id" : "admin",
  "email" : "admin@1234",
  "passwordHash" : "1234",
  "name" : "관리자",
  "createdAt" : "2025-04-18T14:38:30.4853147",
  "updatedAt" : "2025-04-18T14:38:30.4853147"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:38:37.312 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=36
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:38:37.315 [http-nio-48080-exec-10] MemberController - 로그인 시도 - ID: admin
[INFO ] 2025-04-18 14:38:37.319 [http-nio-48080-exec-10] MemberController - 로그인 성공 - ID: admin, 이메일: admin@1234
[INFO ] 2025-04-18 14:38:37.320 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 관리자
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:38:37.331 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:38:37.331 [http-nio-48080-exec-8] MemberController - 받은 id: admin
[INFO ] 2025-04-18 14:38:37.335 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin
  ◀ Body     : {
  "id" : "admin",
  "passwordHash" : "1234",
  "email" : "admin@1234",
  "name" : "관리자",
  "createdAt" : "2025-04-18T14:38:30.485315",
  "updatedAt" : "2025-04-18T14:38:30.485315"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:38:37.353 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:38:37.353 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:38:37.356 [http-nio-48080-exec-1] ChatRoomController - 총 0명의 채팅창 조회됨
[INFO ] 2025-04-18 14:38:37.357 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:38:41.720 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:38:41.747 [http-nio-48080-exec-3] ChatRoomController - 신규 채팅창 등록 완료: 1
[INFO ] 2025-04-18 14:38:41.750 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 1,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:38:41.7274694",
  "updatedAt" : "2025-04-18T14:38:41.7274694"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:38:44.379 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:38:44.417 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:39:01.923 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=69
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:39:01.925 [http-nio-48080-exec-5] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=1, msgQuestion=안녕, msgList=)
[INFO ] 2025-04-18 14:39:02.116 [http-nio-48080-exec-5] ChatController - AI 응답 수신: null
[WARN ] 2025-04-18 14:39:02.116 [http-nio-48080-exec-5] ChatController - AI 응답 없음 → 저장 생략
[INFO ] 2025-04-18 14:39:02.122 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 204
  ◀ URI      : /api/chat
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:39:19.727 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:39:19.728 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:39:19.730 [http-nio-48080-exec-6] ChatRoomController - 총 1명의 채팅창 조회됨
[INFO ] 2025-04-18 14:39:19.732 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:39:29.946 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:39:29.946 [http-nio-48080-exec-7] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:39:29.948 [http-nio-48080-exec-7] ChatRoomController - 총 1명의 채팅창 조회됨
[INFO ] 2025-04-18 14:39:29.950 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:39:30.403 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:39:30.409 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:39:56.606 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=86, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:39:56.608 [http-nio-48080-exec-8] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=1, msgQuestion=안녕, msgList=)
[INFO ] 2025-04-18 14:39:56.635 [http-nio-48080-exec-8] ChatController - AI 응답 수신: null
[WARN ] 2025-04-18 14:39:56.635 [http-nio-48080-exec-8] ChatController - AI 응답 없음 → 저장 생략
[INFO ] 2025-04-18 14:39:56.636 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 204
  ◀ URI      : /api/chat
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:40:20.451 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:40:20.451 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:40:20.454 [http-nio-48080-exec-1] ChatRoomController - 총 1명의 채팅창 조회됨
[INFO ] 2025-04-18 14:40:20.455 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:40:21.139 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:40:21.142 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:40:48.174 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:40:48.174 [http-nio-48080-exec-3] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:40:48.179 [http-nio-48080-exec-3] ChatRoomController - 총 1명의 채팅창 조회됨
[INFO ] 2025-04-18 14:40:48.182 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:40:51.137 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:40:51.137 [http-nio-48080-exec-4] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:40:51.139 [http-nio-48080-exec-4] ChatRoomController - 총 1명의 채팅창 조회됨
[INFO ] 2025-04-18 14:40:51.141 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:41:02.904 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:41:02.904 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:41:02.906 [http-nio-48080-exec-6] ChatRoomController - 총 1명의 채팅창 조회됨
[INFO ] 2025-04-18 14:41:02.907 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:41:05.331 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:41:05.331 [http-nio-48080-exec-7] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:41:05.334 [http-nio-48080-exec-7] ChatRoomController - 총 1명의 채팅창 조회됨
[INFO ] 2025-04-18 14:41:05.335 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:41:06.489 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:41:06.493 [http-nio-48080-exec-9] ChatRoomController - 신규 채팅창 등록 완료: 2
[INFO ] 2025-04-18 14:41:06.494 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 2,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:41:06.4920435",
  "updatedAt" : "2025-04-18T14:41:06.4920435"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:41:07.607 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:41:07.611 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:41:08.312 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:41:08.316 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:41:08.838 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:41:08.842 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:30.097 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:42:30.099 [http-nio-48080-exec-3] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:42:30.101 [http-nio-48080-exec-3] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 14:42:30.103 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:37.444 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:37.448 [http-nio-48080-exec-4] ChatRoomController - 신규 채팅창 등록 완료: 3
[INFO ] 2025-04-18 14:42:37.450 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 3,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:42:37.4475411",
  "updatedAt" : "2025-04-18T14:42:37.4475411"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:37.507 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:37.512 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:51.957 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:42:51.958 [http-nio-48080-exec-6] ChatRoomController - 채팅창 삭제 요청 - ID: 1
[INFO ] 2025-04-18 14:42:51.995 [http-nio-48080-exec-6] ChatRoomController - 채팅창 삭제 완료 - ID: 1
[INFO ] 2025-04-18 14:42:51.996 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/1
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:54.168 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:42:54.169 [http-nio-48080-exec-7] ChatRoomController - 채팅창 삭제 요청 - ID: 2
[INFO ] 2025-04-18 14:42:54.174 [http-nio-48080-exec-7] ChatRoomController - 채팅창 삭제 완료 - ID: 2
[INFO ] 2025-04-18 14:42:54.174 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/2
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:55.674 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:42:55.675 [http-nio-48080-exec-9] ChatRoomController - 채팅창 삭제 요청 - ID: 3
[INFO ] 2025-04-18 14:42:55.678 [http-nio-48080-exec-9] ChatRoomController - 채팅창 삭제 완료 - ID: 3
[INFO ] 2025-04-18 14:42:55.678 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/3
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:57.034 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:57.036 [http-nio-48080-exec-10] ChatRoomController - 신규 채팅창 등록 완료: 4
[INFO ] 2025-04-18 14:42:57.039 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 4,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:42:57.0362854",
  "updatedAt" : "2025-04-18T14:42:57.0362854"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:57.064 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:57.068 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/4
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:58.417 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:58.421 [http-nio-48080-exec-1] ChatRoomController - 신규 채팅창 등록 완료: 5
[INFO ] 2025-04-18 14:42:58.422 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 5,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:42:58.4203233",
  "updatedAt" : "2025-04-18T14:42:58.4203233"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:58.441 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:42:58.444 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:43:01.302 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/4
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:43:01.302 [http-nio-48080-exec-3] ChatRoomController - 채팅창 삭제 요청 - ID: 4
[INFO ] 2025-04-18 14:43:01.305 [http-nio-48080-exec-3] ChatRoomController - 채팅창 삭제 완료 - ID: 4
[INFO ] 2025-04-18 14:43:01.306 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/4
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:43:03.925 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:43:03.935 [http-nio-48080-exec-4] ChatRoomController - 신규 채팅창 등록 완료: 6
[INFO ] 2025-04-18 14:43:03.937 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 6,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:43:03.9343906",
  "updatedAt" : "2025-04-18T14:43:03.9343906"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:43:03.959 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:43:03.962 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:46:10.332 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:46:10.337 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:46:11.276 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:46:11.279 [http-nio-48080-exec-9] ChatRoomController - 신규 채팅창 등록 완료: 7
[INFO ] 2025-04-18 14:46:11.280 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 7,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:46:11.2788198",
  "updatedAt" : "2025-04-18T14:46:11.2788198"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:46:11.294 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:46:11.299 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:47:24.589 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:47:24.590 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:47:24.593 [http-nio-48080-exec-1] ChatRoomController - 총 3명의 채팅창 조회됨
[INFO ] 2025-04-18 14:47:24.595 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
}, {
  "id" : 7,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:47:25.319 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:47:25.323 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:47:26.533 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:47:26.537 [http-nio-48080-exec-3] ChatRoomController - 신규 채팅창 등록 완료: 8
[INFO ] 2025-04-18 14:47:26.538 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 8,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:47:26.536332",
  "updatedAt" : "2025-04-18T14:47:26.536332"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:47:26.551 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/8
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:47:26.555 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/8
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:31.759 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:50:31.760 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:50:31.763 [http-nio-48080-exec-6] ChatRoomController - 총 4명의 채팅창 조회됨
[INFO ] 2025-04-18 14:50:31.764 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
}, {
  "id" : 7,
  "title" : "New chat"
}, {
  "id" : 8,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:53.963 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:50:53.963 [http-nio-48080-exec-7] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 14:50:53.965 [http-nio-48080-exec-7] ChatRoomController - 총 4명의 채팅창 조회됨
[INFO ] 2025-04-18 14:50:53.966 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 5,
  "title" : "New chat"
}, {
  "id" : 6,
  "title" : "New chat"
}, {
  "id" : 7,
  "title" : "New chat"
}, {
  "id" : 8,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:54.814 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/8
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:54.818 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/8
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:55.331 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:55.338 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:55.859 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:55.864 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/6
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:56.681 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:56.686 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:57.648 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:57.651 [http-nio-48080-exec-2] ChatRoomController - 신규 채팅창 등록 완료: 9
[INFO ] 2025-04-18 14:50:57.652 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 9,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:50:57.6501544",
  "updatedAt" : "2025-04-18T14:50:57.6501544"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:57.663 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/9
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:50:57.668 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/9
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:01.776 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/8
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:01.780 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/8
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:07.578 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:07.582 [http-nio-48080-exec-5] ChatRoomController - 신규 채팅창 등록 완료: 10
[INFO ] 2025-04-18 14:51:07.583 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 10,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:51:07.5807068",
  "updatedAt" : "2025-04-18T14:51:07.5807068"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:07.601 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/10
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:07.606 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/10
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:10.929 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/9
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:10.934 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/9
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:11.670 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:11.673 [http-nio-48080-exec-9] ChatRoomController - 신규 채팅창 등록 완료: 11
[INFO ] 2025-04-18 14:51:11.674 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 11,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:51:11.6725398",
  "updatedAt" : "2025-04-18T14:51:11.6725398"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:11.698 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/11
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:11.703 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/11
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:17.731 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/10
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:17.737 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/10
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:27.192 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/8
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:27.197 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/8
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:30.593 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:30.598 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:32.950 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/8
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:32.954 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/8
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:37.298 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:37.303 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/7
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:41.086 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/11
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:41.090 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/11
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:46.605 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/8
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:51:46.605 [http-nio-48080-exec-6] ChatRoomController - 채팅창 삭제 요청 - ID: 8
[INFO ] 2025-04-18 14:51:46.608 [http-nio-48080-exec-6] ChatRoomController - 채팅창 삭제 완료 - ID: 8
[INFO ] 2025-04-18 14:51:46.609 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/8
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:48.242 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/7
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:51:48.243 [http-nio-48080-exec-7] ChatRoomController - 채팅창 삭제 요청 - ID: 7
[INFO ] 2025-04-18 14:51:48.245 [http-nio-48080-exec-7] ChatRoomController - 채팅창 삭제 완료 - ID: 7
[INFO ] 2025-04-18 14:51:48.245 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/7
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:50.027 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/6
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:51:50.028 [http-nio-48080-exec-9] ChatRoomController - 채팅창 삭제 요청 - ID: 6
[INFO ] 2025-04-18 14:51:50.031 [http-nio-48080-exec-9] ChatRoomController - 채팅창 삭제 완료 - ID: 6
[INFO ] 2025-04-18 14:51:50.031 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/6
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:50.949 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:50.953 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/5
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:52.753 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/5
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:51:52.754 [http-nio-48080-exec-8] ChatRoomController - 채팅창 삭제 요청 - ID: 5
[INFO ] 2025-04-18 14:51:52.757 [http-nio-48080-exec-8] ChatRoomController - 채팅창 삭제 완료 - ID: 5
[INFO ] 2025-04-18 14:51:52.757 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/5
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:53.486 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/9
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:53.490 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/9
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:57.017 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:57.020 [http-nio-48080-exec-2] ChatRoomController - 신규 채팅창 등록 완료: 12
[INFO ] 2025-04-18 14:51:57.021 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 12,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:51:57.0195292",
  "updatedAt" : "2025-04-18T14:51:57.0195292"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:57.041 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/12
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:57.046 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/12
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:58.048 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/12
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:51:58.052 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/12
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:52:02.111 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/9
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:52:02.115 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/9
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:52:06.849 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:52:06.852 [http-nio-48080-exec-6] ChatRoomController - 신규 채팅창 등록 완료: 13
[INFO ] 2025-04-18 14:52:06.853 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 13,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T14:38:30.485315",
    "updatedAt" : "2025-04-18T14:38:30.485315"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T14:52:06.8510419",
  "updatedAt" : "2025-04-18T14:52:06.8510419"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:52:06.872 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/13
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:52:06.876 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/13
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:53:01.742 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/11
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:53:01.743 [http-nio-48080-exec-9] ChatRoomController - 채팅창 삭제 요청 - ID: 11
[INFO ] 2025-04-18 14:53:01.745 [http-nio-48080-exec-9] ChatRoomController - 채팅창 삭제 완료 - ID: 11
[INFO ] 2025-04-18 14:53:01.745 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/11
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:53:03.368 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/10
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:53:03.369 [http-nio-48080-exec-10] ChatRoomController - 채팅창 삭제 요청 - ID: 10
[INFO ] 2025-04-18 14:53:03.371 [http-nio-48080-exec-10] ChatRoomController - 채팅창 삭제 완료 - ID: 10
[INFO ] 2025-04-18 14:53:03.372 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/10
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:53:04.924 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/9
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:53:04.924 [http-nio-48080-exec-8] ChatRoomController - 채팅창 삭제 요청 - ID: 9
[INFO ] 2025-04-18 14:53:04.928 [http-nio-48080-exec-8] ChatRoomController - 채팅창 삭제 완료 - ID: 9
[INFO ] 2025-04-18 14:53:04.928 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/9
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:53:06.068 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/12
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:53:06.072 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/12
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:58:57.547 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /admin/members/list
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 14:58:57.547 [http-nio-48080-exec-3] MemberController - 회원 목록 조회 요청
[INFO ] 2025-04-18 14:58:57.550 [http-nio-48080-exec-3] MemberController - 총 1명의 회원 조회됨
[INFO ] 2025-04-18 14:58:57.553 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /admin/members/list
  ◀ Body     : [ {
  "id" : "admin",
  "name" : "관리자",
  "email" : "admin@1234"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:59:27.075 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : POST
  ▶ URI      : /admin/members
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=82
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 14:59:27.081 [http-nio-48080-exec-4] MemberController - 받은 DTO: MemberCreateReqDto(id=ljun0903, passwordHash=1234, email=ljun0903@1234, name=이승준)
[INFO ] 2025-04-18 14:59:27.082 [http-nio-48080-exec-4] MemberController - 받은 id: 'ljun0903'
[INFO ] 2025-04-18 14:59:27.082 [http-nio-48080-exec-4] MemberController - 받은 passwordHash: '1234'
[INFO ] 2025-04-18 14:59:27.082 [http-nio-48080-exec-4] MemberController - 받은 email: 'ljun0903@1234'
[INFO ] 2025-04-18 14:59:27.082 [http-nio-48080-exec-4] MemberController - 받은 name: '이승준'
[INFO ] 2025-04-18 14:59:27.088 [http-nio-48080-exec-4] MemberController - 신규 회원 등록 완료: ljun0903
[INFO ] 2025-04-18 14:59:27.089 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /admin/members
  ◀ Body     : {
  "id" : "ljun0903",
  "email" : "ljun0903@1234",
  "passwordHash" : "1234",
  "name" : "이승준",
  "createdAt" : "2025-04-18T14:59:27.0841996",
  "updatedAt" : "2025-04-18T14:59:27.0841996"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:35:34.523 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=86, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:35:34.555 [http-nio-48080-exec-6] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=1, msgQuestion=안녕, msgList=)
[ERROR] 2025-04-18 15:35:34.563 [http-nio-48080-exec-6] ChatController - 채팅 생성 중 오류 발생
java.lang.IllegalArgumentException: 존재하지 않는 채팅방입니다.
	at io.iteyes.genaicodebooster.api.controller.ChatController.lambda$createChat$0(ChatController.java:57) ~[main/:?]
	at java.base/java.util.Optional.orElseThrow(Optional.java:403) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:57) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 15:35:34.570 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 500
  ◀ URI      : /api/chat
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:39:26.029 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:39:26.032 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:39:26.042 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:39:26.046 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:39:26.089 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:39:26.094 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:39:26.104 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:39:26.116 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:44:50.597 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:44:50.599 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:44:50.615 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:44:50.617 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:44:50.674 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:44:50.676 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:44:50.687 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:44:50.690 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:46:23.199 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:46:23.201 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:46:23.215 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:46:23.217 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:46:23.247 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:46:23.249 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:46:23.260 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:46:23.265 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:46:35.051 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /admin/members/list
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:46:35.051 [http-nio-48080-exec-3] MemberController - 회원 목록 조회 요청
[INFO ] 2025-04-18 15:46:35.057 [http-nio-48080-exec-3] MemberController - 총 2명의 회원 조회됨
[INFO ] 2025-04-18 15:46:35.058 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /admin/members/list
  ◀ Body     : [ {
  "id" : "admin",
  "name" : "관리자",
  "email" : "admin@1234"
}, {
  "id" : "ljun0903",
  "name" : "이승준",
  "email" : "ljun0903@1234"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:46:55.165 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=86, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:46:55.166 [http-nio-48080-exec-4] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=1, msgQuestion=안녕, msgList=)
[ERROR] 2025-04-18 15:46:55.167 [http-nio-48080-exec-4] ChatController - 채팅 생성 중 오류 발생
java.lang.IllegalArgumentException: 존재하지 않는 채팅방입니다.
	at io.iteyes.genaicodebooster.api.controller.ChatController.lambda$createChat$0(ChatController.java:57) ~[main/:?]
	at java.base/java.util.Optional.orElseThrow(Optional.java:403) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:57) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 15:46:55.170 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 500
  ◀ URI      : /api/chat
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:47:25.008 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:47:25.008 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 15:47:25.014 [http-nio-48080-exec-6] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 15:47:25.016 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 12,
  "title" : "New chat"
}, {
  "id" : 13,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:47:30.684 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=87, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:47:30.685 [http-nio-48080-exec-7] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=12, msgQuestion=안녕, msgList=)
[INFO ] 2025-04-18 15:47:31.974 [http-nio-48080-exec-7] ChatController - AI 응답 수신: 안녕하세요! 무엇을 도와드릴까요? 😊

[INFO ] 2025-04-18 15:47:31.986 [http-nio-48080-exec-7] ChatController - 사용자 메시지 저장 완료: 1
[INFO ] 2025-04-18 15:47:31.987 [http-nio-48080-exec-7] ChatController - AI 메시지 저장 완료: 2
[INFO ] 2025-04-18 15:47:31.988 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "안녕하세요! 무엇을 도와드릴까요? 😊\n"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:47:46.345 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:47:46.346 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 15:47:46.348 [http-nio-48080-exec-9] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 15:47:46.349 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 12,
  "title" : "New chat"
}, {
  "id" : 13,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:47:46.935 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/12
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:47:46.947 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/12
  ◀ Body     : [ {
  "id" : 2,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:47:31.986029"
}, {
  "id" : 1,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:47:31.978531"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:47:57.284 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=92
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:47:57.285 [http-nio-48080-exec-8] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=12, msgQuestion=next.js 환경 설정 해줘, msgList=)
[INFO ] 2025-04-18 15:49:33.144 [http-nio-48080-exec-8] ChatController - AI 응답 수신: ## Next.js 환경 설정 가이드

Next.js 환경 설정은 크게 프로젝트 생성, 개발 환경 설정, 그리고 배포 환경 설정으로 나눌 수 있습니다.

**1. 프로젝트 생성**

Next.js 프로젝트를 생성하는 방법은 다음과 같습니다.

*   **`create-next-app` 사용 (권장):**  `create-next-app`은 Next.js 프로젝트를 빠르게 설정할 수 있도록 도와주는 공식 CLI 도구입니다. 터미널에서 다음 명령어를 실행합니다.

    ```bash
    npx create-next-app@latest my-next-app
    # 또는
    yarn create next-app my-next-app
    # 또는
    pnpm create next-app my-next-app
    ```

    *   `my-next-app`은 프로젝트 이름으로 자유롭게 변경할 수 있습니다.
    *   CLI에서 몇 가지 질문에 답하여 프로젝트 설정을 완료합니다 (예: TypeScript 사용 여부, ESLint 사용 여부, etc.).

*   **수동 설정:**  Next.js 공식 문서를 참고하여 직접 프로젝트 구조를 만들고 필요한 패키지를 설치할 수도 있습니다. (이 방법은 고급 사용자에게 적합합니다.)

**2. 개발 환경 설정**

프로젝트 생성 후, 개발 환경을 설정해야 합니다.

*   **Node.js 및 npm (또는 yarn, pnpm) 설치:**  Next.js는 Node.js 환경에서 실행되므로 Node.js와 패키지 관리자 (npm, yarn, pnpm 중 하나)를 설치해야 합니다.

    *   [Node.js 공식 웹사이트](https://nodejs.org/en/)에서 LTS 버전을 다운로드하여 설치합니다.
    *   npm은 Node.js 설치 시 함께 설치됩니다. yarn 또는 pnpm을 사용하려면 별도로 설치해야 합니다.
        *   yarn: `npm install --global yarn`
        *   pnpm: `npm install -g pnpm`

*   **프로젝트 디렉토리로 이동:**  터미널에서 생성된 프로젝트 디렉토리로 이동합니다.

    ```bash
    cd my-next-app
    ```

*   **의존성 설치:**  프로젝트의 의존성을 설치합니다.  `create-next-app`을 사용한 경우, 이미 필요한 의존성이 설치되어 있을 수 있습니다.

    ```bash
    npm install
    # 또는
    yarn install
    # 또는
    pnpm install
    ```

*   **개발 서버 실행:**  개발 서버를 실행하여 애플리케이션을 로컬에서 실행합니다.

    ```bash
    npm run dev
    # 또는
    yarn dev
    # 또는
    pnpm dev
    ```

    개발 서버는 기본적으로 `http://localhost:3000`에서 실행됩니다.

**3. 배포 환경 설정**

Next.js 애플리케이션을 배포하는 방법은 다양합니다.  가장 일반적인 방법은 다음과 같습니다.

*   **Vercel:**  Next.js를 만든 회사인 Vercel에서 제공하는 플랫폼입니다.  Next.js 애플리케이션을 Vercel에 배포하는 것은 매우 간단하며, 자동 빌드 및 배포 기능을 제공합니다.  [Vercel 공식 웹사이트](https://vercel.com/)를 방문하여 Vercel 계정을 생성하고, 프로젝트를 연결하면 됩니다.

*   **Netlify:**  Netlify는 정적 웹사이트 및 서버리스 함수 배포를 위한 또 다른 인기 있는 플랫폼입니다.  [Netlify 공식 웹사이트](https://www.netlify.com/)를 방문하여 Netlify 계정을 생성하고, 프로젝트를 연결하면 됩니다.

*   **AWS, Google Cloud, Azure 등:**  클라우드 제공업체를 사용하여 직접 인프라를 구축하고 애플리케이션을 배포할 수도 있습니다.  이 방법은 더 많은 제어권을 제공하지만, 인프라 관리에 대한 전문 지식이 필요합니다.

**추가 설정 (선택 사항)**

*   **TypeScript 사용:**  TypeScript는 JavaScript에 정적 타입을 추가하는 언어입니다.  TypeScript를 사용하면 코드의 안정성과 유지 관리성을 높일 수 있습니다.  `create-next-app`을 사용할 때 TypeScript 옵션을 선택하거나, 기존 프로젝트에 TypeScript를 추가할 수 있습니다.

*   **ESLint 및 Prettier 설정:**  ESLint는 코드 스타일을 검사하고 잠재적인 오류를 찾는데 사용되는 도구입니다.  Prettier는 코드를 자동으로 포맷팅하는 도구입니다.  이 도구들을 설정하면 코드 일관성을 유지하고 개발 효율성을 높일 수 있습니다.

*   **환경 변수 관리:**  API 키, 데이터베이스 연결 문자열 등 민감한 정보는 코드에 직접 입력하지 않고 환경 변수를 사용하여 관리해야 합니다.  `.env` 파일을 만들고 환경 변수를 정의하거나, Vercel, Netlify 등 배포 플랫폼에서 제공하는 환경 변수 관리 기능을 사용할 수 있습니다.

**참고 자료**

*   [Next.js 공식 웹사이트](https://nextjs.org/)
*   [Next.js 튜토리얼](https://nextjs.org/learn)
*   [create-next-app GitHub 저장소](https://github.com/vercel/create-next-app)

이 가이드라인을 따라하면 Next.js 환경을 설정하고 개발을 시작할 수 있습니다.  궁금한 점이 있으면 언제든지 질문해주세요.
[INFO ] 2025-04-18 15:49:33.146 [http-nio-48080-exec-8] ChatController - 사용자 메시지 저장 완료: 3
[INFO ] 2025-04-18 15:49:33.148 [http-nio-48080-exec-8] ChatController - AI 메시지 저장 완료: 4
[INFO ] 2025-04-18 15:49:33.150 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "## Next.js 환경 설정 가이드\n\nNext.js 환경 설정은 크게 프로젝트 생성, 개발 환경 설정, 그리고 배포 환경 설정으로 나눌 수 있습니다.\n\n**1. 프로젝트 생성**\n\nNext.js 프로젝트를 생성하는 방법은 다음과 같습니다.\n\n*   **`create-next-app` 사용 (권장):**  `create-next-app`은 Next.js 프로젝트를 빠르게 설정할 수 있도록 도와주는 공식 CLI 도구입니다. 터미널에서 다음 명령어를 실행합니다.\n\n    ```bash\n    npx create-next-app@latest my-next-app\n    # 또는\n    yarn create next-app my-next-app\n    # 또는\n    pnpm create next-app my-next-app\n    ```\n\n    *   `my-next-app`은 프로젝트 이름으로 자유롭게 변경할 수 있습니다.\n    *   CLI에서 몇 가지 질문에 답하여 프로젝트 설정을 완료합니다 (예: TypeScript 사용 여부, ESLint 사용 여부, etc.).\n\n*   **수동 설정:**  Next.js 공식 문서를 참고하여 직접 프로젝트 구조를 만들고 필요한 패키지를 설치할 수도 있습니다. (이 방법은 고급 사용자에게 적합합니다.)\n\n**2. 개발 환경 설정**\n\n프로젝트 생성 후, 개발 환경을 설정해야 합니다.\n\n*   **Node.js 및 npm (또는 yarn, pnpm) 설치:**  Next.js는 Node.js 환경에서 실행되므로 Node.js와 패키지 관리자 (npm, yarn, pnpm 중 하나)를 설치해야 합니다.\n\n    *   [Node.js 공식 웹사이트](https://nodejs.org/en/)에서 LTS 버전을 다운로드하여 설치합니다.\n    *   npm은 Node.js 설치 시 함께 설치됩니다. yarn 또는 pnpm을 사용하려면 별도로 설치해야 합니다.\n        *   yarn: `npm install --global yarn`\n        *   pnpm: `npm install -g pnpm`\n\n*   **프로젝트 디렉토리로 이동:**  터미널에서 생성된 프로젝트 디렉토리로 이동합니다.\n\n    ```bash\n    cd my-next-app\n    ```\n\n*   **의존성 설치:**  프로젝트의 의존성을 설치합니다.  `create-next-app`을 사용한 경우, 이미 필요한 의존성이 설치되어 있을 수 있습니다.\n\n    ```bash\n    npm install\n    # 또는\n    yarn install\n    # 또는\n    pnpm install\n    ```\n\n*   **개발 서버 실행:**  개발 서버를 실행하여 애플리케이션을 로컬에서 실행합니다.\n\n    ```bash\n    npm run dev\n    # 또는\n    yarn dev\n    # 또는\n    pnpm dev\n    ```\n\n    개발 서버는 기본적으로 `http://localhost:3000`에서 실행됩니다.\n\n**3. 배포 환경 설정**\n\nNext.js 애플리케이션을 배포하는 방법은 다양합니다.  가장 일반적인 방법은 다음과 같습니다.\n\n*   **Vercel:**  Next.js를 만든 회사인 Vercel에서 제공하는 플랫폼입니다.  Next.js 애플리케이션을 Vercel에 배포하는 것은 매우 간단하며, 자동 빌드 및 배포 기능을 제공합니다.  [Vercel 공식 웹사이트](https://vercel.com/)를 방문하여 Vercel 계정을 생성하고, 프로젝트를 연결하면 됩니다.\n\n*   **Netlify:**  Netlify는 정적 웹사이트 및 서버리스 함수 배포를 위한 또 다른 인기 있는 플랫폼입니다.  [Netlify 공식 웹사이트](https://www.netlify.com/)를 방문하여 Netlify 계정을 생성하고, 프로젝트를 연결하면 됩니다.\n\n*   **AWS, Google Cloud, Azure 등:**  클라우드 제공업체를 사용하여 직접 인프라를 구축하고 애플리케이션을 배포할 수도 있습니다.  이 방법은 더 많은 제어권을 제공하지만, 인프라 관리에 대한 전문 지식이 필요합니다.\n\n**추가 설정 (선택 사항)**\n\n*   **TypeScript 사용:**  TypeScript는 JavaScript에 정적 타입을 추가하는 언어입니다.  TypeScript를 사용하면 코드의 안정성과 유지 관리성을 높일 수 있습니다.  `create-next-app`을 사용할 때 TypeScript 옵션을 선택하거나, 기존 프로젝트에 TypeScript를 추가할 수 있습니다.\n\n*   **ESLint 및 Prettier 설정:**  ESLint는 코드 스타일을 검사하고 잠재적인 오류를 찾는데 사용되는 도구입니다.  Prettier는 코드를 자동으로 포맷팅하는 도구입니다.  이 도구들을 설정하면 코드 일관성을 유지하고 개발 효율성을 높일 수 있습니다.\n\n*   **환경 변수 관리:**  API 키, 데이터베이스 연결 문자열 등 민감한 정보는 코드에 직접 입력하지 않고 환경 변수를 사용하여 관리해야 합니다.  `.env` 파일을 만들고 환경 변수를 정의하거나, Vercel, Netlify 등 배포 플랫폼에서 제공하는 환경 변수 관리 기능을 사용할 수 있습니다.\n\n**참고 자료**\n\n*   [Next.js 공식 웹사이트](https://nextjs.org/)\n*   [Next.js 튜토리얼](https://nextjs.org/learn)\n*   [create-next-app GitHub 저장소](https://github.com/vercel/create-next-app)\n\n이 가이드라인을 따라하면 Next.js 환경을 설정하고 개발을 시작할 수 있습니다.  궁금한 점이 있으면 언제든지 질문해주세요."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:50:14.162 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=114
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:50:14.163 [http-nio-48080-exec-1] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=12, msgQuestion=카카오 로그인 연동하는 예시 코드 줘, msgList=)
[INFO ] 2025-04-18 15:50:55.770 [SpringApplicationShutdownHook] GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
[INFO ] 2025-04-18 15:51:04.578 [background-preinit] Version - HV000001: Hibernate Validator 8.0.2.Final
[INFO ] 2025-04-18 15:51:04.620 [restartedMain] GenaicodeboosterApplication - Starting GenaicodeboosterApplication v0.0.1-SNAPSHOT using Java 21.0.1 with PID 28180 (C:\iteyes-projects\genaicodebooster\genaicodebooster\build\classes\java\main started by lenovo in C:\iteyes-projects\genaicodebooster\genaicodebooster)
[DEBUG] 2025-04-18 15:51:04.624 [restartedMain] GenaicodeboosterApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
[INFO ] 2025-04-18 15:51:04.625 [restartedMain] GenaicodeboosterApplication - The following 1 profile is active: "local"
[INFO ] 2025-04-18 15:51:04.664 [restartedMain] DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
[INFO ] 2025-04-18 15:51:04.664 [restartedMain] DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
[INFO ] 2025-04-18 15:51:05.630 [restartedMain] RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
[INFO ] 2025-04-18 15:51:05.686 [restartedMain] RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 49 ms. Found 3 JPA repository interfaces.
[INFO ] 2025-04-18 15:51:06.322 [restartedMain] TomcatWebServer - Tomcat initialized with port 48080 (http)
[INFO ] 2025-04-18 15:51:06.333 [restartedMain] Http11NioProtocol - Initializing ProtocolHandler ["http-nio-48080"]
[INFO ] 2025-04-18 15:51:06.335 [restartedMain] StandardService - Starting service [Tomcat]
[INFO ] 2025-04-18 15:51:06.335 [restartedMain] StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
[INFO ] 2025-04-18 15:51:06.383 [restartedMain] [/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2025-04-18 15:51:06.384 [restartedMain] ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1718 ms
[DEBUG] 2025-04-18 15:51:06.543 [restartedMain] RequestCachingFilter - Filter 'requestCachingFilter' configured for use
[INFO ] 2025-04-18 15:51:06.662 [restartedMain] LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
[INFO ] 2025-04-18 15:51:06.706 [restartedMain] Version - HHH000412: Hibernate ORM core version 6.6.11.Final
[INFO ] 2025-04-18 15:51:06.736 [restartedMain] RegionFactoryInitiator - HHH000026: Second-level cache disabled
[INFO ] 2025-04-18 15:51:06.967 [restartedMain] SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
[INFO ] 2025-04-18 15:51:06.995 [restartedMain] HikariDataSource - HikariPool - Starting...
[INFO ] 2025-04-18 15:51:07.141 [restartedMain] HikariPool - HikariPool - Added connection conn0: url=jdbc:h2:mem:genaicbtest user=TEST
[INFO ] 2025-04-18 15:51:07.143 [restartedMain] HikariDataSource - HikariPool - Start completed.
[WARN ] 2025-04-18 15:51:07.162 [restartedMain] deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
[INFO ] 2025-04-18 15:51:07.180 [restartedMain] pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool)']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
[INFO ] 2025-04-18 15:51:07.913 [restartedMain] JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
[INFO ] 2025-04-18 15:51:07.973 [restartedMain] LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
[DEBUG] 2025-04-18 15:51:08.330 [restartedMain] RestTemplateConfig - RestTemplate configured with connect timeout: 5000ms and read timeout: 5000ms
[WARN ] 2025-04-18 15:51:08.464 [restartedMain] JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
[INFO ] 2025-04-18 15:51:09.237 [restartedMain] H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:genaicbtest'
[INFO ] 2025-04-18 15:51:09.293 [restartedMain] OptionalLiveReloadServer - LiveReload server is running on port 35729
[INFO ] 2025-04-18 15:51:09.302 [restartedMain] EndpointLinksResolver - Exposing 2 endpoints beneath base path '/healthcheck'
[INFO ] 2025-04-18 15:51:09.364 [restartedMain] Http11NioProtocol - Starting ProtocolHandler ["http-nio-48080"]
[INFO ] 2025-04-18 15:51:09.380 [restartedMain] TomcatWebServer - Tomcat started on port 48080 (http) with context path '/'
[INFO ] 2025-04-18 15:51:09.390 [restartedMain] GenaicodeboosterApplication - Started GenaicodeboosterApplication in 5.085 seconds (process running for 6.012)
[INFO ] 2025-04-18 15:51:09.425 [http-nio-48080-exec-1] [/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[INFO ] 2025-04-18 15:51:09.426 [http-nio-48080-exec-1] DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[INFO ] 2025-04-18 15:51:09.427 [http-nio-48080-exec-1] DispatcherServlet - Completed initialization in 1 ms
[INFO ] 2025-04-18 15:51:09.450 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:51:09.463 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:51:09.492 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:51:09.516 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:51:09.552 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:51:09.580 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:51:09.595 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:51:09.803 [http-nio-48080-exec-4] AbstractOpenApiResource - Init duration for springdoc-openapi is: 198 ms
[INFO ] 2025-04-18 15:51:09.820 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:51:18.917 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:51:18.918 [http-nio-48080-exec-5] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 15:51:19.032 [http-nio-48080-exec-5] ChatRoomController - 총 0명의 채팅창 조회됨
[INFO ] 2025-04-18 15:51:19.036 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:51:27.304 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:51:27.305 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 15:51:27.307 [http-nio-48080-exec-6] ChatRoomController - 총 0명의 채팅창 조회됨
[INFO ] 2025-04-18 15:51:27.308 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:51:38.622 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=36
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:51:38.636 [http-nio-48080-exec-7] MemberController - 로그인 시도 - ID: admin
[WARN ] 2025-04-18 15:51:38.650 [http-nio-48080-exec-7] MemberController - 로그인 실패 - 잘못된 자격증명: admin
[INFO ] 2025-04-18 15:51:38.651 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 401
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Invalid credentials
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:52:06.141 [SpringApplicationShutdownHook] GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
[INFO ] 2025-04-18 15:52:06.159 [tomcat-shutdown] GracefulShutdown - Graceful shutdown complete
[INFO ] 2025-04-18 15:52:06.165 [SpringApplicationShutdownHook] LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
[WARN ] 2025-04-18 15:52:06.168 [SpringApplicationShutdownHook] DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-232]
[INFO ] 2025-04-18 15:52:06.170 [SpringApplicationShutdownHook] HikariDataSource - HikariPool - Shutdown initiated...
[INFO ] 2025-04-18 15:52:06.170 [SpringApplicationShutdownHook] HikariDataSource - HikariPool - Shutdown completed.
[INFO ] 2025-04-18 15:52:10.897 [background-preinit] Version - HV000001: Hibernate Validator 8.0.2.Final
[INFO ] 2025-04-18 15:52:10.933 [restartedMain] GenaicodeboosterApplication - Starting GenaicodeboosterApplication v0.0.1-SNAPSHOT using Java 21.0.1 with PID 25120 (C:\iteyes-projects\genaicodebooster\genaicodebooster\build\classes\java\main started by lenovo in C:\iteyes-projects\genaicodebooster\genaicodebooster)
[DEBUG] 2025-04-18 15:52:10.935 [restartedMain] GenaicodeboosterApplication - Running with Spring Boot v3.4.4, Spring v6.2.5
[INFO ] 2025-04-18 15:52:10.936 [restartedMain] GenaicodeboosterApplication - The following 1 profile is active: "local"
[INFO ] 2025-04-18 15:52:10.969 [restartedMain] DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
[INFO ] 2025-04-18 15:52:10.969 [restartedMain] DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
[INFO ] 2025-04-18 15:52:11.831 [restartedMain] RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
[INFO ] 2025-04-18 15:52:11.900 [restartedMain] RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 60 ms. Found 3 JPA repository interfaces.
[INFO ] 2025-04-18 15:52:12.518 [restartedMain] TomcatWebServer - Tomcat initialized with port 48080 (http)
[INFO ] 2025-04-18 15:52:12.529 [restartedMain] Http11NioProtocol - Initializing ProtocolHandler ["http-nio-48080"]
[INFO ] 2025-04-18 15:52:12.530 [restartedMain] StandardService - Starting service [Tomcat]
[INFO ] 2025-04-18 15:52:12.530 [restartedMain] StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.39]
[INFO ] 2025-04-18 15:52:12.573 [restartedMain] [/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2025-04-18 15:52:12.573 [restartedMain] ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1603 ms
[DEBUG] 2025-04-18 15:52:12.708 [restartedMain] RequestCachingFilter - Filter 'requestCachingFilter' configured for use
[INFO ] 2025-04-18 15:52:12.824 [restartedMain] LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
[INFO ] 2025-04-18 15:52:12.872 [restartedMain] Version - HHH000412: Hibernate ORM core version 6.6.11.Final
[INFO ] 2025-04-18 15:52:12.900 [restartedMain] RegionFactoryInitiator - HHH000026: Second-level cache disabled
[INFO ] 2025-04-18 15:52:13.118 [restartedMain] SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
[INFO ] 2025-04-18 15:52:13.144 [restartedMain] HikariDataSource - HikariPool - Starting...
[INFO ] 2025-04-18 15:52:13.295 [restartedMain] HikariPool - HikariPool - Added connection conn0: url=jdbc:h2:mem:genaicbtest user=TEST
[INFO ] 2025-04-18 15:52:13.296 [restartedMain] HikariDataSource - HikariPool - Start completed.
[WARN ] 2025-04-18 15:52:13.322 [restartedMain] deprecation - HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
[INFO ] 2025-04-18 15:52:13.351 [restartedMain] pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool)']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
[INFO ] 2025-04-18 15:52:14.161 [restartedMain] JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
[INFO ] 2025-04-18 15:52:14.221 [restartedMain] LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
[DEBUG] 2025-04-18 15:52:14.547 [restartedMain] RestTemplateConfig - RestTemplate configured with connect timeout: 5000ms and read timeout: 5000ms
[WARN ] 2025-04-18 15:52:14.683 [restartedMain] JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
[INFO ] 2025-04-18 15:52:15.335 [restartedMain] H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:genaicbtest'
[INFO ] 2025-04-18 15:52:15.388 [restartedMain] OptionalLiveReloadServer - LiveReload server is running on port 35729
[INFO ] 2025-04-18 15:52:15.407 [restartedMain] EndpointLinksResolver - Exposing 2 endpoints beneath base path '/healthcheck'
[INFO ] 2025-04-18 15:52:15.470 [restartedMain] Http11NioProtocol - Starting ProtocolHandler ["http-nio-48080"]
[INFO ] 2025-04-18 15:52:15.485 [restartedMain] TomcatWebServer - Tomcat started on port 48080 (http) with context path '/'
[INFO ] 2025-04-18 15:52:15.496 [restartedMain] GenaicodeboosterApplication - Started GenaicodeboosterApplication in 4.866 seconds (process running for 6.491)
[INFO ] 2025-04-18 15:52:16.033 [RMI TCP Connection(5)-172.24.80.1] [/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[INFO ] 2025-04-18 15:52:16.033 [RMI TCP Connection(5)-172.24.80.1] DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[INFO ] 2025-04-18 15:52:16.034 [RMI TCP Connection(5)-172.24.80.1] DispatcherServlet - Completed initialization in 1 ms
[INFO ] 2025-04-18 15:54:56.957 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : POST
  ▶ URI      : /admin/members
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=93, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:54:57.023 [http-nio-48080-exec-1] MemberController - 받은 DTO: MemberCreateReqDto(id=admin, passwordHash=1234, email=admin@1234, name=관리자)
[INFO ] 2025-04-18 15:54:57.024 [http-nio-48080-exec-1] MemberController - 받은 id: 'admin'
[INFO ] 2025-04-18 15:54:57.024 [http-nio-48080-exec-1] MemberController - 받은 passwordHash: '1234'
[INFO ] 2025-04-18 15:54:57.024 [http-nio-48080-exec-1] MemberController - 받은 email: 'admin@1234'
[INFO ] 2025-04-18 15:54:57.024 [http-nio-48080-exec-1] MemberController - 받은 name: '관리자'
[INFO ] 2025-04-18 15:54:57.356 [http-nio-48080-exec-1] MemberController - 신규 회원 등록 완료: admin
[INFO ] 2025-04-18 15:54:57.373 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /admin/members
  ◀ Body     : {
  "id" : "admin",
  "email" : "admin@1234",
  "passwordHash" : "1234",
  "name" : "관리자",
  "createdAt" : "2025-04-18T15:54:57.3282493",
  "updatedAt" : "2025-04-18T15:54:57.3282493"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:00.454 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=36
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:55:00.457 [http-nio-48080-exec-3] MemberController - 로그인 시도 - ID: admin
[INFO ] 2025-04-18 15:55:00.462 [http-nio-48080-exec-3] MemberController - 로그인 성공 - ID: admin, 이메일: admin@1234
[INFO ] 2025-04-18 15:55:00.464 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 관리자
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:00.479 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:00.483 [http-nio-48080-exec-2] MemberController - 받은 id: admin
[INFO ] 2025-04-18 15:55:00.489 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin
  ◀ Body     : {
  "id" : "admin",
  "passwordHash" : "1234",
  "email" : "admin@1234",
  "name" : "관리자",
  "createdAt" : "2025-04-18T15:54:57.328249",
  "updatedAt" : "2025-04-18T15:54:57.328249"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:00.539 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:55:00.539 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 15:55:00.566 [http-nio-48080-exec-6] ChatRoomController - 총 0명의 채팅창 조회됨
[INFO ] 2025-04-18 15:55:00.568 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:04.510 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:04.528 [http-nio-48080-exec-5] ChatRoomController - 신규 채팅창 등록 완료: 1
[INFO ] 2025-04-18 15:55:04.531 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 1,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T15:54:57.328249",
    "updatedAt" : "2025-04-18T15:54:57.328249"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T15:55:04.5173691",
  "updatedAt" : "2025-04-18T15:55:04.5173691"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:04.596 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:04.612 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:05.354 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:05.358 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 15:55:24.448 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=116
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 15:55:24.453 [http-nio-48080-exec-8] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=1, msgQuestion=카카오 로그인 연동하는 예시 코드좀 줘, msgList=)
[INFO ] 2025-04-18 15:57:14.531 [http-nio-48080-exec-8] ChatController - AI 응답 수신: 카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.

**1. 프론트엔드 (HTML & JavaScript)**

```html
<!DOCTYPE html>
<html>
<head>
    <title>Kakao Login</title>
    <script src="https://developers.kakao.com/sdk/js/kakao.js"></script>
</head>
<body>
    <button id="kakao-login">카카오톡 로그인</button>

    <script>
        // 카카오톡 로그인 버튼 클릭 이벤트
        document.getElementById('kakao-login').addEventListener('click', () => {
            // 카카오톡 로그인 API 호출
            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력

            Kakao.Auth.login({
                success: function(authObj) {
                    // 로그인 성공 시
                    console.log(authObj);
                    // 사용자 정보 가져오기
                    Kakao.Auth.setAccessToken(authObj.accessToken);
                    Kakao.API.request({
                        url: '/v2/user/me',
                        method: 'GET',
                        headers: {
                            'Authorization': 'Bearer ' + authObj.accessToken
                        }
                    }).then(function(result) {
                        console.log('User info: ', result.response);
                        // 사용자 정보 활용 (예: 사용자 이름 표시)
                    }).catch(function(error) {
                        console.error(error);
                    });
                },
                fail: function(error) {
                    // 로그인 실패 시
                    console.error(error);
                }
            });
        });
    </script>
</body>
</html>
```

**설명:**

*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.
*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.
*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.
*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.
*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.

**2. 백엔드 (Node.js 예시)**

카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.

```javascript
const express = require('express');
const app = express();
const port = 3000;

app.get('/login', (req, res) => {
    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)
    //  (카카오 로그인 페이지로 리디렉션)

    // 예시:
    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';
    // res.redirect(kakaoAuthUrl);
});

app.get('/callback', (req, res) => {
    // 카카오톡에서 리디렉션된 URL
    const code = req.query.code;

    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)
    //  (카카오 개발자 문서 참고)

    // 액세스 토큰을 사용하여 사용자 정보 가져오기
    //  (카카오 API 활용)

    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결
    //  (예: 이메일, 사용자 ID 등)

    // 사용자 인증 성공 후 리디렉션
    // res.send('Login Success');
});

app.listen(port, () => {
    console.log(`Example app listening at http://localhost:${port}`);
});
```

**설명:**

*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.
*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.

**주의사항:**

*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.
*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.
*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.
*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.
*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.

이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.
[INFO ] 2025-04-18 15:57:14.535 [http-nio-48080-exec-8] ChatController - 사용자 메시지 저장 완료: 1
[INFO ] 2025-04-18 15:57:14.537 [http-nio-48080-exec-8] ChatController - AI 메시지 저장 완료: 2
[INFO ] 2025-04-18 15:57:14.542 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:00:23.200 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=69
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:00:23.201 [http-nio-48080-exec-3] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=1, msgQuestion=안녕, msgList=)
[INFO ] 2025-04-18 16:00:25.615 [http-nio-48080-exec-3] ChatController - AI 응답 수신: 안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.
[INFO ] 2025-04-18 16:00:25.617 [http-nio-48080-exec-3] ChatController - 사용자 메시지 저장 완료: 3
[INFO ] 2025-04-18 16:00:25.619 [http-nio-48080-exec-3] ChatController - AI 메시지 저장 완료: 4
[INFO ] 2025-04-18 16:00:25.621 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:00:41.926 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=72
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:00:41.928 [http-nio-48080-exec-2] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=1, msgQuestion=고마워, msgList=)
[INFO ] 2025-04-18 16:00:44.373 [http-nio-48080-exec-2] ChatController - AI 응답 수신: 천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.
[INFO ] 2025-04-18 16:00:44.375 [http-nio-48080-exec-2] ChatController - 사용자 메시지 저장 완료: 5
[INFO ] 2025-04-18 16:00:44.376 [http-nio-48080-exec-2] ChatController - AI 메시지 저장 완료: 6
[INFO ] 2025-04-18 16:00:44.378 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:01:10.786 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=127
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:01:10.787 [http-nio-48080-exec-6] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=1, msgQuestion=next.js에서 카카오 로그인 연동 예시 코드 알려줘, msgList=)
[INFO ] 2025-04-18 16:03:30.926 [http-nio-48080-exec-6] ChatController - AI 응답 수신: ## Next.js에서 카카오 로그인 연동 예시 코드

다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.

**1. 카카오 개발자 준비:**

*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.
*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.
*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)

**2. Next.js 프로젝트 설정:**

*   **Kakao JavaScript SDK 설치:**

```bash
npm install @kakao/sdk
```

*   **.env 파일 설정:**

```
KAKAO_APP_KEY=YOUR_KAKAO_APP_KEY
```

**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**

```jsx
// KakaoLogin.js
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)

const KakaoLogin = () => {
  const router = useRouter();
  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // 카카오톡 로그인 버튼 표시 여부 설정
    window.Kakao.isPlusFriend(
      (error, result) => {
        if (error) {
          console.log(error);
        } else if (result) {
          // 친구 추가 시 버튼 표시
        } else {
          // 친구 추가 안했을 시 버튼 숨김
        }
      }
    );
  }, []);


  const handleKakaoLogin = async () => {
    setLoading(true);
    try {
      const result = await kakaoLogin();
      if (result) {
        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)
        router.push('/'); // 예시: 홈 페이지로 리다이렉트
      } else {
        // 로그인 실패 시 처리
        alert('카카오 로그인에 실패했습니다.');
      }
    } catch (error) {
      console.error('카카오 로그인 오류:', error);
      alert('카카오 로그인 오류가 발생했습니다.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <button onClick={handleKakaoLogin} disabled={loading}>
      {loading ? '로딩 중...' : '카카오 로그인'}
    </button>
  );
};

export default KakaoLogin;
```

**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**

```jsx
// KakaoContext.js
import { useState, useEffect, createContext, useContext } from 'react';

const KakaoContext = createContext(null);

const KakaoProvider = ({ children }) => {
  const [kakao, setKakao] = useState(null);

  useEffect(() => {
    const script = document.createElement('script');
    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';
    script.async = true;
    document.body.appendChild(script);

    script.onload = () => {
      window.Kakao.init(process.env.KAKAO_APP_KEY);
      setKakao(window.Kakao);
    };
  }, []);

  const kakaoLogin = async () => {
    if (!kakao) {
      return false;
    }

    try {
      const result = await kakao.Auth.login({
        scope: 'profile',
        redirectUri: 'http://localhost:3000/kakao/callback',
      });
      if (result) {
        // 사용자 정보 가져오기
        const profile = await kakao.API.request({
          url: '/v2/user/me',
          method: 'get',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
          },
        });
        console.log(profile);
        return true;
      }
      return false;
    } catch (error) {
      console.error('카카오 로그인 오류:', error);
      return false;
    }
  }
  return (
    <KakaoContext.Provider value={{ kakaoLogin }}>
      {children}
    </KakaoContext.Provider>
  );
};

export { KakaoContext, KakaoProvider };
```

**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**

```jsx
// index.js 또는 app.js
import KakaoLogin from './KakaoLogin';
import { KakaoProvider } from './KakaoContext';

function HomePage() {
  return (
    <div>
      <h1>카카오 로그인</h1>
      <KakaoProvider>
        <KakaoLogin />
      </KakaoProvider>
    </div>
  );
}

export default HomePage;
```

**6.  `/kakao/callback` 페이지 구현:**

카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.

```jsx
// pages/kakao/callback.js
import React, { useEffect } from 'react';
import { useRouter } from 'next/router';

const KakaoCallback = () => {
  const router = useRouter();

  useEffect(() => {
    // 카카오로부터 인증 코드 받기
    const code = router.query.code;

    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)
    // 예: fetch(`/api/kakao/login?code=${code}`)

    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트
    // 예: router.push('/');

    console.log('카카오 콜백 페이지:', code);
  }, [router]);

  return (
    <div>
      <h1>카카오 로그인 콜백 페이지</h1>
    </div>
  );
};

export default KakaoCallback;
```

**주의 사항:**

*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.
*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.
*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.
*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.
*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.

위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.

[INFO ] 2025-04-18 16:03:30.929 [http-nio-48080-exec-6] ChatController - 사용자 메시지 저장 완료: 7
[INFO ] 2025-04-18 16:03:30.930 [http-nio-48080-exec-6] ChatController - AI 메시지 저장 완료: 8
[INFO ] 2025-04-18 16:03:30.933 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:06:37.152 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=116
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:06:37.155 [http-nio-48080-exec-4] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=1, msgQuestion=카카오 로그인 연동하는 예시 코드만 줘, msgList=)
[INFO ] 2025-04-18 16:08:26.119 [http-nio-48080-exec-4] ChatController - AI 응답 수신: ```python
from flask import Flask, render_template, redirect, url_for, session
from kakao import KakaoLogin

app = Flask(__name__)
app.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함

# 카카오 로그인 설정 (본인 정보로 변경)
KAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'
KAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL

kakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)


@app.route('/')
def index():
    if 'kakao_access_token' in session:
        user_info = kakao_login.get_user_info(session['kakao_access_token'])
        return render_template('index.html', user_info=user_info)
    else:
        return render_template('index.html', user_info=None)


@app.route('/login')
def login():
    kakao_login_url = kakao_login.get_login_url()
    return redirect(kakao_login_url)


@app.route('/callback')
def callback():
    code = request.args.get('code')
    access_token = kakao_login.get_access_token(code)

    if access_token:
        session['kakao_access_token'] = access_token
        return redirect(url_for('index'))
    else:
        return "카카오 로그인 실패"

if __name__ == '__main__':
    app.run(debug=True)
```

**주의 사항:**

*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.
*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.
*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.
*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)
*   `request` 객체는 Flask의 request 객체를 의미합니다.
*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.

**`kakao.py` 예시 (사용자 정의 모듈):**

```python
import requests

class KakaoLogin:
    def __init__(self, app_key, redirect_uri):
        self.app_key = app_key
        self.redirect_uri = redirect_uri
        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'
        self.token_url = 'https://kauth.kakao.com/oauth/token'
        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'

    def get_login_url(self):
        params = {
            'client_id': self.app_key,
            'redirect_uri': self.redirect_uri,
            'response_type': 'code',
            'scope': 'talk_open_graph'  # 필요한 권한을 설정
        }
        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])

    def get_access_token(self, code):
        data = {
            'grant_type': 'authorization_code',
            'client_id': self.app_key,
            'redirect_uri': self.redirect_uri,
            'code': code
        }
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        response = requests.post(self.token_url, data=data, headers=headers)
        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생
        return response.json().get('access_token')

    def get_user_info(self, access_token):
        headers = {'Authorization': 'Bearer ' + access_token}
        response = requests.get(self.api_url, headers=headers)
        response.raise_for_status()
        return response.json().get('result')
```

**index.html (예시):**

```html
<!DOCTYPE html>
<html>
<head>
    <title>카카오 로그인 연동 예시</title>
</head>
<body>
    {% if user_info %}
        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>
        <p>프로필 이미지: <img src="{{ user_info.profile_image }}" alt="프로필 이미지"></p>
    {% else %}
        <a href="{{ url_for('login') }}">카카오 로그인</a>
    {% endif %}
</body>
</html>
```

**설치해야 할 라이브러리:**

```bash
pip install flask requests
```

**주의:**

*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.
*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.
*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.
*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.
[INFO ] 2025-04-18 16:08:26.123 [http-nio-48080-exec-4] ChatController - 사용자 메시지 저장 완료: 9
[INFO ] 2025-04-18 16:08:26.126 [http-nio-48080-exec-4] ChatController - AI 메시지 저장 완료: 10
[INFO ] 2025-04-18 16:08:26.128 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:08:55.845 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:08:55.847 [http-nio-48080-exec-10] ChatRoomController - 채팅창 삭제 요청 - ID: 1
[WARN ] 2025-04-18 16:08:55.878 [http-nio-48080-exec-10] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 16:08:55.878 [http-nio-48080-exec-10] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 16:08:55.887 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/1
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 16:08:55.888 [http-nio-48080-exec-10] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 16:19:07.750 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:19:07.752 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:19:07.757 [http-nio-48080-exec-9] ChatRoomController - 총 1명의 채팅창 조회됨
[INFO ] 2025-04-18 16:19:07.759 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:19:08.566 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:19:08.581 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:23:15.906 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:23:15.907 [http-nio-48080-exec-1] ChatRoomController - 채팅창 삭제 요청 - ID: 1
[WARN ] 2025-04-18 16:23:15.913 [http-nio-48080-exec-1] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 16:23:15.913 [http-nio-48080-exec-1] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 16:23:15.915 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/1
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 16:23:15.915 [http-nio-48080-exec-1] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 16:23:58.796 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:23:58.797 [http-nio-48080-exec-3] ChatRoomController - 채팅창 삭제 요청 - ID: 1
[WARN ] 2025-04-18 16:23:58.800 [http-nio-48080-exec-3] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 16:23:58.800 [http-nio-48080-exec-3] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 16:23:58.801 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/1
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 16:23:58.801 [http-nio-48080-exec-3] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 16:25:13.709 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:25:13.717 [http-nio-48080-exec-2] ChatRoomController - 신규 채팅창 등록 완료: 2
[INFO ] 2025-04-18 16:25:13.718 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 2,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T15:54:57.328249",
    "updatedAt" : "2025-04-18T15:54:57.328249"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T16:25:13.7143012",
  "updatedAt" : "2025-04-18T16:25:13.7143012"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:25:13.781 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:25:13.786 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:25:15.003 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:25:15.012 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:25:15.565 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:25:15.570 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:25:18.290 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=69
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:25:18.294 [http-nio-48080-exec-10] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=2, msgQuestion=안녕, msgList=)
[INFO ] 2025-04-18 16:25:19.604 [http-nio-48080-exec-10] ChatController - AI 응답 수신: 안녕하세요! 무엇을 도와드릴까요? 😊

[INFO ] 2025-04-18 16:25:19.608 [http-nio-48080-exec-10] ChatController - 사용자 메시지 저장 완료: 11
[INFO ] 2025-04-18 16:25:19.609 [http-nio-48080-exec-10] ChatController - AI 메시지 저장 완료: 12
[INFO ] 2025-04-18 16:25:19.611 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "안녕하세요! 무엇을 도와드릴까요? 😊\n"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:25:21.740 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:25:21.749 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:29:11.875 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:29:11.875 [http-nio-48080-exec-8] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:29:11.879 [http-nio-48080-exec-8] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:29:11.881 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:29:15.678 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:29:15.679 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:29:15.683 [http-nio-48080-exec-1] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:29:15.684 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:29:30.066 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:29:30.067 [http-nio-48080-exec-3] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:29:30.069 [http-nio-48080-exec-3] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:29:30.070 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:29:47.994 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:29:47.995 [http-nio-48080-exec-2] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:29:47.998 [http-nio-48080-exec-2] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:29:48.000 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:29:59.628 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:29:59.630 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:29:59.632 [http-nio-48080-exec-6] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:29:59.633 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:30:14.451 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:30:14.451 [http-nio-48080-exec-5] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:30:14.454 [http-nio-48080-exec-5] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:30:14.455 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:30:20.321 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=35
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:30:20.323 [http-nio-48080-exec-4] MemberController - 로그인 시도 - ID: qweqw
[WARN ] 2025-04-18 16:30:20.324 [http-nio-48080-exec-4] MemberController - 로그인 실패 - 잘못된 자격증명: qweqw
[INFO ] 2025-04-18 16:30:20.325 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 401
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Invalid credentials
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:30:33.028 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=36
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:30:33.030 [http-nio-48080-exec-10] MemberController - 로그인 시도 - ID: admin
[INFO ] 2025-04-18 16:30:33.031 [http-nio-48080-exec-10] MemberController - 로그인 성공 - ID: admin, 이메일: admin@1234
[INFO ] 2025-04-18 16:30:33.032 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 관리자
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:30:33.051 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:30:33.051 [http-nio-48080-exec-9] MemberController - 받은 id: admin
[INFO ] 2025-04-18 16:30:33.055 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin
  ◀ Body     : {
  "id" : "admin",
  "passwordHash" : "1234",
  "email" : "admin@1234",
  "name" : "관리자",
  "createdAt" : "2025-04-18T15:54:57.328249",
  "updatedAt" : "2025-04-18T15:54:57.328249"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:30:33.089 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:30:33.089 [http-nio-48080-exec-7] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:30:33.092 [http-nio-48080-exec-7] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:30:33.093 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:30:35.437 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:30:35.446 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:30:37.609 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:30:37.610 [http-nio-48080-exec-1] ChatRoomController - 채팅창 삭제 요청 - ID: 1
[WARN ] 2025-04-18 16:30:37.613 [http-nio-48080-exec-1] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 16:30:37.614 [http-nio-48080-exec-1] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 16:30:37.614 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/1
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 16:30:37.615 [http-nio-48080-exec-1] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(1 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 16:31:34.031 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:31:34.031 [http-nio-48080-exec-2] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:31:34.034 [http-nio-48080-exec-2] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:31:34.036 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:31:36.254 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:31:36.254 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:31:36.256 [http-nio-48080-exec-6] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:31:36.258 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:31:36.853 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:31:36.861 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:31:38.520 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:31:38.525 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 11,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:25:19.60467"
}, {
  "id" : 12,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:25:19.60871"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:31:40.127 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:31:40.128 [http-nio-48080-exec-10] ChatRoomController - 채팅창 삭제 요청 - ID: 2
[WARN ] 2025-04-18 16:31:40.131 [http-nio-48080-exec-10] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 16:31:40.131 [http-nio-48080-exec-10] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 16:31:40.132 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/2
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 16:31:40.132 [http-nio-48080-exec-10] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 16:32:00.366 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:32:00.367 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:32:00.369 [http-nio-48080-exec-9] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:32:00.371 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:32:02.164 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:32:02.170 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 11,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:25:19.60467"
}, {
  "id" : 12,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:25:19.60871"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:32:03.963 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:32:03.963 [http-nio-48080-exec-8] ChatRoomController - 채팅창 삭제 요청 - ID: 2
[WARN ] 2025-04-18 16:32:03.967 [http-nio-48080-exec-8] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 16:32:03.967 [http-nio-48080-exec-8] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 16:32:03.967 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/2
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 16:32:03.969 [http-nio-48080-exec-8] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 16:32:14.546 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:32:14.547 [http-nio-48080-exec-1] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:32:14.550 [http-nio-48080-exec-1] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:32:14.551 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:32:16.205 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:32:16.212 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:32:33.985 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=35
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:32:33.986 [http-nio-48080-exec-2] MemberController - 로그인 시도 - ID: asdwe
[WARN ] 2025-04-18 16:32:33.987 [http-nio-48080-exec-2] MemberController - 로그인 실패 - 잘못된 자격증명: asdwe
[INFO ] 2025-04-18 16:32:33.995 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 401
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Invalid credentials
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:33:06.178 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=42
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:33:06.179 [http-nio-48080-exec-6] MemberController - 로그인 시도 - ID: ㅇㅂㅈㄷ
[WARN ] 2025-04-18 16:33:06.182 [http-nio-48080-exec-6] MemberController - 로그인 실패 - 잘못된 자격증명: ㅇㅂㅈㄷ
[INFO ] 2025-04-18 16:33:06.182 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 401
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Invalid credentials
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:33:13.092 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=36
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:33:13.092 [http-nio-48080-exec-5] MemberController - 로그인 시도 - ID: admin
[INFO ] 2025-04-18 16:33:13.094 [http-nio-48080-exec-5] MemberController - 로그인 성공 - ID: admin, 이메일: admin@1234
[INFO ] 2025-04-18 16:33:13.094 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 관리자
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:33:13.110 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:33:13.110 [http-nio-48080-exec-4] MemberController - 받은 id: admin
[INFO ] 2025-04-18 16:33:13.112 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin
  ◀ Body     : {
  "id" : "admin",
  "passwordHash" : "1234",
  "email" : "admin@1234",
  "name" : "관리자",
  "createdAt" : "2025-04-18T15:54:57.328249",
  "updatedAt" : "2025-04-18T15:54:57.328249"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:33:13.148 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 16:33:13.148 [http-nio-48080-exec-10] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 16:33:13.151 [http-nio-48080-exec-10] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 16:33:13.152 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:33:15.503 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:33:15.511 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:39:12.106 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:39:12.116 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:39:12.137 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:39:12.145 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:39:12.195 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:39:12.197 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:39:12.207 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:39:12.453 [http-nio-48080-exec-6] AbstractOpenApiResource - Init duration for springdoc-openapi is: 239 ms
[INFO ] 2025-04-18 16:39:12.472 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:39:21.026 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 16:39:21.027 [http-nio-48080-exec-5] MemberController - 받은 id: admin
[INFO ] 2025-04-18 16:39:21.029 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin
  ◀ Body     : {
  "id" : "admin",
  "passwordHash" : "1234",
  "email" : "admin@1234",
  "name" : "관리자",
  "createdAt" : "2025-04-18T15:54:57.328249",
  "updatedAt" : "2025-04-18T15:54:57.328249"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:08:24.144 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:08:24.145 [http-nio-48080-exec-9] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 17:08:24.150 [http-nio-48080-exec-9] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 17:08:24.151 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:15:34.004 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:15:34.006 [http-nio-48080-exec-8] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 17:15:34.010 [http-nio-48080-exec-8] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 17:15:34.013 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:15:43.015 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=36
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:15:43.018 [http-nio-48080-exec-1] MemberController - 로그인 시도 - ID: admin
[INFO ] 2025-04-18 17:15:43.020 [http-nio-48080-exec-1] MemberController - 로그인 성공 - ID: admin, 이메일: admin@1234
[INFO ] 2025-04-18 17:15:43.021 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 관리자
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:15:43.030 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:15:43.030 [http-nio-48080-exec-3] MemberController - 받은 id: admin
[INFO ] 2025-04-18 17:15:43.032 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin
  ◀ Body     : {
  "id" : "admin",
  "passwordHash" : "1234",
  "email" : "admin@1234",
  "name" : "관리자",
  "createdAt" : "2025-04-18T15:54:57.328249",
  "updatedAt" : "2025-04-18T15:54:57.328249"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:15:43.052 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:15:43.052 [http-nio-48080-exec-2] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 17:15:43.055 [http-nio-48080-exec-2] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 17:15:43.056 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:15:45.568 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:15:45.577 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:15:47.163 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:15:47.169 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 11,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:25:19.60467"
}, {
  "id" : 12,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:25:19.60871"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:16:34.592 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=1799
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:16:34.594 [http-nio-48080-exec-4] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=2, msgQuestion=아래 코드 수정할 부분 있어?

const ChatInput = ({
  isLoggedIn,
  input,
  onChange,
  onKeyDown,
  textareaRef,
  onSend,
  isLoading,
  selectedConversationId, // 추가됨
}) => {
  const canChat = isLoggedIn && selectedConversationId;

  return (
    <div className="absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300">
      <div className="max-w-3xl mx-auto">
        {canChat ? (
          <div className="bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400">
            <textarea
              ref={textareaRef}
              rows={1}
              value={input}
              onChange={onChange}
              onKeyDown={onKeyDown}
              disabled={isLoading}
              placeholder="메시지를 입력하세요."
              className="w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed"
              style={{ height: "24px" }}
            />
            <div className="flex justify-end mt-2">
              <button
                type="button"
                className="text-zinc-600 hover:text-black text-sm"
                onClick={onSend}
                disabled={isLoading}
              >
                전송
              </button>
            </div>
          </div>
        ) : (
          <div className="text-center py-4 text-gray-500">
            {isLoggedIn
              ? "채팅을 먼저 선택해주세요."
              : "로그인 후 채팅이 가능합니다."}
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatInput;, msgList=)
[ERROR] 2025-04-18 17:16:34.772 [http-nio-48080-exec-4] AiService - AI 서버 호출 실패
org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 Internal Server Error on POST request for "http://192.168.0.145:8000/ask": "Internal Server Error"
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:102) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:189) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:147) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:953) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:902) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:801) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:549) ~[spring-web-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.service.AiService.sendMessage(AiService.java:38) ~[main/:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:61) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 17:16:34.777 [http-nio-48080-exec-4] ChatController - AI 응답 수신: AI 응답 실패
[INFO ] 2025-04-18 17:16:34.779 [http-nio-48080-exec-4] ChatController - 사용자 메시지 저장 완료: 13
[INFO ] 2025-04-18 17:16:34.780 [http-nio-48080-exec-4] ChatController - AI 메시지 저장 완료: 14
[INFO ] 2025-04-18 17:16:34.782 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "AI 응답 실패"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:16:49.630 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=69
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:16:49.632 [http-nio-48080-exec-9] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=2, msgQuestion=뭐야, msgList=)
[ERROR] 2025-04-18 17:16:49.680 [http-nio-48080-exec-9] AiService - AI 서버 호출 실패
org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 Internal Server Error on POST request for "http://192.168.0.145:8000/ask": "Internal Server Error"
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:102) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:189) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:147) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:953) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:902) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:801) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:549) ~[spring-web-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.service.AiService.sendMessage(AiService.java:38) ~[main/:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:61) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 17:16:49.682 [http-nio-48080-exec-9] ChatController - AI 응답 수신: AI 응답 실패
[INFO ] 2025-04-18 17:16:49.683 [http-nio-48080-exec-9] ChatController - 사용자 메시지 저장 완료: 15
[INFO ] 2025-04-18 17:16:49.684 [http-nio-48080-exec-9] ChatController - AI 메시지 저장 완료: 16
[INFO ] 2025-04-18 17:16:49.685 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "AI 응답 실패"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:16:54.649 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/index.html
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, cache-control=max-age=0, upgrade-insecure-requests=1, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7, if-modified-since=Wed, 12 Feb 2025 07:59:21 GMT
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:16:54.651 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 304
  ◀ URI      : /swagger-ui/index.html
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:16:54.669 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /swagger-ui/swagger-initializer.js
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:16:54.671 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /swagger-ui/swagger-initializer.js
  ◀ Body     : JSON pretty printing 실패 - raw: window.onload = function() {
  //<editor-fold desc="Changeable Configuration Block">

  // the following lines will be replaced by docker/configurator, when it runs in a docker-container
  window.ui = SwaggerUIBundle({
    url: "https://petstore.swagger.io/v2/swagger.json",
    dom_id: '#swagger-ui',
    deepLinking: true,
    presets: [
      SwaggerUIBundle.presets.apis,
      SwaggerUIStandalonePreset
    ],
    plugins: [
      SwaggerUIBundle.plugins.DownloadUrl
    ],
    layout: "StandaloneLayout" ,

  "configUrl" : "/v3/api-docs/swagger-config",
  "validatorUrl" : ""

  });

  //</editor-fold>
};

──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:16:54.726 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs/swagger-config
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:16:54.728 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs/swagger-config
  ◀ Body     : {
  "configUrl" : "/v3/api-docs/swagger-config",
  "oauth2RedirectUrl" : "http://192.168.0.24:48080/swagger-ui/oauth2-redirect.html",
  "url" : "/v3/api-docs",
  "validatorUrl" : ""
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:16:54.739 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /v3/api-docs
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=application/json,*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:16:54.748 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /v3/api-docs
  ◀ Body     : {
  "openapi" : "3.0.1",
  "info" : {
    "title" : "OpenAPI definition",
    "version" : "v0"
  },
  "servers" : [ {
    "url" : "http://192.168.0.24:48080",
    "description" : "Generated server url"
  } ],
  "paths" : {
    "/admin/members/{id}" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 정보 조회",
        "operationId" : "read",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MemberReadResDto"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 수정",
        "operationId" : "update",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberUpdateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 삭제",
        "operationId" : "delete_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/api/chatrooms" : {
      "post" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 생성",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatRoomCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatRoom"
                }
              }
            }
          }
        }
      }
    },
    "/api/chat" : {
      "post" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "createChat",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChatCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChatCreateResDto"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 등록",
        "operationId" : "create_1",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberCreateReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Member"
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/login" : {
      "post" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 로그인",
        "operationId" : "login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MemberLoginReqDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/list/{memberId}" : {
      "get" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 목록 조회",
        "operationId" : "list",
        "parameters" : [ {
          "name" : "memberId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatRoomListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat/list/{chatRoomId}" : {
      "get" : {
        "tags" : [ "chat-controller" ],
        "summary" : "채팅 생성(송/수신)",
        "operationId" : "chatList",
        "parameters" : [ {
          "name" : "chatRoomId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "request",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ChatListReqDto"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ChatListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/members/list" : {
      "get" : {
        "tags" : [ "member-controller" ],
        "summary" : "회원 목록 조회",
        "operationId" : "list_1",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MemberListResDto"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chatrooms/{id}" : {
      "delete" : {
        "tags" : [ "chat-room-controller" ],
        "summary" : "채팅창 삭제",
        "operationId" : "delete",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "MemberUpdateReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "Member" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatRoomCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "memberId" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "devLang" : {
            "type" : "string"
          }
        }
      },
      "ChatRoom" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "member" : {
            "$ref" : "#/components/schemas/Member"
          },
          "title" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatCreateReqDto" : {
        "type" : "object",
        "properties" : {
          "userId" : {
            "type" : "string"
          },
          "chatRoomId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "msgQuestion" : {
            "type" : "string"
          },
          "msgList" : {
            "type" : "string"
          }
        }
      },
      "ChatCreateResDto" : {
        "type" : "object",
        "properties" : {
          "answer" : {
            "type" : "string"
          }
        }
      },
      "MemberCreateReqDto" : {
        "required" : [ "id" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "MemberLoginReqDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          }
        }
      },
      "ChatRoomListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "title" : {
            "type" : "string"
          }
        }
      },
      "ChatListReqDto" : {
        "type" : "object",
        "properties" : {
          "before" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "ChatListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "message" : {
            "type" : "string"
          },
          "senderType" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberReadResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "passwordHash" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "MemberListResDto" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      }
    }
  }
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:17:11.192 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admim
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:17:11.192 [http-nio-48080-exec-2] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 17:17:11.194 [http-nio-48080-exec-2] ChatRoomController - 총 0명의 채팅창 조회됨
[INFO ] 2025-04-18 17:17:11.195 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admim
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:17:19.989 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:17:19.990 [http-nio-48080-exec-6] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 17:17:19.992 [http-nio-48080-exec-6] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 17:17:19.994 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:17:42.358 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=86, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:17:42.359 [http-nio-48080-exec-5] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=2, msgQuestion=안녕, msgList=)
[ERROR] 2025-04-18 17:17:42.409 [http-nio-48080-exec-5] AiService - AI 서버 호출 실패
org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 Internal Server Error on POST request for "http://192.168.0.145:8000/ask": "Internal Server Error"
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:102) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:189) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:147) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:953) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:902) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:801) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:549) ~[spring-web-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.service.AiService.sendMessage(AiService.java:38) ~[main/:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:61) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 17:17:42.410 [http-nio-48080-exec-5] ChatController - AI 응답 수신: AI 응답 실패
[INFO ] 2025-04-18 17:17:42.412 [http-nio-48080-exec-5] ChatController - 사용자 메시지 저장 완료: 17
[INFO ] 2025-04-18 17:17:42.413 [http-nio-48080-exec-5] ChatController - AI 메시지 저장 완료: 18
[INFO ] 2025-04-18 17:17:42.414 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "AI 응답 실패"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:18:51.615 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-length=86, user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36, accept=*/*, content-type=application/json, origin=http://192.168.0.24:48080, referer=http://192.168.0.24:48080/swagger-ui/index.html, accept-encoding=gzip, deflate, accept-language=ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:18:51.616 [http-nio-48080-exec-7] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=2, msgQuestion=안녕, msgList=)
[ERROR] 2025-04-18 17:18:51.697 [http-nio-48080-exec-7] AiService - AI 서버 호출 실패
org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 Internal Server Error on POST request for "http://192.168.0.145:8000/ask": "Internal Server Error"
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:102) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:189) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:147) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:953) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:902) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:801) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:549) ~[spring-web-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.service.AiService.sendMessage(AiService.java:38) ~[main/:?]
	at io.iteyes.genaicodebooster.api.controller.ChatController.createChat(ChatController.java:61) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:727) ~[spring-aop-6.2.5.jar:6.2.5]
	at io.iteyes.genaicodebooster.api.controller.ChatController$$SpringCGLIB$$0.createChat(<generated>) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 17:18:51.699 [http-nio-48080-exec-7] ChatController - AI 응답 수신: AI 응답 실패
[INFO ] 2025-04-18 17:18:51.700 [http-nio-48080-exec-7] ChatController - 사용자 메시지 저장 완료: 19
[INFO ] 2025-04-18 17:18:51.701 [http-nio-48080-exec-7] ChatController - AI 메시지 저장 완료: 20
[INFO ] 2025-04-18 17:18:51.703 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "AI 응답 실패"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:23:49.648 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : POST
  ▶ URI      : /admin/members/login
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=36
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:23:49.649 [http-nio-48080-exec-1] MemberController - 로그인 시도 - ID: admin
[INFO ] 2025-04-18 17:23:49.652 [http-nio-48080-exec-1] MemberController - 로그인 성공 - ID: admin, 이메일: admin@1234
[INFO ] 2025-04-18 17:23:49.653 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /admin/members/login
  ◀ Body     : JSON pretty printing 실패 - raw: Login success for: 관리자
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:23:49.673 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : GET
  ▶ URI      : /admin/members/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:23:49.674 [http-nio-48080-exec-3] MemberController - 받은 id: admin
[INFO ] 2025-04-18 17:23:49.676 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /admin/members/admin
  ◀ Body     : {
  "id" : "admin",
  "passwordHash" : "1234",
  "email" : "admin@1234",
  "name" : "관리자",
  "createdAt" : "2025-04-18T15:54:57.328249",
  "updatedAt" : "2025-04-18T15:54:57.328249"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:23:49.717 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:23:49.718 [http-nio-48080-exec-2] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 17:23:49.720 [http-nio-48080-exec-2] ChatRoomController - 총 2명의 채팅창 조회됨
[INFO ] 2025-04-18 17:23:49.721 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:23:54.110 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:23:54.116 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 11,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:25:19.60467"
}, {
  "id" : 12,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:25:19.60871"
}, {
  "id" : 13,
  "message" : "아래 코드 수정할 부분 있어?\n\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const canChat = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {canChat ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <textarea\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: \"24px\" }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className=\"text-zinc-600 hover:text-black text-sm\"\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:16:34.777014"
}, {
  "id" : 14,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:16:34.78043"
}, {
  "id" : 15,
  "message" : "뭐야",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:16:49.682429"
}, {
  "id" : 16,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:16:49.683885"
}, {
  "id" : 17,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:17:42.411748"
}, {
  "id" : 18,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:17:42.412871"
}, {
  "id" : 19,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:18:51.699807"
}, {
  "id" : 20,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:18:51.701806"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:23:57.909 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=69
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:23:57.910 [http-nio-48080-exec-5] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=2, msgQuestion=안녕, msgList=)
[INFO ] 2025-04-18 17:25:00.070 [http-nio-48080-exec-5] ChatController - AI 응답 수신: 안녕하세요! 무엇을 도와드릴까요? 😊

[INFO ] 2025-04-18 17:25:00.072 [http-nio-48080-exec-5] ChatController - 사용자 메시지 저장 완료: 21
[INFO ] 2025-04-18 17:25:00.073 [http-nio-48080-exec-5] ChatController - AI 메시지 저장 완료: 22
[INFO ] 2025-04-18 17:25:00.074 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "안녕하세요! 무엇을 도와드릴까요? 😊\n"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:25:17.191 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=1799
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:25:17.192 [http-nio-48080-exec-10] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=2, msgQuestion=아래 코드 수정할 부분 있어?

const ChatInput = ({
  isLoggedIn,
  input,
  onChange,
  onKeyDown,
  textareaRef,
  onSend,
  isLoading,
  selectedConversationId, // 추가됨
}) => {
  const canChat = isLoggedIn && selectedConversationId;

  return (
    <div className="absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300">
      <div className="max-w-3xl mx-auto">
        {canChat ? (
          <div className="bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400">
            <textarea
              ref={textareaRef}
              rows={1}
              value={input}
              onChange={onChange}
              onKeyDown={onKeyDown}
              disabled={isLoading}
              placeholder="메시지를 입력하세요."
              className="w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed"
              style={{ height: "24px" }}
            />
            <div className="flex justify-end mt-2">
              <button
                type="button"
                className="text-zinc-600 hover:text-black text-sm"
                onClick={onSend}
                disabled={isLoading}
              >
                전송
              </button>
            </div>
          </div>
        ) : (
          <div className="text-center py-4 text-gray-500">
            {isLoggedIn
              ? "채팅을 먼저 선택해주세요."
              : "로그인 후 채팅이 가능합니다."}
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatInput;, msgList=)
[INFO ] 2025-04-18 17:26:59.114 [http-nio-48080-exec-10] ChatController - AI 응답 수신: 코드 잘 작성하셨습니다. 몇 가지 개선할 부분과 고려할 부분을 제안합니다.

**1. 스타일링 개선:**

*   **textarea 높이 조절:** `style={{ height: "24px" }}` 부분은 textarea의 초기 높이를 고정값으로 설정하고 있습니다. 사용자가 입력하는 내용에 따라 높이가 자동으로 조절되도록 `textarea`의 높이를 `resize-y` 속성을 활용하거나, JavaScript를 사용하여 내용 길이에 따라 높이를 동적으로 조절하는 것을 고려할 수 있습니다.  이렇게 하면 사용자 경험이 더 자연스러워집니다.

*   **전송 버튼 스타일:** `text-zinc-600 hover:text-black`은 기본 스타일과 호버 스타일만 제공합니다.  활성화/비활성화 상태에 따른 스타일 변화를 추가하여 시각적인 피드백을 줄 수 있습니다.  예를 들어, `isLoading` 상태일 때 버튼의 색상을 흐리게 하거나, 텍스트를 변경하는 등의 효과를 줄 수 있습니다.

**2. 접근성 (Accessibility) 고려:**

*   **textarea label:**  textarea는 어떤 내용을 입력해야 하는지 명확하게 알려주는 `<label>` 요소를 연결하는 것이 좋습니다.  시각 장애가 있는 사용자가 screen reader를 통해 내용을 이해하는 데 도움이 됩니다.
*   **전송 버튼의 의미 전달:**  전송 버튼의 `type` 속성을 명시적으로 설정하는 것이 좋습니다.  기본적으로 버튼은 `type="submit"`로 설정되어야 할 수도 있습니다.  `type="button"`은 버튼이 폼 제출과 관련된 동작을 하지 않도록 지정합니다.
*   **키보드 접근성:**  `onKeyDown` 핸들러를 통해 키보드 접근성을 개선할 수 있습니다.  예를 들어, `Enter` 키를 누르면 `onSend` 함수가 실행되도록 할 수 있습니다.

**3. 코드 가독성 향상:**

*   **변수 이름:**  `canChat` 변수는 코드의 의미를 명확하게 전달하지만, 더 구체적인 이름을 사용할 수 있습니다.  예를 들어, `isConversationSelectedAndLoggedIn`와 같이 좀 더 명확하게 표현할 수 있습니다.
*   **조건부 렌더링:** 조건부 렌더링(`canChat ? ... : ...`)을 더 간결하게 표현하기 위해 삼항 연산자를 더 간단하게 만들거나, `&&` 연산자를 사용할 수 있습니다.
*   **CSS 클래스 이름:** CSS 클래스 이름은 일관성을 유지하는 것이 중요합니다.  예를 들어, `bg-zinc-200`와 같은 스타일을 다른 컴포넌트에서도 동일하게 사용하는 것이 좋습니다.

**수정된 코드 예시 (참고):**

```javascript
const ChatInput = ({
  isLoggedIn,
  input,
  onChange,
  onKeyDown,
  textareaRef,
  onSend,
  isLoading,
  selectedConversationId, // 추가됨
}) => {
  const isConversationSelectedAndLoggedIn = isLoggedIn && selectedConversationId;

  return (
    <div className="absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300">
      <div className="max-w-3xl mx-auto">
        {isConversationSelectedAndLoggedIn ? (
          <div className="bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400">
            <label htmlFor="chat-input" className="sr-only">
              메시지를 입력하세요.
            </label>
            <textarea
              id="chat-input"
              ref={textareaRef}
              rows={1}
              value={input}
              onChange={onChange}
              onKeyDown={onKeyDown}
              disabled={isLoading}
              placeholder="메시지를 입력하세요."
              className="w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed"
              style={{ height: '24px' }}
            />
            <div className="flex justify-end mt-2">
              <button
                type="button"
                className={`text-${isLoading ? 'gray-400' : 'zinc-600'} hover:text-black text-sm ${
                  isLoading ? 'cursor-not-allowed opacity-50' : ''
                }`}
                onClick={onSend}
                disabled={isLoading}
              >
                전송
              </button>
            </div>
          </div>
        ) : (
          <div className="text-center py-4 text-gray-500">
            {isLoggedIn
              ? "채팅을 먼저 선택해주세요."
              : "로그인 후 채팅이 가능합니다."}
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatInput;
```

**참고:**

*   위 코드는 예시이며, 실제 구현에 따라 수정해야 합니다.
*   `textarea`의 높이를 자동으로 조절하려면 JavaScript를 사용하여 내용 길이에 따라 높이를 동적으로 조절해야 합니다.
*   CSS 클래스 이름을 일관성을 유지하는 것이 중요합니다.

이러한 개선 사항을 적용하면 코드의 품질이 향상되고 사용자 경험이 더 나아질 것입니다.
[INFO ] 2025-04-18 17:26:59.117 [http-nio-48080-exec-10] ChatController - 사용자 메시지 저장 완료: 23
[INFO ] 2025-04-18 17:26:59.118 [http-nio-48080-exec-10] ChatController - AI 메시지 저장 완료: 24
[INFO ] 2025-04-18 17:26:59.119 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "코드 잘 작성하셨습니다. 몇 가지 개선할 부분과 고려할 부분을 제안합니다.\n\n**1. 스타일링 개선:**\n\n*   **textarea 높이 조절:** `style={{ height: \"24px\" }}` 부분은 textarea의 초기 높이를 고정값으로 설정하고 있습니다. 사용자가 입력하는 내용에 따라 높이가 자동으로 조절되도록 `textarea`의 높이를 `resize-y` 속성을 활용하거나, JavaScript를 사용하여 내용 길이에 따라 높이를 동적으로 조절하는 것을 고려할 수 있습니다.  이렇게 하면 사용자 경험이 더 자연스러워집니다.\n\n*   **전송 버튼 스타일:** `text-zinc-600 hover:text-black`은 기본 스타일과 호버 스타일만 제공합니다.  활성화/비활성화 상태에 따른 스타일 변화를 추가하여 시각적인 피드백을 줄 수 있습니다.  예를 들어, `isLoading` 상태일 때 버튼의 색상을 흐리게 하거나, 텍스트를 변경하는 등의 효과를 줄 수 있습니다.\n\n**2. 접근성 (Accessibility) 고려:**\n\n*   **textarea label:**  textarea는 어떤 내용을 입력해야 하는지 명확하게 알려주는 `<label>` 요소를 연결하는 것이 좋습니다.  시각 장애가 있는 사용자가 screen reader를 통해 내용을 이해하는 데 도움이 됩니다.\n*   **전송 버튼의 의미 전달:**  전송 버튼의 `type` 속성을 명시적으로 설정하는 것이 좋습니다.  기본적으로 버튼은 `type=\"submit\"`로 설정되어야 할 수도 있습니다.  `type=\"button\"`은 버튼이 폼 제출과 관련된 동작을 하지 않도록 지정합니다.\n*   **키보드 접근성:**  `onKeyDown` 핸들러를 통해 키보드 접근성을 개선할 수 있습니다.  예를 들어, `Enter` 키를 누르면 `onSend` 함수가 실행되도록 할 수 있습니다.\n\n**3. 코드 가독성 향상:**\n\n*   **변수 이름:**  `canChat` 변수는 코드의 의미를 명확하게 전달하지만, 더 구체적인 이름을 사용할 수 있습니다.  예를 들어, `isConversationSelectedAndLoggedIn`와 같이 좀 더 명확하게 표현할 수 있습니다.\n*   **조건부 렌더링:** 조건부 렌더링(`canChat ? ... : ...`)을 더 간결하게 표현하기 위해 삼항 연산자를 더 간단하게 만들거나, `&&` 연산자를 사용할 수 있습니다.\n*   **CSS 클래스 이름:** CSS 클래스 이름은 일관성을 유지하는 것이 중요합니다.  예를 들어, `bg-zinc-200`와 같은 스타일을 다른 컴포넌트에서도 동일하게 사용하는 것이 좋습니다.\n\n**수정된 코드 예시 (참고):**\n\n```javascript\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const isConversationSelectedAndLoggedIn = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {isConversationSelectedAndLoggedIn ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <label htmlFor=\"chat-input\" className=\"sr-only\">\n              메시지를 입력하세요.\n            </label>\n            <textarea\n              id=\"chat-input\"\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: '24px' }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className={`text-${isLoading ? 'gray-400' : 'zinc-600'} hover:text-black text-sm ${\n                  isLoading ? 'cursor-not-allowed opacity-50' : ''\n                }`}\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;\n```\n\n**참고:**\n\n*   위 코드는 예시이며, 실제 구현에 따라 수정해야 합니다.\n*   `textarea`의 높이를 자동으로 조절하려면 JavaScript를 사용하여 내용 길이에 따라 높이를 동적으로 조절해야 합니다.\n*   CSS 클래스 이름을 일관성을 유지하는 것이 중요합니다.\n\n이러한 개선 사항을 적용하면 코드의 품질이 향상되고 사용자 경험이 더 나아질 것입니다."
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:28:06.772 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : DELETE
  ▶ URI      : /api/chatrooms/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:28:06.772 [http-nio-48080-exec-7] ChatRoomController - 채팅창 삭제 요청 - ID: 2
[WARN ] 2025-04-18 17:28:06.777 [http-nio-48080-exec-7] SqlExceptionHelper - SQL Error: 23503, SQLState: 23503
[ERROR] 2025-04-18 17:28:06.777 [http-nio-48080-exec-7] SqlExceptionHelper - Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
[INFO ] 2025-04-18 17:28:06.778 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/2
  ◀ Body     : {}
──────────────────────────────────────────────────────────
[ERROR] 2025-04-18 17:28:06.778 [http-nio-48080-exec-7] [dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]] [delete from chat_rooms where id=?]; SQL [delete from chat_rooms where id=?]; constraint [fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT)); SQL statement:
delete from chat_rooms where id=? [23503-232]]] with root cause
org.h2.jdbc.JdbcSQLIntegrityConstraintViolationException: Referential integrity constraint violation: "fk23gnfyyutie4dxee1pbby5nfi: public.chats FOREIGN KEY(chat_room_id) REFERENCES public.chat_rooms(id) (CAST(2 AS BIGINT))"; SQL statement:
delete from chat_rooms where id=? [23503-232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:520) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:223) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.message.DbException.get(DbException.java:199) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:362) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRowRefTable(ConstraintReferential.java:379) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.constraint.ConstraintReferential.checkRow(ConstraintReferential.java:253) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireConstraints(Table.java:1227) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.table.Table.fireAfterRow(Table.java:1245) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.Delete.update(Delete.java:92) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.dml.DataChangeStatement.update(DataChangeStatement.java:74) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.CommandContainer.update(CommandContainer.java:139) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:304) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.command.Command.executeUpdate(Command.java:248) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:213) ~[h2-2.3.232.jar:2.3.232]
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:172) ~[h2-2.3.232.jar:2.3.232]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.1.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.1.0.jar:?]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:134) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:55) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.delete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:644) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:511) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:414) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1429) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:491) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2354) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1978) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.6.11.Final.jar:6.6.11.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:562) ~[spring-orm-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:795) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:758) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:698) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:416) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138) ~[spring-tx-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:165) ~[spring-data-jpa-3.4.4.jar:3.4.4]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.5.jar:6.2.5]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223) ~[spring-aop-6.2.5.jar:6.2.5]
	at jdk.proxy4/jdk.proxy4.$Proxy185.deleteById(Unknown Source) ~[?:?]
	at io.iteyes.genaicodebooster.api.controller.ChatRoomController.delete(ChatRoomController.java:51) ~[main/:?]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.5.jar:6.2.5]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.39.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at io.iteyes.genaicodebooster.common.RequestCachingFilter.doFilterInternal(RequestCachingFilter.java:25) ~[main/:?]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:114) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.5.jar:6.2.5]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.5.jar:6.2.5]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.39.jar:10.1.39]
	at java.base/java.lang.Thread.run(Thread.java:1583) [?:?]
[INFO ] 2025-04-18 17:29:48.804 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : POST
  ▶ URI      : /api/chatrooms
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=56
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:29:48.812 [http-nio-48080-exec-8] ChatRoomController - 신규 채팅창 등록 완료: 3
[INFO ] 2025-04-18 17:29:48.813 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms
  ◀ Body     : {
  "id" : 3,
  "member" : {
    "id" : "admin",
    "email" : "admin@1234",
    "passwordHash" : "1234",
    "name" : "관리자",
    "createdAt" : "2025-04-18T15:54:57.328249",
    "updatedAt" : "2025-04-18T15:54:57.328249"
  },
  "title" : "New chat",
  "createdAt" : "2025-04-18T17:29:48.8089498",
  "updatedAt" : "2025-04-18T17:29:48.8089498"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:29:48.833 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:29:48.838 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:29:55.777 [http-nio-48080-exec-3] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-3
  ▶ Method   : POST
  ▶ URI      : /api/chat
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate, content-length=76
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:29:55.778 [http-nio-48080-exec-3] ChatController - 채팅 생성 요청 수신: ChatCreateReqDto(userId=admin, chatRoomId=3, msgQuestion=신규 채팅, msgList=)
[INFO ] 2025-04-18 17:29:57.839 [http-nio-48080-exec-3] ChatController - AI 응답 수신: 안녕하세요! 무엇을 도와드릴까요? 어떤 질문이든 편하게 물어보세요. 😊

[INFO ] 2025-04-18 17:29:57.841 [http-nio-48080-exec-3] ChatController - 사용자 메시지 저장 완료: 25
[INFO ] 2025-04-18 17:29:57.842 [http-nio-48080-exec-3] ChatController - AI 메시지 저장 완료: 26
[INFO ] 2025-04-18 17:29:57.843 [http-nio-48080-exec-3] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-3
  ◀ Status   : 200
  ◀ URI      : /api/chat
  ◀ Body     : {
  "answer" : "안녕하세요! 무엇을 도와드릴까요? 어떤 질문이든 편하게 물어보세요. 😊\n"
}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:00.658 [http-nio-48080-exec-2] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-2
  ▶ Method   : GET
  ▶ URI      : /api/chatrooms/list/admin
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[DEBUG] 2025-04-18 17:30:00.658 [http-nio-48080-exec-2] ChatRoomController - 채팅창 목록 조회 요청
[INFO ] 2025-04-18 17:30:00.661 [http-nio-48080-exec-2] ChatRoomController - 총 3명의 채팅창 조회됨
[INFO ] 2025-04-18 17:30:00.662 [http-nio-48080-exec-2] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-2
  ◀ Status   : 200
  ◀ URI      : /api/chatrooms/list/admin
  ◀ Body     : [ {
  "id" : 1,
  "title" : "New chat"
}, {
  "id" : 2,
  "title" : "New chat"
}, {
  "id" : 3,
  "title" : "New chat"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:01.348 [http-nio-48080-exec-6] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-6
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:01.355 [http-nio-48080-exec-6] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-6
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:02.663 [http-nio-48080-exec-4] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-4
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:02.669 [http-nio-48080-exec-4] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-4
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 25,
  "message" : "신규 채팅",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:29:57.839753"
}, {
  "id" : 26,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 어떤 질문이든 편하게 물어보세요. 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:29:57.841324"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:03.894 [http-nio-48080-exec-5] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-5
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:03.900 [http-nio-48080-exec-5] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-5
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 11,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:25:19.60467"
}, {
  "id" : 12,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:25:19.60871"
}, {
  "id" : 13,
  "message" : "아래 코드 수정할 부분 있어?\n\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const canChat = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {canChat ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <textarea\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: \"24px\" }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className=\"text-zinc-600 hover:text-black text-sm\"\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:16:34.777014"
}, {
  "id" : 14,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:16:34.78043"
}, {
  "id" : 15,
  "message" : "뭐야",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:16:49.682429"
}, {
  "id" : 16,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:16:49.683885"
}, {
  "id" : 17,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:17:42.411748"
}, {
  "id" : 18,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:17:42.412871"
}, {
  "id" : 19,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:18:51.699807"
}, {
  "id" : 20,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:18:51.701806"
}, {
  "id" : 21,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:25:00.071499"
}, {
  "id" : 22,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:25:00.073498"
}, {
  "id" : 23,
  "message" : "아래 코드 수정할 부분 있어?\n\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const canChat = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {canChat ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <textarea\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: \"24px\" }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className=\"text-zinc-600 hover:text-black text-sm\"\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:26:59.116076"
}, {
  "id" : 24,
  "message" : "코드 잘 작성하셨습니다. 몇 가지 개선할 부분과 고려할 부분을 제안합니다.\n\n**1. 스타일링 개선:**\n\n*   **textarea 높이 조절:** `style={{ height: \"24px\" }}` 부분은 textarea의 초기 높이를 고정값으로 설정하고 있습니다. 사용자가 입력하는 내용에 따라 높이가 자동으로 조절되도록 `textarea`의 높이를 `resize-y` 속성을 활용하거나, JavaScript를 사용하여 내용 길이에 따라 높이를 동적으로 조절하는 것을 고려할 수 있습니다.  이렇게 하면 사용자 경험이 더 자연스러워집니다.\n\n*   **전송 버튼 스타일:** `text-zinc-600 hover:text-black`은 기본 스타일과 호버 스타일만 제공합니다.  활성화/비활성화 상태에 따른 스타일 변화를 추가하여 시각적인 피드백을 줄 수 있습니다.  예를 들어, `isLoading` 상태일 때 버튼의 색상을 흐리게 하거나, 텍스트를 변경하는 등의 효과를 줄 수 있습니다.\n\n**2. 접근성 (Accessibility) 고려:**\n\n*   **textarea label:**  textarea는 어떤 내용을 입력해야 하는지 명확하게 알려주는 `<label>` 요소를 연결하는 것이 좋습니다.  시각 장애가 있는 사용자가 screen reader를 통해 내용을 이해하는 데 도움이 됩니다.\n*   **전송 버튼의 의미 전달:**  전송 버튼의 `type` 속성을 명시적으로 설정하는 것이 좋습니다.  기본적으로 버튼은 `type=\"submit\"`로 설정되어야 할 수도 있습니다.  `type=\"button\"`은 버튼이 폼 제출과 관련된 동작을 하지 않도록 지정합니다.\n*   **키보드 접근성:**  `onKeyDown` 핸들러를 통해 키보드 접근성을 개선할 수 있습니다.  예를 들어, `Enter` 키를 누르면 `onSend` 함수가 실행되도록 할 수 있습니다.\n\n**3. 코드 가독성 향상:**\n\n*   **변수 이름:**  `canChat` 변수는 코드의 의미를 명확하게 전달하지만, 더 구체적인 이름을 사용할 수 있습니다.  예를 들어, `isConversationSelectedAndLoggedIn`와 같이 좀 더 명확하게 표현할 수 있습니다.\n*   **조건부 렌더링:** 조건부 렌더링(`canChat ? ... : ...`)을 더 간결하게 표현하기 위해 삼항 연산자를 더 간단하게 만들거나, `&&` 연산자를 사용할 수 있습니다.\n*   **CSS 클래스 이름:** CSS 클래스 이름은 일관성을 유지하는 것이 중요합니다.  예를 들어, `bg-zinc-200`와 같은 스타일을 다른 컴포넌트에서도 동일하게 사용하는 것이 좋습니다.\n\n**수정된 코드 예시 (참고):**\n\n```javascript\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const isConversationSelectedAndLoggedIn = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {isConversationSelectedAndLoggedIn ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <label htmlFor=\"chat-input\" className=\"sr-only\">\n              메시지를 입력하세요.\n            </label>\n            <textarea\n              id=\"chat-input\"\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: '24px' }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className={`text-${isLoading ? 'gray-400' : 'zinc-600'} hover:text-black text-sm ${\n                  isLoading ? 'cursor-not-allowed opacity-50' : ''\n                }`}\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;\n```\n\n**참고:**\n\n*   위 코드는 예시이며, 실제 구현에 따라 수정해야 합니다.\n*   `textarea`의 높이를 자동으로 조절하려면 JavaScript를 사용하여 내용 길이에 따라 높이를 동적으로 조절해야 합니다.\n*   CSS 클래스 이름을 일관성을 유지하는 것이 중요합니다.\n\n이러한 개선 사항을 적용하면 코드의 품질이 향상되고 사용자 경험이 더 나아질 것입니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:26:59.11711"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:04.464 [http-nio-48080-exec-10] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-10
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:04.472 [http-nio-48080-exec-10] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-10
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:05.597 [http-nio-48080-exec-9] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-9
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:05.602 [http-nio-48080-exec-9] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-9
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 11,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:25:19.60467"
}, {
  "id" : 12,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:25:19.60871"
}, {
  "id" : 13,
  "message" : "아래 코드 수정할 부분 있어?\n\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const canChat = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {canChat ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <textarea\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: \"24px\" }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className=\"text-zinc-600 hover:text-black text-sm\"\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:16:34.777014"
}, {
  "id" : 14,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:16:34.78043"
}, {
  "id" : 15,
  "message" : "뭐야",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:16:49.682429"
}, {
  "id" : 16,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:16:49.683885"
}, {
  "id" : 17,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:17:42.411748"
}, {
  "id" : 18,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:17:42.412871"
}, {
  "id" : 19,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:18:51.699807"
}, {
  "id" : 20,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:18:51.701806"
}, {
  "id" : 21,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:25:00.071499"
}, {
  "id" : 22,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:25:00.073498"
}, {
  "id" : 23,
  "message" : "아래 코드 수정할 부분 있어?\n\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const canChat = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {canChat ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <textarea\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: \"24px\" }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className=\"text-zinc-600 hover:text-black text-sm\"\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:26:59.116076"
}, {
  "id" : 24,
  "message" : "코드 잘 작성하셨습니다. 몇 가지 개선할 부분과 고려할 부분을 제안합니다.\n\n**1. 스타일링 개선:**\n\n*   **textarea 높이 조절:** `style={{ height: \"24px\" }}` 부분은 textarea의 초기 높이를 고정값으로 설정하고 있습니다. 사용자가 입력하는 내용에 따라 높이가 자동으로 조절되도록 `textarea`의 높이를 `resize-y` 속성을 활용하거나, JavaScript를 사용하여 내용 길이에 따라 높이를 동적으로 조절하는 것을 고려할 수 있습니다.  이렇게 하면 사용자 경험이 더 자연스러워집니다.\n\n*   **전송 버튼 스타일:** `text-zinc-600 hover:text-black`은 기본 스타일과 호버 스타일만 제공합니다.  활성화/비활성화 상태에 따른 스타일 변화를 추가하여 시각적인 피드백을 줄 수 있습니다.  예를 들어, `isLoading` 상태일 때 버튼의 색상을 흐리게 하거나, 텍스트를 변경하는 등의 효과를 줄 수 있습니다.\n\n**2. 접근성 (Accessibility) 고려:**\n\n*   **textarea label:**  textarea는 어떤 내용을 입력해야 하는지 명확하게 알려주는 `<label>` 요소를 연결하는 것이 좋습니다.  시각 장애가 있는 사용자가 screen reader를 통해 내용을 이해하는 데 도움이 됩니다.\n*   **전송 버튼의 의미 전달:**  전송 버튼의 `type` 속성을 명시적으로 설정하는 것이 좋습니다.  기본적으로 버튼은 `type=\"submit\"`로 설정되어야 할 수도 있습니다.  `type=\"button\"`은 버튼이 폼 제출과 관련된 동작을 하지 않도록 지정합니다.\n*   **키보드 접근성:**  `onKeyDown` 핸들러를 통해 키보드 접근성을 개선할 수 있습니다.  예를 들어, `Enter` 키를 누르면 `onSend` 함수가 실행되도록 할 수 있습니다.\n\n**3. 코드 가독성 향상:**\n\n*   **변수 이름:**  `canChat` 변수는 코드의 의미를 명확하게 전달하지만, 더 구체적인 이름을 사용할 수 있습니다.  예를 들어, `isConversationSelectedAndLoggedIn`와 같이 좀 더 명확하게 표현할 수 있습니다.\n*   **조건부 렌더링:** 조건부 렌더링(`canChat ? ... : ...`)을 더 간결하게 표현하기 위해 삼항 연산자를 더 간단하게 만들거나, `&&` 연산자를 사용할 수 있습니다.\n*   **CSS 클래스 이름:** CSS 클래스 이름은 일관성을 유지하는 것이 중요합니다.  예를 들어, `bg-zinc-200`와 같은 스타일을 다른 컴포넌트에서도 동일하게 사용하는 것이 좋습니다.\n\n**수정된 코드 예시 (참고):**\n\n```javascript\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const isConversationSelectedAndLoggedIn = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {isConversationSelectedAndLoggedIn ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <label htmlFor=\"chat-input\" className=\"sr-only\">\n              메시지를 입력하세요.\n            </label>\n            <textarea\n              id=\"chat-input\"\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: '24px' }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className={`text-${isLoading ? 'gray-400' : 'zinc-600'} hover:text-black text-sm ${\n                  isLoading ? 'cursor-not-allowed opacity-50' : ''\n                }`}\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;\n```\n\n**참고:**\n\n*   위 코드는 예시이며, 실제 구현에 따라 수정해야 합니다.\n*   `textarea`의 높이를 자동으로 조절하려면 JavaScript를 사용하여 내용 길이에 따라 높이를 동적으로 조절해야 합니다.\n*   CSS 클래스 이름을 일관성을 유지하는 것이 중요합니다.\n\n이러한 개선 사항을 적용하면 코드의 품질이 향상되고 사용자 경험이 더 나아질 것입니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:26:59.11711"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:07.122 [http-nio-48080-exec-7] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-7
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/3
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:07.127 [http-nio-48080-exec-7] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-7
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/3
  ◀ Body     : [ {
  "id" : 25,
  "message" : "신규 채팅",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:29:57.839753"
}, {
  "id" : 26,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 어떤 질문이든 편하게 물어보세요. 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:29:57.841324"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:08.464 [http-nio-48080-exec-8] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-8
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/1
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:08.469 [http-nio-48080-exec-8] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-8
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/1
  ◀ Body     : [ {
  "id" : 1,
  "message" : "카카오 로그인 연동하는 예시 코드좀 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T15:57:14.532133"
}, {
  "id" : 2,
  "message" : "카카오 로그인을 연동하는 예시 코드는 크게 프론트엔드(웹 또는 앱)와 백엔드 부분으로 나눌 수 있습니다. 여기서는 웹 환경에서의 기본적인 예시 코드를 제공합니다.\n\n**1. 프론트엔드 (HTML & JavaScript)**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Kakao Login</title>\n    <script src=\"https://developers.kakao.com/sdk/js/kakao.js\"></script>\n</head>\n<body>\n    <button id=\"kakao-login\">카카오톡 로그인</button>\n\n    <script>\n        // 카카오톡 로그인 버튼 클릭 이벤트\n        document.getElementById('kakao-login').addEventListener('click', () => {\n            // 카카오톡 로그인 API 호출\n            Kakao.init('YOUR_APP_KEY'); // 여기에 앱 키 입력\n\n            Kakao.Auth.login({\n                success: function(authObj) {\n                    // 로그인 성공 시\n                    console.log(authObj);\n                    // 사용자 정보 가져오기\n                    Kakao.Auth.setAccessToken(authObj.accessToken);\n                    Kakao.API.request({\n                        url: '/v2/user/me',\n                        method: 'GET',\n                        headers: {\n                            'Authorization': 'Bearer ' + authObj.accessToken\n                        }\n                    }).then(function(result) {\n                        console.log('User info: ', result.response);\n                        // 사용자 정보 활용 (예: 사용자 이름 표시)\n                    }).catch(function(error) {\n                        console.error(error);\n                    });\n                },\n                fail: function(error) {\n                    // 로그인 실패 시\n                    console.error(error);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n```\n\n**설명:**\n\n*   `Kakao.init('YOUR_APP_KEY')`: 카카오 로그인 SDK를 초기화합니다.  `YOUR_APP_KEY` 부분을 실제 카카오 앱의 앱 키로 바꿔야 합니다.\n*   `Kakao.Auth.login()`: 카카오톡 로그인 창을 띄웁니다.\n*   `success` 콜백: 로그인 성공 시 실행되는 함수입니다.  `authObj`에는 로그인에 필요한 정보(액세스 토큰 등)가 담겨 있습니다.\n*   `fail` 콜백: 로그인 실패 시 실행되는 함수입니다.\n*   `Kakao.API.request()`: 카카오 API를 호출하여 사용자 정보를 가져옵니다.  `url`은 사용자 정보를 가져오는 API 엔드포인트입니다. `Authorization` 헤더에 액세스 토큰을 포함해야 API 요청을 할 수 있습니다.\n\n**2. 백엔드 (Node.js 예시)**\n\n카카오 로그인 연동 시 백엔드에서는 주로 사용자 인증 및 권한 부여를 처리합니다.  여기서는 Node.js와 Express를 사용하여 간단한 예시를 제공합니다.  실제 서비스에서는 더 복잡한 로직이 필요할 수 있습니다.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/login', (req, res) => {\n    // 카카오톡 로그인 URL 생성 (필요에 따라 구현)\n    //  (카카오 로그인 페이지로 리디렉션)\n\n    // 예시:\n    // const kakaoAuthUrl = 'https://kauth.kakao.com/oauth/authorize?client_id=YOUR_APP_KEY&redirect_uri=YOUR_REDIRECT_URI&response_type=code';\n    // res.redirect(kakaoAuthUrl);\n});\n\napp.get('/callback', (req, res) => {\n    // 카카오톡에서 리디렉션된 URL\n    const code = req.query.code;\n\n    // 카카오톡 API를 사용하여 액세스 토큰 발급 (코드 교환)\n    //  (카카오 개발자 문서 참고)\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    //  (카카오 API 활용)\n\n    // 사용자 정보를 데이터베이스에 저장 또는 기존 사용자 정보와 연결\n    //  (예: 이메일, 사용자 ID 등)\n\n    // 사용자 인증 성공 후 리디렉션\n    // res.send('Login Success');\n});\n\napp.listen(port, () => {\n    console.log(`Example app listening at http://localhost:${port}`);\n});\n```\n\n**설명:**\n\n*   `/login` 엔드포인트: 카카오 로그인 페이지로 리디렉션하는 역할을 합니다.\n*   `/callback` 엔드포인트: 카카오톡에서 인증 후 리디렉션되는 URL입니다.  여기서 인증 코드를 받아 액세스 토큰으로 교환하고 사용자 정보를 가져와 데이터베이스에 저장하거나 기존 사용자 정보와 연결합니다.\n\n**주의사항:**\n\n*   **앱 키:** 카카오 디벨로퍼 콘솔에서 발급받은 앱 키를 사용해야 합니다.\n*   **리디렉션 URI:**  카카오 디벨로퍼 콘솔에 등록된 리디렉션 URI를 사용해야 합니다.  백엔드 서버의 `/callback` URL이 리디렉션 URI로 설정되어야 합니다.\n*   **액세스 토큰 보안:** 액세스 토큰은 민감한 정보이므로 안전하게 관리해야 합니다.  서버에서 암호화하거나 별도의 보안 모듈을 사용하는 것이 좋습니다.\n*   **사용자 정보 처리:** 사용자 정보를 수집하고 사용하는 경우 개인정보보호 관련 법규를 준수해야 합니다.\n*   **카카오 API 문서:**  카카오 로그인 연동에 대한 자세한 내용은 카카오 디벨로퍼 문서([https://developers.kakao.com/](https://developers.kakao.com/))를 참고하십시오.\n\n이 코드는 기본적인 예시이며, 실제 서비스에서는 더 많은 고려 사항(에러 처리, 보안, 사용자 경험 등)을 고려해야 합니다.  카카오 디벨로퍼 문서를 참고하여 필요한 기능을 구현하고, 보안에 유의하여 코드를 작성하십시오.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T15:57:14.536265"
}, {
  "id" : 3,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:25.616945"
}, {
  "id" : 4,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊 궁금한 점이 있거나 필요한 정보가 있다면 편하게 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:25.619088"
}, {
  "id" : 5,
  "message" : "고마워",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:00:44.374304"
}, {
  "id" : 6,
  "message" : "천만에요! 😊 도움이 되었다니 기쁩니다. 혹시 또 필요한 것이 있으시면 언제든지 말씀해주세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:00:44.375305"
}, {
  "id" : 7,
  "message" : "next.js에서 카카오 로그인 연동 예시 코드 알려줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:03:30.927797"
}, {
  "id" : 8,
  "message" : "## Next.js에서 카카오 로그인 연동 예시 코드\n\n다음은 Next.js에서 카카오 로그인을 연동하는 기본적인 예시 코드입니다.\n\n**1. 카카오 개발자 준비:**\n\n*   [카카오 개발자 사이트](https://developers.kakao.com/)에 가입하고, 앱을 생성합니다.\n*   앱 생성 후, **앱 키** 및 **JavaScript 키**를 발급받습니다.\n*   카카오톡 로그인 연동을 위해 필요한 **Redirect URI**를 설정합니다. (예: `http://localhost:3000/kakao/callback`)\n\n**2. Next.js 프로젝트 설정:**\n\n*   **Kakao JavaScript SDK 설치:**\n\n```bash\nnpm install @kakao/sdk\n```\n\n*   **.env 파일 설정:**\n\n```\nKAKAO_APP_KEY=YOUR_KAKAO_APP_KEY\n```\n\n**3. 페이지 컴포넌트 구현 (KakaoLogin.js):**\n\n```jsx\n// KakaoLogin.js\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useKakao } from './KakaoContext'; // KakaoContext 사용 (선택 사항)\n\nconst KakaoLogin = () => {\n  const router = useRouter();\n  const { kakaoLogin } = useKakao(); // KakaoContext 사용 (선택 사항)\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // 카카오톡 로그인 버튼 표시 여부 설정\n    window.Kakao.isPlusFriend(\n      (error, result) => {\n        if (error) {\n          console.log(error);\n        } else if (result) {\n          // 친구 추가 시 버튼 표시\n        } else {\n          // 친구 추가 안했을 시 버튼 숨김\n        }\n      }\n    );\n  }, []);\n\n\n  const handleKakaoLogin = async () => {\n    setLoading(true);\n    try {\n      const result = await kakaoLogin();\n      if (result) {\n        // 로그인 성공 시 처리 (예: 사용자 정보 저장, 홈 페이지로 리다이렉트)\n        router.push('/'); // 예시: 홈 페이지로 리다이렉트\n      } else {\n        // 로그인 실패 시 처리\n        alert('카카오 로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      alert('카카오 로그인 오류가 발생했습니다.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <button onClick={handleKakaoLogin} disabled={loading}>\n      {loading ? '로딩 중...' : '카카오 로그인'}\n    </button>\n  );\n};\n\nexport default KakaoLogin;\n```\n\n**4. KakaoContext.js (선택 사항 - 로직 분리 및 재사용성을 위해):**\n\n```jsx\n// KakaoContext.js\nimport { useState, useEffect, createContext, useContext } from 'react';\n\nconst KakaoContext = createContext(null);\n\nconst KakaoProvider = ({ children }) => {\n  const [kakao, setKakao] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = 'https://developers.kakao.com/sdk/js/Kakao.js';\n    script.async = true;\n    document.body.appendChild(script);\n\n    script.onload = () => {\n      window.Kakao.init(process.env.KAKAO_APP_KEY);\n      setKakao(window.Kakao);\n    };\n  }, []);\n\n  const kakaoLogin = async () => {\n    if (!kakao) {\n      return false;\n    }\n\n    try {\n      const result = await kakao.Auth.login({\n        scope: 'profile',\n        redirectUri: 'http://localhost:3000/kakao/callback',\n      });\n      if (result) {\n        // 사용자 정보 가져오기\n        const profile = await kakao.API.request({\n          url: '/v2/user/me',\n          method: 'get',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        });\n        console.log(profile);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('카카오 로그인 오류:', error);\n      return false;\n    }\n  }\n  return (\n    <KakaoContext.Provider value={{ kakaoLogin }}>\n      {children}\n    </KakaoContext.Provider>\n  );\n};\n\nexport { KakaoContext, KakaoProvider };\n```\n\n**5. 페이지 컴포넌트 사용 (index.js 또는 app.js):**\n\n```jsx\n// index.js 또는 app.js\nimport KakaoLogin from './KakaoLogin';\nimport { KakaoProvider } from './KakaoContext';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>카카오 로그인</h1>\n      <KakaoProvider>\n        <KakaoLogin />\n      </KakaoProvider>\n    </div>\n  );\n}\n\nexport default HomePage;\n```\n\n**6.  `/kakao/callback` 페이지 구현:**\n\n카카오 로그인이 완료되면 리다이렉트되는 페이지입니다.  이 페이지에서 카카오로부터 전달된 인증 코드를 사용하여 사용자 정보를 가져와야 합니다.\n\n```jsx\n// pages/kakao/callback.js\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nconst KakaoCallback = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    // 카카오로부터 인증 코드 받기\n    const code = router.query.code;\n\n    // 인증 코드를 사용하여 사용자 정보 가져오기 (백엔드 API 호출 필요)\n    // 예: fetch(`/api/kakao/login?code=${code}`)\n\n    // 사용자 정보를 저장하고 홈 페이지로 리다이렉트\n    // 예: router.push('/');\n\n    console.log('카카오 콜백 페이지:', code);\n  }, [router]);\n\n  return (\n    <div>\n      <h1>카카오 로그인 콜백 페이지</h1>\n    </div>\n  );\n};\n\nexport default KakaoCallback;\n```\n\n**주의 사항:**\n\n*   **Redirect URI:**  카카오 개발자 사이트에서 설정한 Redirect URI와 Next.js 애플리케이션의 경로가 정확하게 일치해야 합니다.\n*   **백엔드 API:** 사용자 정보를 안전하게 저장하려면 백엔드 API를 사용하여 카카오로부터 전달된 인증 코드를 기반으로 사용자 정보를 가져와야 합니다.  콜백 페이지에서 직접 사용자 정보를 처리하지 않는 것이 좋습니다.\n*   **보안:**  앱 키와 JavaScript 키는 민감한 정보이므로 `.env` 파일에 저장하고, GitHub 등에 공개하지 않도록 주의해야 합니다.\n*   **CORS:**  카카오 API 호출 시 CORS 문제가 발생할 수 있습니다.  Next.js 설정 또는 프록시 설정을 통해 해결해야 합니다.\n*   **쿠키 설정:**  카카오 로그인 시 쿠키 설정이 필요할 수 있습니다.  Next.js 설정을 통해 쿠키를 설정해야 합니다.\n\n위 예시 코드는 기본적인 카카오 로그인 연동 방법을 보여주는 것이며, 실제 구현 시에는 보안, 사용자 경험, 백엔드 연동 등을 고려하여 코드를 수정하고 보완해야 합니다. 카카오 로그인 연동에 대한 자세한 내용은 [카카오 로그인 연동 가이드](https://developers.kakao.com/docs/login-flow)를 참고하세요.\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:03:30.930161"
}, {
  "id" : 9,
  "message" : "카카오 로그인 연동하는 예시 코드만 줘",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:08:26.120605"
}, {
  "id" : 10,
  "message" : "```python\nfrom flask import Flask, render_template, redirect, url_for, session\nfrom kakao import KakaoLogin\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'  # 실제로는 안전한 키로 변경해야 함\n\n# 카카오 로그인 설정 (본인 정보로 변경)\nKAKAO_APP_KEY = 'YOUR_KAKAO_APP_KEY'\nKAKAO_REDIRECT_URI = 'YOUR_REDIRECT_URI'  # 카카오 로그인 후 리다이렉트될 URL\n\nkakao_login = KakaoLogin(KAKAO_APP_KEY, KAKAO_REDIRECT_URI)\n\n\n@app.route('/')\ndef index():\n    if 'kakao_access_token' in session:\n        user_info = kakao_login.get_user_info(session['kakao_access_token'])\n        return render_template('index.html', user_info=user_info)\n    else:\n        return render_template('index.html', user_info=None)\n\n\n@app.route('/login')\ndef login():\n    kakao_login_url = kakao_login.get_login_url()\n    return redirect(kakao_login_url)\n\n\n@app.route('/callback')\ndef callback():\n    code = request.args.get('code')\n    access_token = kakao_login.get_access_token(code)\n\n    if access_token:\n        session['kakao_access_token'] = access_token\n        return redirect(url_for('index'))\n    else:\n        return \"카카오 로그인 실패\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n**주의 사항:**\n\n*   **`YOUR_KAKAO_APP_KEY` 및 `YOUR_REDIRECT_URI`를 본인의 정보로 변경해야 합니다.**  카카오 개발자 콘솔에서 애플리케이션을 등록하고 얻은 값을 사용합니다.\n*   `app.secret_key`는 보안에 매우 중요합니다.  프로덕션 환경에서는 안전한 비밀 키를 사용해야 합니다.\n*   이 코드는 기본적인 예시이며, 오류 처리, 세션 관리, 사용자 인터페이스 등은 추가적으로 구현해야 합니다.\n*   `kakao`라는 이름의 모듈은 카카오 로그인 연동을 위한 사용자 정의 모듈이라고 가정합니다.  이 모듈을 직접 구현해야 합니다.  카카오 로그인 API를 사용하여 인증 과정을 처리해야 합니다. (아래 예시 모듈 코드 참조)\n*   `request` 객체는 Flask의 request 객체를 의미합니다.\n*   HTML 템플릿 파일(`index.html`)은 사용자 인터페이스를 정의합니다.\n\n**`kakao.py` 예시 (사용자 정의 모듈):**\n\n```python\nimport requests\n\nclass KakaoLogin:\n    def __init__(self, app_key, redirect_uri):\n        self.app_key = app_key\n        self.redirect_uri = redirect_uri\n        self.auth_url = 'https://kauth.kakao.com/oauth/authorize'\n        self.token_url = 'https://kauth.kakao.com/oauth/token'\n        self.api_url = 'https://kapi.kakao.com/v2/api/talk/channel/talk'\n\n    def get_login_url(self):\n        params = {\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'response_type': 'code',\n            'scope': 'talk_open_graph'  # 필요한 권한을 설정\n        }\n        return self.auth_url + '?' + '&'.join([f'{k}={v}' for k, v in params.items()])\n\n    def get_access_token(self, code):\n        data = {\n            'grant_type': 'authorization_code',\n            'client_id': self.app_key,\n            'redirect_uri': self.redirect_uri,\n            'code': code\n        }\n        headers = {'Content-Type': 'application/x-www-form-urlencoded'}\n        response = requests.post(self.token_url, data=data, headers=headers)\n        response.raise_for_status()  # HTTP 에러 발생 시 예외 발생\n        return response.json().get('access_token')\n\n    def get_user_info(self, access_token):\n        headers = {'Authorization': 'Bearer ' + access_token}\n        response = requests.get(self.api_url, headers=headers)\n        response.raise_for_status()\n        return response.json().get('result')\n```\n\n**index.html (예시):**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>카카오 로그인 연동 예시</title>\n</head>\n<body>\n    {% if user_info %}\n        <h1>환영합니다, {{ user_info.nickname }} 님!</h1>\n        <p>프로필 이미지: <img src=\"{{ user_info.profile_image }}\" alt=\"프로필 이미지\"></p>\n    {% else %}\n        <a href=\"{{ url_for('login') }}\">카카오 로그인</a>\n    {% endif %}\n</body>\n</html>\n```\n\n**설치해야 할 라이브러리:**\n\n```bash\npip install flask requests\n```\n\n**주의:**\n\n*   이 코드는 카카오 로그인 API를 사용하는 기본적인 예시입니다. 실제 운영 환경에서는 더 많은 보안 조치와 예외 처리가 필요합니다.\n*   카카오 로그인 정책 및 API 변경 사항을 항상 확인해야 합니다.\n*   카카오 개발자 콘솔에서 애플리케이션을 등록하고, 리다이렉트 URI를 정확하게 설정해야 합니다.\n*   카카오 로그인 API 사용 전에 카카오 개발자 가이드라인을 주의 깊게 읽어보세요.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:08:26.12512"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:16.796 [http-nio-48080-exec-1] LoggingInterceptor - 
📥 [REQUEST] ───────────────────────────────────────────
  ▶ Thread   : http-nio-48080-exec-1
  ▶ Method   : GET
  ▶ URI      : /api/chat/list/2
  ▶ Headers  : host=192.168.0.24:48080, connection=keep-alive, content-type=application/json, accept=*/*, accept-language=*, sec-fetch-mode=cors, user-agent=node, accept-encoding=gzip, deflate
  ▶ Body     : {}
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:30:16.801 [http-nio-48080-exec-1] LoggingInterceptor - 
📤 [RESPONSE] ──────────────────────────────────────────
  ◀ Thread   : http-nio-48080-exec-1
  ◀ Status   : 200
  ◀ URI      : /api/chat/list/2
  ◀ Body     : [ {
  "id" : 11,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T16:25:19.60467"
}, {
  "id" : 12,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T16:25:19.60871"
}, {
  "id" : 13,
  "message" : "아래 코드 수정할 부분 있어?\n\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const canChat = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {canChat ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <textarea\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: \"24px\" }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className=\"text-zinc-600 hover:text-black text-sm\"\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:16:34.777014"
}, {
  "id" : 14,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:16:34.78043"
}, {
  "id" : 15,
  "message" : "뭐야",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:16:49.682429"
}, {
  "id" : 16,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:16:49.683885"
}, {
  "id" : 17,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:17:42.411748"
}, {
  "id" : 18,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:17:42.412871"
}, {
  "id" : 19,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:18:51.699807"
}, {
  "id" : 20,
  "message" : "AI 응답 실패",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:18:51.701806"
}, {
  "id" : 21,
  "message" : "안녕",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:25:00.071499"
}, {
  "id" : 22,
  "message" : "안녕하세요! 무엇을 도와드릴까요? 😊\n",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:25:00.073498"
}, {
  "id" : 23,
  "message" : "아래 코드 수정할 부분 있어?\n\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const canChat = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {canChat ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <textarea\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: \"24px\" }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className=\"text-zinc-600 hover:text-black text-sm\"\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;",
  "senderType" : "USER",
  "createdAt" : "2025-04-18T17:26:59.116076"
}, {
  "id" : 24,
  "message" : "코드 잘 작성하셨습니다. 몇 가지 개선할 부분과 고려할 부분을 제안합니다.\n\n**1. 스타일링 개선:**\n\n*   **textarea 높이 조절:** `style={{ height: \"24px\" }}` 부분은 textarea의 초기 높이를 고정값으로 설정하고 있습니다. 사용자가 입력하는 내용에 따라 높이가 자동으로 조절되도록 `textarea`의 높이를 `resize-y` 속성을 활용하거나, JavaScript를 사용하여 내용 길이에 따라 높이를 동적으로 조절하는 것을 고려할 수 있습니다.  이렇게 하면 사용자 경험이 더 자연스러워집니다.\n\n*   **전송 버튼 스타일:** `text-zinc-600 hover:text-black`은 기본 스타일과 호버 스타일만 제공합니다.  활성화/비활성화 상태에 따른 스타일 변화를 추가하여 시각적인 피드백을 줄 수 있습니다.  예를 들어, `isLoading` 상태일 때 버튼의 색상을 흐리게 하거나, 텍스트를 변경하는 등의 효과를 줄 수 있습니다.\n\n**2. 접근성 (Accessibility) 고려:**\n\n*   **textarea label:**  textarea는 어떤 내용을 입력해야 하는지 명확하게 알려주는 `<label>` 요소를 연결하는 것이 좋습니다.  시각 장애가 있는 사용자가 screen reader를 통해 내용을 이해하는 데 도움이 됩니다.\n*   **전송 버튼의 의미 전달:**  전송 버튼의 `type` 속성을 명시적으로 설정하는 것이 좋습니다.  기본적으로 버튼은 `type=\"submit\"`로 설정되어야 할 수도 있습니다.  `type=\"button\"`은 버튼이 폼 제출과 관련된 동작을 하지 않도록 지정합니다.\n*   **키보드 접근성:**  `onKeyDown` 핸들러를 통해 키보드 접근성을 개선할 수 있습니다.  예를 들어, `Enter` 키를 누르면 `onSend` 함수가 실행되도록 할 수 있습니다.\n\n**3. 코드 가독성 향상:**\n\n*   **변수 이름:**  `canChat` 변수는 코드의 의미를 명확하게 전달하지만, 더 구체적인 이름을 사용할 수 있습니다.  예를 들어, `isConversationSelectedAndLoggedIn`와 같이 좀 더 명확하게 표현할 수 있습니다.\n*   **조건부 렌더링:** 조건부 렌더링(`canChat ? ... : ...`)을 더 간결하게 표현하기 위해 삼항 연산자를 더 간단하게 만들거나, `&&` 연산자를 사용할 수 있습니다.\n*   **CSS 클래스 이름:** CSS 클래스 이름은 일관성을 유지하는 것이 중요합니다.  예를 들어, `bg-zinc-200`와 같은 스타일을 다른 컴포넌트에서도 동일하게 사용하는 것이 좋습니다.\n\n**수정된 코드 예시 (참고):**\n\n```javascript\nconst ChatInput = ({\n  isLoggedIn,\n  input,\n  onChange,\n  onKeyDown,\n  textareaRef,\n  onSend,\n  isLoading,\n  selectedConversationId, // 추가됨\n}) => {\n  const isConversationSelectedAndLoggedIn = isLoggedIn && selectedConversationId;\n\n  return (\n    <div className=\"absolute bottom-0 left-0 right-0 px-6 py-4 bg-white border-zinc-300\">\n      <div className=\"max-w-3xl mx-auto\">\n        {isConversationSelectedAndLoggedIn ? (\n          <div className=\"bg-zinc-200 text-black px-4 py-4 rounded-2xl focus-within:ring-2 focus-within:ring-zinc-400\">\n            <label htmlFor=\"chat-input\" className=\"sr-only\">\n              메시지를 입력하세요.\n            </label>\n            <textarea\n              id=\"chat-input\"\n              ref={textareaRef}\n              rows={1}\n              value={input}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              disabled={isLoading}\n              placeholder=\"메시지를 입력하세요.\"\n              className=\"w-full bg-transparent outline-none placeholder-zinc-500 text-sm resize-none overflow-y-auto leading-relaxed disabled:cursor-not-allowed\"\n              style={{ height: '24px' }}\n            />\n            <div className=\"flex justify-end mt-2\">\n              <button\n                type=\"button\"\n                className={`text-${isLoading ? 'gray-400' : 'zinc-600'} hover:text-black text-sm ${\n                  isLoading ? 'cursor-not-allowed opacity-50' : ''\n                }`}\n                onClick={onSend}\n                disabled={isLoading}\n              >\n                전송\n              </button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"text-center py-4 text-gray-500\">\n            {isLoggedIn\n              ? \"채팅을 먼저 선택해주세요.\"\n              : \"로그인 후 채팅이 가능합니다.\"}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInput;\n```\n\n**참고:**\n\n*   위 코드는 예시이며, 실제 구현에 따라 수정해야 합니다.\n*   `textarea`의 높이를 자동으로 조절하려면 JavaScript를 사용하여 내용 길이에 따라 높이를 동적으로 조절해야 합니다.\n*   CSS 클래스 이름을 일관성을 유지하는 것이 중요합니다.\n\n이러한 개선 사항을 적용하면 코드의 품질이 향상되고 사용자 경험이 더 나아질 것입니다.",
  "senderType" : "ASSISTANT",
  "createdAt" : "2025-04-18T17:26:59.11711"
} ]
──────────────────────────────────────────────────────────
[INFO ] 2025-04-18 17:49:23.400 [SpringApplicationShutdownHook] GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
[INFO ] 2025-04-18 17:49:23.419 [tomcat-shutdown] GracefulShutdown - Graceful shutdown complete
[INFO ] 2025-04-18 17:49:23.428 [SpringApplicationShutdownHook] LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
[WARN ] 2025-04-18 17:49:23.434 [SpringApplicationShutdownHook] DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-232]
[INFO ] 2025-04-18 17:49:23.434 [SpringApplicationShutdownHook] HikariDataSource - HikariPool - Shutdown initiated...
[INFO ] 2025-04-18 17:49:23.435 [SpringApplicationShutdownHook] HikariDataSource - HikariPool - Shutdown completed.
